import{_ as e,c as a,o as i,ae as t}from"./chunks/framework.CIivgcbp.js";const h=JSON.parse('{"title":"08_React 脚手架","description":"","frontmatter":{},"headers":[],"relativePath":"前端技术/08 React/08_React脚手架.md","filePath":"前端技术/08 React/08_React脚手架.md"}'),o={name:"前端技术/08 React/08_React脚手架.md"};function r(c,l,s,n,d,p){return i(),a("div",null,l[0]||(l[0]=[t('<h1 id="_08-react-脚手架" tabindex="-1">08_React 脚手架 <a class="header-anchor" href="#_08-react-脚手架" aria-label="Permalink to &quot;08_React 脚手架&quot;">​</a></h1><h2 id="什么是脚手架" tabindex="-1">什么是脚手架 <a class="header-anchor" href="#什么是脚手架" aria-label="Permalink to &quot;什么是脚手架&quot;">​</a></h2><ul><li>脚手架是用来帮助程序员快速创建一个基于 xxx 库的模板项目 <ol><li>包含了所有需要的配置（语法检查、jsx 编译、devServer…）</li><li>下载好了所有相关的依赖</li><li>可以直接运行一个简单效果</li></ol></li><li>react 提供了一个用于创建 react 项目的脚手架库: create-react-app</li><li>项目的整体技术架构为: react + webpack + es6 + eslint</li><li>使用脚手架开发的项目的特点: 模块化, 组件化, 工程化</li></ul><h2 id="安装步骤" tabindex="-1">安装步骤 <a class="header-anchor" href="#安装步骤" aria-label="Permalink to &quot;安装步骤&quot;">​</a></h2><p>第一步，全局安装：<code>npm i -g create-react-app</code><br> 第二步，切换到想创项目的目录，使用命令：<code>create-react-app hello-react</code><br> 第三步，进入项目文件夹：<code>cd hello-react</code><br> 第四步，启动项目：<code>npm start</code></p><h2 id="项目结构" tabindex="-1">项目结构 <a class="header-anchor" href="#项目结构" aria-label="Permalink to &quot;项目结构&quot;">​</a></h2><ul><li>public ---- 静态资源文件夹 <ul><li>favicon.icon ------ 网站页签图标</li><li>==index.html -------- 主页面==</li><li>logo192.png ------- logo 图</li><li>logo512.png ------- logo 图</li><li>manifest.json ----- 应用加壳的配置文件</li><li>robots.txt -------- 爬虫协议文件</li></ul></li><li>src ---- 源码文件夹 <ul><li>App.css -------- App 组件的样式</li><li>==App.js --------- App 组件==</li><li>App.test.js ---- 用于给 App 做测试</li><li>index.css ------ 样式</li><li>==index.js ------- 入口文件==</li><li>logo.svg ------- logo 图</li><li>reportWebVitals.js ------- 页面性能分析文件 (需要 web-vitals 库的支持)</li><li>setupTests.js ------- 组件单元测试的文件 (需要 jest-dom 库的支持)</li></ul></li></ul><h2 id="功能界面的组件化编码流程-通用" tabindex="-1">功能界面的组件化编码流程（通用） <a class="header-anchor" href="#功能界面的组件化编码流程-通用" aria-label="Permalink to &quot;功能界面的组件化编码流程（通用）&quot;">​</a></h2><ol><li>拆分组件: 拆分界面,抽取组件</li><li>实现静态组件: 使用组件实现静态页面效果</li><li>实现动态组件 <ol><li>动态显示初始化数据 <ol><li>数据类型</li><li>数据名称</li><li>保存在哪个组件?</li></ol></li><li>交互 (从绑定事件监听开始)</li></ol></li></ol>',9)]))}const u=e(o,[["render",r]]);export{h as __pageData,u as default};
