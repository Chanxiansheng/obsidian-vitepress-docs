import{_ as s,c as a,o as l,ae as t}from"./chunks/framework.CIivgcbp.js";const o=JSON.parse('{"title":"04 着色器的基础知识","description":"","frontmatter":{},"headers":[],"relativePath":"前端技术/03 JavaScript/07浏览器交互/WebGL入门/04 着色器的基础知识.md","filePath":"前端技术/03 JavaScript/07浏览器交互/WebGL入门/04 着色器的基础知识.md"}'),e={name:"前端技术/03 JavaScript/07浏览器交互/WebGL入门/04 着色器的基础知识.md"};function n(p,i,h,k,r,d){return l(),a("div",null,i[0]||(i[0]=[t(`<h1 id="_04-着色器的基础知识" tabindex="-1">04 着色器的基础知识 <a class="header-anchor" href="#_04-着色器的基础知识" aria-label="Permalink to &quot;04 着色器的基础知识&quot;">​</a></h1><p>GLSL（OpenGL Shading Language）是一种用于编写图形着色器的编程语言。着色器是用于在图形处理单元（GPU）上执行特定图形处理任务的程序。通俗讲，着色器是画点的工具，一个图形是由无数个点组成的，每个点都有其自己的颜色。​</p><h2 id="着色器的类型​" tabindex="-1">着色器的类型​ <a class="header-anchor" href="#着色器的类型​" aria-label="Permalink to &quot;着色器的类型​&quot;">​</a></h2><p>一个着色器就是一个绘制东西到屏幕上的函数，着色器有顶点着色器和片段着色器​</p><ul><li><p>顶点着色器：处理每个顶点的属性，如位置、法线、纹理坐标等。它的主要任务是将顶点从对象坐标系转换到屏幕坐标系，并传递其他顶点属性给片段着色器。​</p></li><li><p>片段着色器：处理每个像素的颜色。它接收来自顶点着色器插值后的数据，并最终决定每个像素的颜色。​</p></li></ul><h2 id="着色器的语法​" tabindex="-1">着色器的语法​ <a class="header-anchor" href="#着色器的语法​" aria-label="Permalink to &quot;着色器的语法​&quot;">​</a></h2><p>在 HTML 中，如果你想把着色器代码直接写在 <code>&lt;script&gt;</code> 标签中，通常会使用自定义的 MIME 类型，以避免浏览器将其作为常规 JavaScript 代码执行。常见的做法是将 type 属性设置为一个非标准类型，例如 <code>x-shader/x-vertex</code> 和 <code>x-shader/x-fragment</code>，分别用于顶点着色器和片段着色器。这样做的好处是可以通过 JavaScript 获取和解析着色器代码。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--顶点着色器--&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vertex-shader&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x-shader/x-vertex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--片段着色器--&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fragment-shader&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x-shader/x-fragment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ol><li><p>数据类型</p><ul><li>基本数据类型：float, int, bool​</li><li>向量类型：vec2, vec3, vec4（浮点型）；ivec2, ivec3, ivec4（整数型）；bvec2, bvec3, bvec4（布尔型）​</li><li>矩阵类型：mat2, mat3, mat4​</li><li>采样器类型：sampler2D, samplerCube（用于纹理采样）​</li></ul></li><li><p>变量修饰符<br> 用于指定变量的作用域、生命周期和用途。不同的修饰符在顶点着色器和片段着色器中起到不同的作用。 ​</p><ul><li>attribute：用于顶点着色器，定义从顶点缓冲区传入的变量（仅在顶点着色器中使用）。​</li><li>uniform：定义在整个渲染过程中保持不变的变量，常用于传递变换矩阵、光照参数等。​</li><li>varying：用于在顶点着色器和片段着色器之间传递插值数据。</li></ul></li><li><p>内置变量</p><ul><li><p>顶点着色器内置变量：​</p><ul><li><code>gl_Position</code> ：顶点的变换后位置​</li><li><code>gl_PointSize</code>： 顶点大小​</li></ul></li><li><p>片段着色器内置变量：​</p><ul><li><code>gl_FragColor</code>：片段的最终颜色。</li></ul></li></ul></li><li><p>函数​</p><ul><li>常用数学函数：sin, cos, tan, pow, exp, log, sqrt, abs, min, max，radians​</li><li>向量函数：dot, cross, normalize, length, distance​</li><li>纹理采样函数：texture2D, textureCube</li></ul></li><li><p>定义精度<br><code>precision</code> 关键字用于声明变量的默认精度。​<br> GLSL 支持三种不同的精度修饰符：​</p><ul><li>highp（高精度）：通常用 32 位表示，适用于需要高精度的计算，如位置计算、复杂的物理效果等。​</li><li>mediump（中精度）：通常用 16 位表示，适用于需要中等精度但不需要高精度的计算，如纹理坐标。​</li><li>lowp（低精度）：通常用 10 位表示，适用于对精度要求最低的计算，如颜色值。<br> 语法：<code>precision lowp float;</code></li></ul></li><li><p>主函数：着色器必须要有一个主函数 <code>void main()</code>，它是入口</p></li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	gl_Position </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uProjectionMatrix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uModelViewMatrix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> aVertexPosition;​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	vColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vec4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,10)]))}const c=s(e,[["render",n]]);export{o as __pageData,c as default};
