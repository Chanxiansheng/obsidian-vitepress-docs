import{_ as i,c as a,o as t,ae as l}from"./chunks/framework.CIivgcbp.js";const g=JSON.parse('{"title":"SQL 基础","description":"","frontmatter":{},"headers":[],"relativePath":"服务端/数据库/MySQL/SQL基础.md","filePath":"服务端/数据库/MySQL/SQL基础.md"}'),h={name:"服务端/数据库/MySQL/SQL基础.md"};function e(n,s,k,p,d,r){return t(),a("div",null,s[0]||(s[0]=[l('<h1 id="sql-基础" tabindex="-1">SQL 基础 <a class="header-anchor" href="#sql-基础" aria-label="Permalink to &quot;SQL 基础&quot;">​</a></h1><p>SQL（Structured Query Language）是一种用于管理关系型数据库系统的语言。它是一种标准化语言，用于执行各种数据库操作，包括数据查询、插入、更新和删除等。</p><div class="note custom-block github-alert"><p class="custom-block-title">Title</p><p></p><ul><li><a href="https://www.w3school.com.cn/sql/index.asp" target="_blank" rel="noreferrer">SQL 教程</a></li><li><a href="https://www.w3schools.com/mysql/default.asp" target="_blank" rel="noreferrer">MySQL 教程 - W3Schools</a></li></ul></div><ul><li>链接 Mysql 进入命令行工具</li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">root</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">password</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h2 id="基础规则" tabindex="-1">基础规则 <a class="header-anchor" href="#基础规则" aria-label="Permalink to &quot;基础规则&quot;">​</a></h2><ul><li>==SQL 对大小写不敏感！==</li><li>==SQL 分为两个部分：数据操作语言 (DML) 和 数据定义语言 (DDL)。== <ul><li>数据定义语言 (DDL) 部分使我们有能力创建或删除表格。我们也可以定义索引（键），规定表之间的链接，以及施加表间的约束。DDL 语句: <ul><li><code>CREATE DATABASE</code> - 创建新数据库</li><li><code>ALTER DATABASE</code> - 修改数据库</li><li><code>CREATE TABLE</code> - 创建新表</li><li><code>ALTER TABLE</code> - 变更（改变）数据库表</li><li><code>DROP TABLE</code> - 删除表</li><li><code>CREATE INDEX</code> - 创建索引（搜索键）</li><li><code>DROP INDEX</code> - 删除索引</li></ul></li><li>结构化查询语言（DML） 是用于执行查询的语法。但是 SQL 语言也包含用于更新、插入和删除记录的语法。DML 语句： <ul><li><code>SELECT</code> - 从数据库表中获取数据</li><li><code>UPDATE</code> - 更新数据库表中的数据</li><li><code>DELETE</code> - 从数据库表中删除数据</li><li><code>INSERT INTO</code> - 向数据库表中插入数据</li></ul></li></ul></li></ul><p>本文主要以 mysql 的语法作为例子，因此有如下规则：</p><ul><li>语句以分号 <code>;</code> 结束。</li><li>使用反引号包裹表名或列名，避免歧义。</li></ul><h2 id="ddl" tabindex="-1">DDL <a class="header-anchor" href="#ddl" aria-label="Permalink to &quot;DDL&quot;">​</a></h2><h3 id="数据库的操作" tabindex="-1">数据库的操作 <a class="header-anchor" href="#数据库的操作" aria-label="Permalink to &quot;数据库的操作&quot;">​</a></h3><ul><li>查询数据库</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">database</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li>创建数据库</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> database</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dbname</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 如果进行重复的创建就会失败，不允许重复创建。为避免这个问题可添加`if not exists`</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> database</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> exists</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;database</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 添加字符集`utf-8`</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> database</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;database</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name&gt;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> character</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;utf8mb4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li>删除数据库</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">drop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> database</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dbname</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="数据表的操作" tabindex="-1">数据表的操作 <a class="header-anchor" href="#数据表的操作" aria-label="Permalink to &quot;数据表的操作&quot;">​</a></h3><ul><li>查询表</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show tables;</span></span></code></pre></div><ul><li>创建表</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> `</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">` (</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AUTO_INCREMENT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;名字&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;年龄&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;地址&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   create_time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">timestamp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> DEFAULT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CURRENT_TIMESTAMP  COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;创建时间&#39;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;用户表&#39;</span></span></code></pre></div><p>解析：</p><ol><li><code>create table &lt;table name&gt;</code> 表名</li><li><code>id</code> 字段名称； <code>int</code> 数据类型代表数字类型； <code>NOT NULL</code>(不能为空) ；<code>AUTO_INCREMENT</code>(id 自增)； <code>PRIMARY KEY</code>(id 设为主键)；</li><li><code>name</code>(字段名称)； <code>varchar(100)</code> 字符串类型 100 字符 ；</li><li><code>age</code>(字段名称) ；<code>int</code> 数据类型代表数字类型 `</li><li><code>create_time</code>(字段名称) ；<code>timestamp</code>(时间戳) ；<code>DEFAULT CURRENT_TIMESTAMP</code>(自动填充创建时间)；</li><li><code>COMMENT</code> 注释；</li></ol><ul><li>删除表</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">drop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tabname</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><ul><li>修改表名</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ALTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `user`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RENAME </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`user2`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li>增加列</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ALTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `user`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> Add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COLUMN </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`hobby`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ;</span></span></code></pre></div><ul><li>删除列</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ALTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `user`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> DROP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COLUMN </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`hobby`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li>编辑列</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ALTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `user`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> MODIFY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COLUMN </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`age`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;年龄2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="dll" tabindex="-1">DLL <a class="header-anchor" href="#dll" aria-label="Permalink to &quot;DLL&quot;">​</a></h2><h3 id="查-select" tabindex="-1">查 SELECT <a class="header-anchor" href="#查-select" aria-label="Permalink to &quot;查 SELECT&quot;">​</a></h3><blockquote><p>查询是使用频率最高的语句</p></blockquote><p><code>SELECT 列名称 FROM 表名称</code></p><ul><li>查询单个列</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `name`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `user`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li>查询多个列，逗号隔开即可</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `name`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`id`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `user`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li>查询所有列 <code>*</code></li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `user`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li>列的别名 <code>as</code></li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `name`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `user_name`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `user`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li>排序<br><code>ORDER BY [字段名称]</code><br><code>DESC</code> 降序 (从大到小)<br><code>ASC</code> 升序 (从小到大)</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `user`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ORDER BY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `id`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> DESC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li>限制查询结果<br><code>limit [开始行] [限制条数]</code></li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `user`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> LIMIT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span></code></pre></div><ul><li>条件查询<br><code>WHERE [列] [运算符] [值]</code></li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `user`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `name`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;小明&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li>多个条件联合查询<br><code>AND</code> 和 <code>OR</code> 运算符可在 WHERE 子语句中把两个或多个条件结合起来。</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `user`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `name`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;小明&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AND</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `age`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li>模糊查询<br><code>LIKE</code> 操作符用于在 WHERE 子句中搜索列中的指定模式。<br> 可以在模式（pattern）中使用百分号来匹配一个或多个字符。下面是一些使用百分号的示例：</li><li>&quot; 球%&quot;：匹配以 &quot; 球 &quot; 开头的字符串，后面可以是任意字符。</li><li>&quot;% 球 &quot;：匹配以 &quot; 球 &quot; 结尾的字符串，前面可以是任意字符。</li><li>&quot; % 球% &quot;：匹配包含 &quot; 球 &quot; 的任意位置的字符串，前后可以是任意字符。<br>  可以配合 NOT 关键字进行反取。</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `user`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `hobby`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> LIKE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;%球&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `user`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `hobby`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> LIKE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;%球&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="增-insert-into" tabindex="-1">增 INSERT INTO <a class="header-anchor" href="#增-insert-into" aria-label="Permalink to &quot;增 INSERT INTO&quot;">​</a></h3><p><code>INSERT INTO</code> 语句用于向表格中插入新的行。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表名称 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (值1, 值2,....)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 指定所要插入数据的列</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表名称 (列1, 列2,...) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (值1, 值2,....)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 插入多条数据，用逗号分割</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表名称 (列1, 列2,...) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (值1, 值2,....)，(值1, 值2,....)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 例子</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT INTO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `user`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,age,hobby) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;小明&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;篮球&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="删-delete" tabindex="-1">删 DELETE <a class="header-anchor" href="#删-delete" aria-label="Permalink to &quot;删 DELETE&quot;">​</a></h3><p>DELETE 语句用于删除表中的行。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DELETE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表名称 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 列名称 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 值</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--例子</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DELETE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `user`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="改-update" tabindex="-1">改 Update <a class="header-anchor" href="#改-update" aria-label="Permalink to &quot;改 Update&quot;">​</a></h3><p>Update 语句用于修改表中的数据。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表名称 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 列名称 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 新值 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 列名称 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 某值</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--例子</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">UPDATE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `user`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;小明&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,hobby</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;篮球&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="进阶规则" tabindex="-1">进阶规则 <a class="header-anchor" href="#进阶规则" aria-label="Permalink to &quot;进阶规则&quot;">​</a></h2><h3 id="表达式" tabindex="-1">表达式 <a class="header-anchor" href="#表达式" aria-label="Permalink to &quot;表达式&quot;">​</a></h3><p>MySQL 表达式是一种在 MySQL 数据库中使用的计算式或逻辑式。它们可用于查询、更新和过滤数据，以及进行条件判断和计算。</p><ol><li>==算术表达式==：可以执行基本的数学运算，例如加法、减法、乘法和除法。<br> 例如：<code>SELECT col1 + col2 AS sum FROM table_name;</code></li><li>==字符串表达式==：可以对字符串进行操作，例如连接、截取和替换。<br> 例如：<code>SELECT CONCAT(first_name, &#39; &#39;, last_name) AS full_name FROM table_name;</code></li><li>==逻辑表达式==：用于执行条件判断，返回布尔值（TRUE 或 FALSE）。<br> 例如：<code>SELECT * FROM table_name WHERE age &gt; 18 AND gender = &#39;Male&#39;;</code></li><li>==条件表达式==：用于根据条件返回不同的结果。<br> 例如：<code>SELECT CASE WHEN age &lt; 18 THEN &#39;Minor&#39; ELSE &#39;Adult&#39; END AS age_group FROM table_name;</code></li><li>==聚合函数表达式==：用于计算数据集的聚合值，例如求和、平均值、最大值和最小值。<br> 例如：<code>SELECT AVG(salary) AS average_salary FROM table_name;</code></li><li>==时间和日期表达式==：用于处理时间和日期数据，例如提取年份、月份或计算日期差值。<br> 例如：<code>SELECT YEAR(date_column) AS year FROM table_name;</code></li></ol><h3 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h3><p>MySQL 提供了大量的内置函数，用于在查询和操作数据时进行计算、转换和处理。以下是一些常用的 MySQL 函数分类及其示例：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _function(列)_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _表_</span></span></code></pre></div><ol><li>字符串函数： - <code>CONCAT(str1, str2, ...)</code>：将多个字符串连接起来。 - <code>SUBSTRING(str, start, length)</code>：从字符串中提取子字符串。 - <code>UPPER(str)</code>：将字符串转换为大写。 - <code>LOWER(str)</code>：将字符串转换为小写。 - <code>LENGTH(str)</code>：返回字符串的长度。</li><li>数值函数： - <code>ABS(x)</code>：返回 x 的绝对值。 - <code>ROUND(x, d)</code>：将 x 四舍五入为 d 位小数。 - <code>CEILING(x)</code>：返回不小于 x 的最小整数。 - <code>FLOOR(x)</code>：返回不大于 x 的最大整数。 - <code>RAND()</code>：返回一个随机数。</li><li>日期和时间函数： - <code>NOW()</code>：返回当前日期和时间。 - <code>CURDATE()</code>：返回当前日期。 - <code>CURTIME()</code>：返回当前时间。 - <code>DATE_FORMAT(date, format)</code>：将日期格式化为指定的格式。 - <code>DATEDIFF(date1, date2)</code>：计算两个日期之间的天数差。</li><li>条件函数： - <code>IF(condition, value_if_true, value_if_false)</code>：根据条件返回不同的值。 - <code>CASE WHEN condition1 THEN result1 WHEN condition2 THEN result2 ELSE result END</code>：根据条件返回不同的结果。</li><li>聚合函数： - <code>COUNT(expr)</code>：计算满足条件的行数。 - <code>SUM(expr)</code>：计算表达式的总和。 - <code>AVG(expr)</code>：计算表达式的平均值。 - <code>MAX(expr)</code>：返回表达式的最大值。 - <code>MIN(expr)</code>：返回表达式的最小值。</li></ol><h3 id="子查询" tabindex="-1">子查询 <a class="header-anchor" href="#子查询" aria-label="Permalink to &quot;子查询&quot;">​</a></h3><p>子查询（Subquery），也被称为嵌套查询（Nested Query），是指在一个查询语句中嵌套使用另一个完整的查询语句。子查询可以被视为一个查询的结果集，它可以作为外层查询的一部分，用于进一步筛选、计算或操作数据。</p><p>子查询通常出现在主查询的 WHERE 子句、FROM 子句、HAVING 子句或 SELECT 子句中，以提供更复杂的查询逻辑。子查询可以根据主查询的结果动态生成结果集，用于过滤和匹配数据，或者作为函数的参数使用。</p><p>子查询可以返回单个值、一列值、一行值或者一个结果集，具体取决于子查询的语法和用法。根据子查询返回的结果类型，可以将其与主查询的其他表达式进行比较、连接或使用作为条件进行过滤。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `school`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `user_id`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `user`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;小明&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>如上语句，查询在 user 表中 name 为小明的 id，再查询 school 表中对应 user_id 的行。</p><p>user_id 可以称为 school 表的外键（FOREIGN KEY），关联了 user 表的主键（PRIMARY KEY）。<br> ==一个表中的 FOREIGN KEY 指向另一个表中的 PRIMARY KEY。==</p><h3 id="连表查询" tabindex="-1">连表查询 <a class="header-anchor" href="#连表查询" aria-label="Permalink to &quot;连表查询&quot;">​</a></h3><p>==Mysql 的连表分为内连接，外连接，交叉连接。==</p><p>==JOIN 用于根据两个或多个表中的列之间的关系，从这些表中查询数据。==</p><p>语法规则 <code>JOIN [连接的表] ON [连接的条件]</code></p><ul><li>内连接<br> 内连接（INNER JOIN）只返回两个表中连接字段相匹配的行。如果两个表中的连接字段没有匹配的行，则这些行不会出现在结果集中。<br> 语法规则 <code>INNER JOIN [连接的表] ON [连接的条件]</code><br> 内连接可以用 WHERE 语句来代替。在 SQL 中，使用 WHERE 子句来过滤结果，以仅包含两个表中匹配的行，这与内连接的效果是相同的。</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `table1`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INNER JOIN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `table2`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `table1`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`id`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `table2`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`user_id`</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 等价</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `table1`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`table2`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `table1`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`id`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `table2`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`user_id`</span></span></code></pre></div><ul><li>外连接 <ul><li>包括左外连接、右外连接和全外连接，它们会返回至少一个表中的所有行，即使另一个表中没有匹配的行。</li><li>==左连接== <code>LEFT JOIN [连接的表] ON [连接的条件]</code><ul><li>返回左表（LEFT JOIN 关键字中指定的表）的所有行，即使右表中没有匹配的行。如果右表中没有匹配的行，则结果集里右表的部分将包含 NULL 值。</li></ul></li><li>==右连接== <code>RIGHT JOIN [连接的表] ON [连接的条件]</code><ul><li>返回右表（RIGHT JOIN 关键字中指定的表）的所有行，即使左表中没有匹配的行。如果左表中没有匹配的行，则结果集里左表的部分将包含 NULL 值。</li></ul></li><li>==全连接== <code>FULL JOIN [连接的表] ON [连接的条件]</code><ul><li>返回两个表中所有行的数据，如果一个表中没有匹配的行，则结果中该表的字段会用 NULL 填充。全连接包括左外连接和右外连接的结果集。</li></ul></li></ul></li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `table1`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> LEFT JOIN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `table2`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `table1`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`id`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `table2`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`user_id`</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `table1`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> RIGHT JOIN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `table2`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `table1`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`id`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `table2`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`user_id`</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `table1`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FULL JOIN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `table2`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `table1`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`id`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `table2`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`user_id`</span></span></code></pre></div><ul><li>交叉连接<br> 交叉连接（Cross Join）也被称为笛卡尔积（Cartesian Product），它是一种特殊的连接操作，用于将两个或多个表中的每一行与另一个表中的每一行组合起来，生成所有可能的行对。<br> 语法规则 <code>CROSS JOIN [连接的表] ON [连接的条件]</code></li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `table1`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> CROSS JOIN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `table2`</span></span></code></pre></div><h2 id="附录-mysql-数据类型" tabindex="-1">附录：mysql 数据类型 <a class="header-anchor" href="#附录-mysql-数据类型" aria-label="Permalink to &quot;附录：mysql 数据类型&quot;">​</a></h2><p>在 MySQL 中，有三种主要的类型：文本、数字和日期/时间类型。</p><p>Text 类型：</p><table tabindex="0"><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>CHAR(<em>size</em>)</td><td>保存固定长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的长度。最多 255 个字符。</td></tr><tr><td>VARCHAR(<em>size</em>)</td><td>保存可变长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的最大长度。最多 255 个字符。<br><br>注释：如果值的长度大于 255，则被转换为 TEXT 类型。</td></tr><tr><td>TINYTEXT</td><td>存放最大长度为 255 个字符的字符串。</td></tr><tr><td>TEXT</td><td>存放最大长度为 65,535 个字符的字符串。</td></tr><tr><td>BLOB</td><td>用于 BLOBs (Binary Large OBjects)。存放最多 65,535 字节的数据。</td></tr><tr><td>MEDIUMTEXT</td><td>存放最大长度为 16,777,215 个字符的字符串。</td></tr><tr><td>MEDIUMBLOB</td><td>用于 BLOBs (Binary Large OBjects)。存放最多 16,777,215 字节的数据。</td></tr><tr><td>LONGTEXT</td><td>存放最大长度为 4,294,967,295 个字符的字符串。</td></tr><tr><td>LONGBLOB</td><td>用于 BLOBs (Binary Large OBjects)。存放最多 4,294,967,295 字节的数据。</td></tr><tr><td>ENUM(<em>x</em>,<em>y</em>,<em>z</em>,etc.)</td><td>允许你输入可能值的列表。可以在 ENUM 列表中列出最大 65535 个值。如果列表中不存在插入的值，则插入空值。<br><br>注释：这些值是按照你输入的顺序存储的。<br><br>可以按照此格式输入可能的值：ENUM(&#39;X&#39;,&#39;Y&#39;,&#39;Z&#39;)</td></tr><tr><td>SET</td><td>与 ENUM 类似，SET 最多只能包含 64 个列表项，不过 SET 可存储一个以上的值。</td></tr></tbody></table><p>Number 类型：</p><table tabindex="0"><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>TINYINT(<em>size</em>)</td><td>-128 到 127 常规。0 到 255 无符号 *。在括号中规定最大位数。</td></tr><tr><td>SMALLINT(<em>size</em>)</td><td>-32768 到 32767 常规。0 到 65535 无符号 *。在括号中规定最大位数。</td></tr><tr><td>MEDIUMINT(<em>size</em>)</td><td>-8388608 到 8388607 普通。0 to 16777215 无符号 *。在括号中规定最大位数。</td></tr><tr><td>INT(<em>size</em>)</td><td>-2147483648 到 2147483647 常规。0 到 4294967295 无符号 *。在括号中规定最大位数。</td></tr><tr><td>BIGINT(<em>size</em>)</td><td>-9223372036854775808 到 9223372036854775807 常规。0 到 18446744073709551615 无符号 *。在括号中规定最大位数。</td></tr><tr><td>FLOAT(<em>size</em>,<em>d</em>)</td><td>带有浮动小数点的小数字。在括号中规定最大位数。在 d 参数中规定小数点右侧的最大位数。</td></tr><tr><td>DOUBLE(<em>size</em>,<em>d</em>)</td><td>带有浮动小数点的大数字。在括号中规定最大位数。在 d 参数中规定小数点右侧的最大位数。</td></tr><tr><td>DECIMAL(<em>size</em>,<em>d</em>)</td><td>作为字符串存储的 DOUBLE 类型，允许固定的小数点。</td></tr></tbody></table><ul><li>这些整数类型拥有额外的选项 UNSIGNED。通常，整数可以是负数或正数。如果添加 UNSIGNED 属性，那么范围将从 0 开始，而不是某个负数。</li></ul><p>Date 类型：</p><table tabindex="0"><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>DATE()</td><td>日期。格式：YYYY-MM-DD<br><br>注释：支持的范围是从 &#39;1000-01-01&#39; 到 &#39;9999-12-31&#39;</td></tr><tr><td>DATETIME()</td><td>* 日期和时间的组合。格式：YYYY-MM-DD HH:MM:SS<br><br>注释：支持的范围是从 &#39;1000-01-01 00:00:00&#39; 到 &#39;9999-12-31 23:59:59&#39;</td></tr><tr><td>TIMESTAMP()</td><td>* 时间戳。TIMESTAMP 值使用 Unix 纪元 (&#39;1970-01-01 00:00:00&#39; UTC) 至今的描述来存储。格式：YYYY-MM-DD HH:MM:SS<br><br>注释：支持的范围是从 &#39;1970-01-01 00:00:01&#39; UTC 到 &#39;2038-01-09 03:14:07&#39; UTC</td></tr><tr><td>TIME()</td><td>时间。格式：HH:MM:SS<br><br>注释：支持的范围是从 &#39;-838:59:59&#39; 到 &#39;838:59:59&#39;</td></tr><tr><td>YEAR()</td><td>2 位或 4 位格式的年。<br><br>注释：4 位格式所允许的值：1901 到 2155。2 位格式所允许的值：70 到 69，表示从 1970 到 2069。</td></tr></tbody></table><ul><li>即便 DATETIME 和 TIMESTAMP 返回相同的格式，它们的工作方式很不同。在 INSERT 或 UPDATE 查询中，TIMESTAMP 自动把自身设置为当前的日期和时间。TIMESTAMP 也接受不同的格式，比如 YYYYMMDDHHMMSS、YYMMDDHHMMSS、YYYYMMDD 或 YYMMDD。</li></ul>',100)]))}const o=i(h,[["render",e]]);export{g as __pageData,o as default};
