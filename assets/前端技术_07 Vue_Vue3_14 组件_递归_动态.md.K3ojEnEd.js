import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.-ewJmwvT.js";const c=JSON.parse('{"title":"组件&递归&动态","description":"","frontmatter":{},"headers":[],"relativePath":"前端技术/07 Vue/Vue3/14 组件&递归&动态.md","filePath":"前端技术/07 Vue/Vue3/14 组件&递归&动态.md"}'),e={name:"前端技术/07 Vue/Vue3/14 组件&递归&动态.md"};function p(l,s,h,k,r,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="组件-递归-动态" tabindex="-1">组件&amp;递归&amp;动态 <a class="header-anchor" href="#组件-递归-动态" aria-label="Permalink to &quot;组件&amp;递归&amp;动态&quot;">​</a></h1><h2 id="一、组件" tabindex="-1">一、组件 <a class="header-anchor" href="#一、组件" aria-label="Permalink to &quot;一、组件&quot;">​</a></h2><ul><li>一个 Vue 组件在使用前需要先被“注册”，这样 Vue 才能在渲染模板时找到其对应的实现。组件注册有两种方式：全局注册和局部注册。</li><li>组件注册 <ul><li><p>全局注册<br><code>app.component(&#39;name&#39;, 组件实例)</code><br> 全局注册的组件可以在此应用的任意组件的模板中使用</p></li><li><p>局部注册<br> 在使用 <code>&lt;script setup&gt;</code> 的单文件组件中，导入的组件可以直接在模板中使用，无需注册。<br> 如果没有使用 <code>&lt;script setup&gt;</code>，则需要使用 <code>components</code> 选项来显式注册。</p></li></ul></li></ul><h2 id="二、递归组件" tabindex="-1">二、递归组件 <a class="header-anchor" href="#二、递归组件" aria-label="Permalink to &quot;二、递归组件&quot;">​</a></h2><p>子组件中使用自身组件，可以直接使用文件名或者 defineOptions重新定义组件的name</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xxx&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="三、动态组件" tabindex="-1">三、动态组件 <a class="header-anchor" href="#三、动态组件" aria-label="Permalink to &quot;三、动态组件&quot;">​</a></h2><ul><li><p><code>&lt;component&gt;</code>一个用于渲染动态组件或元素的“元组件”。要渲染的实际组件由 <code>is</code> prop 决定。</p><ul><li>当 <code>is</code> 是字符串，它既可以是 HTML 标签名也可以是组件的注册名。</li><li>或者，<code>is</code> 也可以直接绑定到组件的定义。</li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">script setup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./Foo.vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Bar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./Bar.vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :is</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Math.random() &gt; 0.5 ? Foo : Bar&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div></li><li><p>另一种方式：注册子组件名，可以直接使用组件名的字符串进行绑定。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  components: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Transition,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    TransitionGroup</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul>`,8)]))}const E=i(e,[["render",p]]);export{c as __pageData,E as default};
