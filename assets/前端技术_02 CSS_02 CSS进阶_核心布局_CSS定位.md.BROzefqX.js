import{_ as s,c as a,o as t,ag as n}from"./chunks/framework.-ewJmwvT.js";const c=JSON.parse('{"title":"CSS定位","description":"","frontmatter":{},"headers":[],"relativePath":"前端技术/02 CSS/02 CSS进阶/核心布局/CSS定位.md","filePath":"前端技术/02 CSS/02 CSS进阶/核心布局/CSS定位.md"}'),e={name:"前端技术/02 CSS/02 CSS进阶/核心布局/CSS定位.md"};function l(p,i,h,o,k,r){return t(),a("div",null,i[0]||(i[0]=[n(`<h1 id="css定位" tabindex="-1">CSS定位 <a class="header-anchor" href="#css定位" aria-label="Permalink to &quot;CSS定位&quot;">​</a></h1><p><code>position</code> 属性规定应用于元素的定位方法的类型。<br> 有五个不同的位置值：</p><ul><li>static</li><li>relative</li><li>fixed</li><li>absolute</li><li>Sticky<br> 规定 position 属性后，元素可以使用 top、bottom、left 和 right 属性进行位置定位。</li></ul><h2 id="position-static" tabindex="-1">position: static <a class="header-anchor" href="#position-static" aria-label="Permalink to &quot;position: static&quot;">​</a></h2><p>HTML 元素默认情况下的定位方式为 static（静态）。<br> 静态定位的元素不受 top、bottom、left 和 right 属性的影响。<br> position: static; 的元素不会以任何特殊方式定位；它始终根据页面的正常流进行定位：</p><h2 id="position-relative" tabindex="-1">position: relative <a class="header-anchor" href="#position-relative" aria-label="Permalink to &quot;position: relative&quot;">​</a></h2><p>元素相对于其正常位置进行定位。<br> 设置相对定位的元素的 top、right、bottom 和 left 属性将导致其偏离其正常位置进行调整。不会对其余内容进行调整来适应元素留下的任何空间。</p><h2 id="position-absolute" tabindex="-1">position: absolute <a class="header-anchor" href="#position-absolute" aria-label="Permalink to &quot;position: absolute&quot;">​</a></h2><p>元素相对于最近的定位祖先元素进行定位（而不是相对于视口定位，如 fixed）。<br> 然而，如果绝对定位的元素没有祖先，它将使用文档主体（body），并随页面滚动一起移动。</p><p>相对定位与绝对定位实现水平垂直居中的结构：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">relative</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">absolute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">translate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="position-fixed" tabindex="-1">position: fixed <a class="header-anchor" href="#position-fixed" aria-label="Permalink to &quot;position: fixed&quot;">​</a></h2><p>元素相对于视口定位的，这意味着即使滚动页面，它也始终位于同一位置。 top、right、bottom 和 left 属性用于定位此元素。<br> 固定定位的元素不会在页面中通常应放置的位置上留出空隙。</p><h2 id="position-sticky" tabindex="-1">position: sticky <a class="header-anchor" href="#position-sticky" aria-label="Permalink to &quot;position: sticky&quot;">​</a></h2><p>元素根据用户的滚动位置进行定位。<br> 粘性元素根据滚动位置在相对（<code>relative</code>）和固定（<code>fixed</code>）之间切换。起先它会被相对定位，直到在视口中遇到给定的偏移位置为止 - 然后将其“粘贴”在适当的位置（比如 position:fixed）。</p><h2 id="重叠元素" tabindex="-1">重叠元素 <a class="header-anchor" href="#重叠元素" aria-label="Permalink to &quot;重叠元素&quot;">​</a></h2><p>在对元素进行定位时，它们可以与其他元素重叠。<br><code>z-index</code> 属性指定元素的堆栈顺序（哪个元素应放置在其他元素的前面或后面）。<br> 元素可以设置正或负的堆叠顺序：</p>`,17)]))}const E=s(e,[["render",l]]);export{c as __pageData,E as default};
