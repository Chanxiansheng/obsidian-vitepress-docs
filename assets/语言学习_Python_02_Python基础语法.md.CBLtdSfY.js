import{_ as a,c as i,o as s,ae as e}from"./chunks/framework.CIivgcbp.js";const c=JSON.parse('{"title":"Python 基础语法","description":"","frontmatter":{},"headers":[],"relativePath":"语言学习/Python/02_Python基础语法.md","filePath":"语言学习/Python/02_Python基础语法.md"}'),n={name:"语言学习/Python/02_Python基础语法.md"};function l(h,t,r,d,p,o){return s(),i("div",null,t[0]||(t[0]=[e(`<h1 id="python-基础语法" tabindex="-1">Python 基础语法 <a class="header-anchor" href="#python-基础语法" aria-label="Permalink to &quot;Python 基础语法&quot;">​</a></h1><p>#待补（程度：低）</p><blockquote><p>官方文档：<a href="https://docs.python.org/zh-cn/3.13/tutorial/index.html" target="_blank" rel="noreferrer">Python 教程 — Python 3.13.0 文档</a><br> 教程：<a href="https://liaoxuefeng.com/books/python/introduction/index.html" target="_blank" rel="noreferrer">简介 - Python教程 - 廖雪峰的官方网站</a></p></blockquote><h2 id="基础特性" tabindex="-1">基础特性 <a class="header-anchor" href="#基础特性" aria-label="Permalink to &quot;基础特性&quot;">​</a></h2><h3 id="保留字" tabindex="-1">保留字 <a class="header-anchor" href="#保留字" aria-label="Permalink to &quot;保留字&quot;">​</a></h3><p>下面的列表显示了在 Python 中的保留字。这些保留字不能用作常数或变数，或任何其他标识符名称。所有 Python 的关键字只包含小写字母。</p><table tabindex="0"><thead><tr><th style="text-align:center;"></th><th style="text-align:center;"></th><th style="text-align:center;"></th></tr></thead><tbody><tr><td style="text-align:center;">and</td><td style="text-align:center;">exec</td><td style="text-align:center;">not</td></tr><tr><td style="text-align:center;">assert</td><td style="text-align:center;">finally</td><td style="text-align:center;">or</td></tr><tr><td style="text-align:center;">break</td><td style="text-align:center;">for</td><td style="text-align:center;">pass</td></tr><tr><td style="text-align:center;">class</td><td style="text-align:center;">from</td><td style="text-align:center;">print</td></tr><tr><td style="text-align:center;">continue</td><td style="text-align:center;">global</td><td style="text-align:center;">raise</td></tr><tr><td style="text-align:center;">def</td><td style="text-align:center;">if</td><td style="text-align:center;">return</td></tr><tr><td style="text-align:center;">del</td><td style="text-align:center;">import</td><td style="text-align:center;">try</td></tr><tr><td style="text-align:center;">elif</td><td style="text-align:center;">in</td><td style="text-align:center;">while</td></tr><tr><td style="text-align:center;">else</td><td style="text-align:center;">is</td><td style="text-align:center;">with</td></tr><tr><td style="text-align:center;">except</td><td style="text-align:center;">lambda</td><td style="text-align:center;">yield</td></tr></tbody></table><h3 id="行与缩进" tabindex="-1">行与缩进 <a class="header-anchor" href="#行与缩进" aria-label="Permalink to &quot;行与缩进&quot;">​</a></h3><p>Python 与其他语言最大的区别就是，Python 的代码块不使用大括号 {} 来控制类，函数以及其他逻辑判断。<strong>python 最具特色的就是用缩进来写模块。</strong></p><p>缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行。</p><h3 id="引号" tabindex="-1">引号 <a class="header-anchor" href="#引号" aria-label="Permalink to &quot;引号&quot;">​</a></h3><p>Python 可以使用引号 ( <strong>&#39;</strong> )、双引号 ( <strong>&quot;</strong> )、三引号 ( <strong>&#39;&#39;&#39;</strong> 或 <strong>&quot;&quot;&quot;</strong> ) 来表示字符串，引号的开始与结束必须是相同类型的。</p><p>其中三引号可以由多行组成，编写多行文本的快捷语法，常用于文档字符串，在文件的特定地点，被当做注释。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">word </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;word&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sentence </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;这是一个句子。&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">paragraph </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;&quot;这是一个段落。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">包含了多个语句&quot;&quot;&quot;</span></span></code></pre></div><h3 id="注释" tabindex="-1">注释 <a class="header-anchor" href="#注释" aria-label="Permalink to &quot;注释&quot;">​</a></h3><p>python 中单行注释采用 # 开头。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 第一个注释  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Python!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 第二个注释</span></span></code></pre></div><h3 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h3><p>Python 语言支持以下类型的运算符:</p><ul><li>算术运算符</li><li>比较（关系）运算符</li><li>赋值运算符</li><li>逻辑运算符</li><li>位运算符</li><li>成员运算符</li><li>身份运算符</li></ul><p>以下表格列出了从最高到最低优先级的所有运算符：</p><table tabindex="0"><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>**</td><td>指数 (最高优先级)</td></tr><tr><td>~ + -</td><td>按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td></tr><tr><td>* / % //</td><td>乘，除，取模和取整除</td></tr><tr><td>+ -</td><td>加法减法</td></tr><tr><td>&gt;&gt; &lt;&lt;</td><td>右移，左移运算符</td></tr><tr><td>&amp;</td><td>位 &#39;AND&#39;</td></tr><tr><td>^ |</td><td>位运算符</td></tr><tr><td>&lt;= &lt; &gt; &gt;=</td><td>比较运算符</td></tr><tr><td>&lt;&gt; == !=</td><td>等于运算符</td></tr><tr><td>= %= /= //= -= += *= **=</td><td>赋值运算符</td></tr><tr><td>is is not</td><td>身份运算符</td></tr><tr><td>in not in</td><td>成员运算符</td></tr><tr><td>not and or</td><td>逻辑运算符</td></tr></tbody></table><h2 id="变量与数据类型" tabindex="-1">变量与数据类型 <a class="header-anchor" href="#变量与数据类型" aria-label="Permalink to &quot;变量与数据类型&quot;">​</a></h2><h3 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h3><ul><li>指向对象的值的名称就是变量，也就是一种标识符，是对内存中的存储位置的命名。</li><li>对于不同的对象，有不同的类型，得到的内存地址也不一样，通过对得到的地址进行命名得到变量名称，我们将数据存入变量，为存储的数据设置不同的数据结构。</li><li>变量的值是在不断的动态变化的，Python 的变量可以不声明直接赋值使用。由于 Python 采用动态类型 (Dynamic Type)，变量可以根据赋值类型决定变量的数据类型。</li><li>在 Python 中，变量使用等号赋值以后会被创建，定义完成后可以直接使用。</li><li>变量命名规则： <ol><li>名称第一字符为英文字母或者下划线</li><li>名称第一字符后可以使用英文字母、下划线和数字</li><li>名称不能使用 python 的关键字或保留字符</li><li>名称区分大小写，单词与单词之间使用下划线连接</li></ol></li></ul><h3 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h3><ul><li><p>Python 有可以自由的改变变量的数据类型的动态类型和变量事先说明的静态类型，特定类型是数值数据存入相应的数据类型的变量中，相比下，动态数据类型更加灵活。</p></li><li><p>变量的数据类型有多种类型，Python3 中有六个标准的数据类型：</p><ol><li>Numbers(数字类型)</li><li>Strings(字符串类型)</li><li>Lists(列表类型)</li><li>Tuples(元组类型)</li><li>Dictionaries(字典类型)</li><li>Sets（集合类型)</li></ol></li><li><p>Python 内置的数字类型有整型 (Integers)、浮点型 (Floating point numbers) 和复数 (Complex numbers) 三种，作为可以进行算术运算等的数据类型。</p></li><li><p>type() 函数是内建的用来查看变量类型的函数，调用它可以简单的查看数据类型，基本用法：<code>type(对象)</code></p></li><li><p>整数<br> Python 可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样，例如：1，100，-8080，0，等等。</p><p>计算机由于使用二进制，所以，有时候用十六进制表示整数比较方便，十六进制用 <code>0x</code> 前缀和 0-9，a-f 表示，例如：0xff00，0xa5b4c3d2，等等。</p><p>对于很大的数，例如 10000000000，很难数清楚 0 的个数。Python 允许在数字中间以 <code>_</code> 分隔，因此，写成 10_000_000_000 和 10000000000 是完全一样的。十六进制数也可以写成 0xa1b2_c3d4。</p></li><li><p>浮点数<br> 浮点数 (Float) 也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，1.23x109 和 12.3x108 是完全相等的。浮点数可以用数学写法，如 1.23，3.14，-9.01，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，把 10 用 e 替代，1.23x109 就是 1.23e9，或者 12.3e8，0.000012 可以写成 1.2e-5，等等。</p></li><li><p>复数<br> 复数 (Complex) 由实数和虚数组成，用于复数的表示，虚数部分需加上 j 或 J,如：-1j、0j、1.0j。Python 的复数类型是其他语言一般没有的。</p></li><li><p>字符串<br> 字符串 (String)，在 Python 中的字符串是一种对象类型，使用 str 表示，通常单<br> 引号 &#39;&#39; 或者双引号 &quot; 包裹起来。<br> 义字符 <code>\\</code> 可以转义很多字符，比如 <code>\\n</code> 表示换行，<code>\\t</code> 表示制表符，字符 <code>\\</code> 本身也要转义，所以 <code>\\\\</code> 表示的字符就是 <code>\\</code><br> 如果不想让反斜杠发生转义，可以在字符串前加个 r 表示原始字符串。<br> 如果字符串内部有很多换行，用 <code>\\n</code> 写在一行里不好阅读，为了简化，Python 允许用 <code>&#39;&#39;&#39;...&#39;&#39;&#39;</code> 的格式表示多行内容</p></li><li><p>布尔型 (Boolean)<br> 布尔值用于逻辑判断真 (True) 或假 (False), 用数值 1 和 0 分别代表常量 True 和 Fa|se。<br> 在 Python 语言中，False 可以是数值为 0、对象为 None 或者是序列中的空字符串、空列表、空元组。</p></li><li><p>空值<br> 空值是 Python 里一个特殊的值，用 <code>None</code> 表示。<code>None</code> 不能理解为 0，因为 0 是有意义的，而 <code>None</code> 是一个特殊的空值。</p></li></ul><h2 id="控制流语法" tabindex="-1">控制流语法 <a class="header-anchor" href="#控制流语法" aria-label="Permalink to &quot;控制流语法&quot;">​</a></h2><h3 id="条件语句" tabindex="-1">条件语句 <a class="header-anchor" href="#条件语句" aria-label="Permalink to &quot;条件语句&quot;">​</a></h3><h4 id="if-else" tabindex="-1">if-else <a class="header-anchor" href="#if-else" aria-label="Permalink to &quot;if-else&quot;">​</a></h4><p>Python 条件语句是通过一条或多条语句的执行结果（True 或者 False）来决定执行的代码块。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 判断条件1:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    执行语句1……</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">elif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 判断条件2:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    执行语句2……</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">elif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 判断条件3:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    执行语句3……</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    执行语句4……</span></span></code></pre></div><h4 id="match" tabindex="-1">match <a class="header-anchor" href="#match" aria-label="Permalink to &quot;match&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">score </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;B&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> score:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;score is A.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;B&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;score is B.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;C&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;score is C.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># _表示匹配到其他任何情况</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;score is ???.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><code>match</code> 语句除了可以匹配简单的单个值外，还可以匹配多个值、匹配一定范围，并且把匹配后的值绑定到变量。<br><code>match</code> 语句还可以匹配列表，功能非常强大。</p><h3 id="循环语句" tabindex="-1">循环语句 <a class="header-anchor" href="#循环语句" aria-label="Permalink to &quot;循环语句&quot;">​</a></h3><h4 id="for" tabindex="-1">for <a class="header-anchor" href="#for" aria-label="Permalink to &quot;for&quot;">​</a></h4><p>Python for 循环可以遍历任何序列的项目，如一个列表或者一个字符串。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iterating_var </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sequence:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   statements(s)</span></span></code></pre></div><h4 id="while" tabindex="-1">while <a class="header-anchor" href="#while" aria-label="Permalink to &quot;while&quot;">​</a></h4><p>Python 编程中 while 语句用于循环执行程序，即在某条件下，循环执行某段程序，以处理需要重复处理的相同任务。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 判断条件(condition)：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    执行语句(statements)……</span></span></code></pre></div><h4 id="break、continue、pass" tabindex="-1">break、continue、pass <a class="header-anchor" href="#break、continue、pass" aria-label="Permalink to &quot;break、continue、pass&quot;">​</a></h4><p><code>break</code> 语句可以提前退出循环。<br><code>continue</code> 语句，跳过当前的这次循环，直接开始下一次循环。<br><code>pass</code> 是空语句，是为了保持程序结构的完整性，表示不执行任何动作。</p><h2 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h2><p>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。</p><h3 id="定义与调用" tabindex="-1">定义与调用 <a class="header-anchor" href="#定义与调用" aria-label="Permalink to &quot;定义与调用&quot;">​</a></h3><ul><li>定义 <ol><li>函数代码块以 <strong>def</strong> 关键词开头，后接函数标识符名称和圆括号 <strong>()</strong> 。</li><li>任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数。</li><li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li><li>函数内容以冒号起始，并且缩进。</li><li><strong>return [表达式]</strong> 结束函数，选择性地返回一个值给调用方。不带表达式的 return 相当于返回 None。</li></ol></li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> functionname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( parameters ):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   &quot;函数_文档字符串&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   function_suite</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [expression]</span></span></code></pre></div><ul><li>调用<br> 要调用一个函数，需要知道函数的名称和参数<br><code>函数名(parameters)</code></li></ul><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h3><p>位置参数<br> 默认值参数<br> 关键字参数</p><h3 id="递归" tabindex="-1">递归 <a class="header-anchor" href="#递归" aria-label="Permalink to &quot;递归&quot;">​</a></h3><h3 id="lambda-表达式" tabindex="-1">Lambda 表达式 <a class="header-anchor" href="#lambda-表达式" aria-label="Permalink to &quot;Lambda 表达式&quot;">​</a></h3><h2 id="高级类型" tabindex="-1">高级类型 <a class="header-anchor" href="#高级类型" aria-label="Permalink to &quot;高级类型&quot;">​</a></h2><h3 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h3><h3 id="列表" tabindex="-1">列表 <a class="header-anchor" href="#列表" aria-label="Permalink to &quot;列表&quot;">​</a></h3><h3 id="元组" tabindex="-1">元组 <a class="header-anchor" href="#元组" aria-label="Permalink to &quot;元组&quot;">​</a></h3><h3 id="集合" tabindex="-1">集合 <a class="header-anchor" href="#集合" aria-label="Permalink to &quot;集合&quot;">​</a></h3><h3 id="字典" tabindex="-1">字典 <a class="header-anchor" href="#字典" aria-label="Permalink to &quot;字典&quot;">​</a></h3>`,60)]))}const y=a(n,[["render",l]]);export{c as __pageData,y as default};
