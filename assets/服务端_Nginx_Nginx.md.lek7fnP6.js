import{_ as s,c as a,o as n,ag as l}from"./chunks/framework.-ewJmwvT.js";const e="/obsidian-vitepress-docs/assets/8e1243ea610f4b3e8992292073d19954~tplv-k3u1fbpfcp-j.1269xW74.webp",t="/obsidian-vitepress-docs/assets/image_uxuoAX9sVr.DsS8KvSa.png",p="/obsidian-vitepress-docs/assets/image_xJhMiHWk7w.DW714Tzo.png",h="/obsidian-vitepress-docs/assets/image_vTTNsWy3dD.DwUMueEn.png",u=JSON.parse('{"title":"Nginx","description":"","frontmatter":{},"headers":[],"relativePath":"服务端/Nginx/Nginx.md","filePath":"服务端/Nginx/Nginx.md"}'),k={name:"服务端/Nginx/Nginx.md"};function r(d,i,o,E,c,g){return n(),a("div",null,i[0]||(i[0]=[l('<h1 id="nginx" tabindex="-1">Nginx <a class="header-anchor" href="#nginx" aria-label="Permalink to &quot;Nginx&quot;">​</a></h1><h2 id="一、简介" tabindex="-1">一、简介 <a class="header-anchor" href="#一、简介" aria-label="Permalink to &quot;一、简介&quot;">​</a></h2><p>Nginx (engine x) 是一个高性能的 HTTP 和反向代理 web 服务器，同时也提供了 IMAP、POP3、SMTP 服务。Nginx 是由伊戈尔·赛索耶夫为俄罗斯访问量第二的 Rambler.ru 站点（俄文：Рамблер）开发的，第一个公开版本 0.1.0 发布于 2004 年 10 月 4 日。2011 年 6 月 1 日，nginx 1.0.4 发布。</p><p>Nginx 功能丰富，可作为 HTTP 服务器，也可作为反向代理服务器，邮件服务器。支持 FastCGI、SSL、Virtual Host、URL Rewrite、Gzip 等功能。并且支持很多第三方的模块扩展。</p><p>Nginx 的稳定性、功能集、示例配置文件和低系统资源的消耗让他后来居上，在全球活跃的网站中有 12.18% 的使用比率，大约为 2220 万个网站。</p><h2 id="二、特性" tabindex="-1">二、特性 <a class="header-anchor" href="#二、特性" aria-label="Permalink to &quot;二、特性&quot;">​</a></h2><h3 id="正向代理-反向代理" tabindex="-1">正向代理/反向代理 <a class="header-anchor" href="#正向代理-反向代理" aria-label="Permalink to &quot;正向代理/反向代理&quot;">​</a></h3><ul><li><p>正向代理：在客户端配置代理服务器，<strong>VPN 就是典型的正向代理</strong>。</p></li><li><p>反向代理：在服务端配置代理服务器 (暴露的是代理服务器的地址，隐藏了真实服务器的地址，反向代理的典型用途是将防火墙后面的服务器提供给 Internet 用户访问)</p><p><img src="'+e+'" alt=""></p></li><li><p>共同点：</p><ol><li>都是做为服务器和客户端的中间层</li><li>都可以加强内网的安全性，阻止 web 攻击</li><li>都可以做缓存机制，提高访问速度</li></ol></li><li><p>区别：</p><ol><li>正向代理其实是客户端的代理,反向代理则是服务器的代理。</li><li>正向代理中，服务器并不知道真正的客户端到底是谁；而在反向代理中，客户端也不知道真正的服务器是谁。</li><li>作用不同。正向代理主要是用来解决访问限制问题；而反向代理则是提供负载均衡、安全防护等作用</li></ol></li></ul><h3 id="负载均衡-upstream" tabindex="-1">负载均衡（upstream） <a class="header-anchor" href="#负载均衡-upstream" aria-label="Permalink to &quot;负载均衡（upstream）&quot;">​</a></h3><ul><li>轮询<br> 轮询方式是 Nginx 负载默认的方式，顾名思义，所有请求都按照时间顺序分配到不同的服务上，如果服务 Down 掉，可以自动剔除</li><li>权重<br> 指定每个服务的权重比例，weight 和访问比率成正比，通常用于后端服务机器性能不统一，将性能好的分配权重高来发挥服务器最大性能</li></ul><h3 id="动静分离" tabindex="-1">动静分离 <a class="header-anchor" href="#动静分离" aria-label="Permalink to &quot;动静分离&quot;">​</a></h3><p>在 Web 开发中，通常来说，动态资源其实就是指那些后台资源，而静态资源就是指 HTML，JavaScript，CSS，img 等文件。</p><p>一般来说，都需要将动态资源和静态资源分开，将静态资源部署在 Nginx 上，当一个请求来的时候，如果是静态资源的请求，就直接到 nginx 配置的静态资源目录下面获取资源，如果是动态资源的请求，nginx 利用反向代理的原理，把请求转发给后台应用去处理，从而实现动静分离。</p><p>在使用前后端分离之后，可以很大程度的提升静态资源的访问速度，同时在开过程中也可以让前后端开发并行可以有效的提高开发时间，也可以有些的减少联调时间 。</p><h2 id="三、安装" tabindex="-1">三、安装 <a class="header-anchor" href="#三、安装" aria-label="Permalink to &quot;三、安装&quot;">​</a></h2><ol><li><p>安装 gcc<br> 安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装：<br><code>yum install gcc-c++</code></p></li><li><p>PCRE pcre-devel 安装<br> PCRE(Perl Compatible Regular Expressions) 是一个 Perl 库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。nginx 也需要此库。命令：<br><code>yum install -y pcre pcre-devel</code></p></li><li><p>zlib 安装<br> zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。<br><code>yum install -y zlib zlib-devel</code></p></li><li><p>OpenSSL 安装<br> OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。<br> nginx 不仅支持 http 协议，还支持 https（即在 ssl 协议上传输 http），所以需要在 Centos 安装 OpenSSL 库。<br><code>yum install -y openssl openssl-devel</code></p></li><li><p>下载 Nginx（选择合适版本）<br><code>wget https://nginx.org/download/nginx-1.19.9.tar.gz </code></p></li><li><p>解压 nginx<br><code>tar -zxvf nginx-1.19.9.tar.gzcd nginx-1.19.9</code></p></li><li><p>执行 nginx-configure 文件<br><code>./configure</code></p></li><li><p>make 命令编译<br> 执行完后会有一个 MakeFile 文件夹。<br> make 是一个命令工具，它解释 Makefile 中的指令（应该说是规则）。在 Makefile 文件中描述了整个工程所有文件的编译顺序、编译规则。<br><code>make</code><br><code>make install</code></p></li><li><p>查询 nginx 安装目录<br><code>whereis nginx</code></p></li><li><p>进入安装目录执行 nginx<br> 前往安装目录找到 sbin 执行 nginx<br><code>./nginx</code></p></li><li><p>测试<br> 访问服务器 ip，请确保 linux 防火墙和服务器规则允许访问 80 端口<br><img src="'+t+'" alt=""></p><p>查看所有打开的端口（仅适用 centos⇒firewalld)：<br><code>firewall-cmd --zone=public --list-ports</code></p><p>开启端口：<br><code>firewall-cmd --zone=public --add-port=80/tcp --permanent</code>    （--permanent 永久生效，没有此参数重启后失效）</p></li></ol><h2 id="四、常用命令" tabindex="-1">四、常用命令 <a class="header-anchor" href="#四、常用命令" aria-label="Permalink to &quot;四、常用命令&quot;">​</a></h2><ul><li><p>配置 nginx 环境变量<br><code>whereis nginx</code> 找到 nginx 安装目录 <code>/usr/local/nginx/sbin</code><br><code>vim profile</code> 打开配置文件<br> 添加环境变量<br><code>export PATH=$PATH:/usr/local/nginx/sbin</code></p></li><li><p>查看 nginx 版本号<br><code>nginx -v</code></p></li><li><p>启动 nginx<br> 直接执行 <code>nginx</code> 即可</p></li><li><p>停止 nginx<br><code>nginx -s stop</code><br> Stop 是立即停止<br><code>nginx -s quit</code><br> Quit 是一个优雅的关闭方式，Nginx 在退出前完成已经接受的请求处理</p></li><li><p>重载 nginx 配置文件<br><code>nginx -s reload</code></p></li><li><p>查看进程<br><code>ps -ef | grep nginx</code><br><img src="'+p+'" alt=""></p><p><code>ps -ef</code> 输出标准格式的 linux 进程命令<br><code>grep</code> 是查找命令， 是一种强大的文本搜索工具</p></li></ul><h2 id="五、配置文件" tabindex="-1">五、配置文件 <a class="header-anchor" href="#五、配置文件" aria-label="Permalink to &quot;五、配置文件&quot;">​</a></h2><p><a href="./nginx.conf默认配置.html">nginx.conf默认配置</a></p><ul><li><p>如何查找 nginx 配置文件<br><code>nginx -t</code> 检查配置文件是否有语法错误，同时会打印配置文件路径</p></li><li><p>打开配置文件<br><code>vim nginx.conf</code></p><p><img src="'+h+`" alt=""></p></li></ul><p>Nginx 的主配置文件是 nginx.conf，这个配置文件一共由三部分组成，分别为全局块、events 块和 http 块。</p><p>在 http 块中，又包含 http 全局块、多个 server 块。</p><p>每个 server 块中，可以包含 server 全局块和多个 location 块。在同一配置块中嵌套的配置块，各个之间不存在次序关系</p><ol><li><p>全局块<br> 全局块是默认配置文件从开始到 events 块之间的一部分内容，主要设置一些影响 Nginx 服务器整体运行的配置指令，因此，这些指令的作用域是 Nginx 服务器全局。</p><ul><li><p><code>user [user] [group]</code> 指定可以运行 nginx 服务的用户和用户组，只能在全局块配置 user 指令在 Windows 上不生效，如果你制定具体用户和用户组会报警告</p></li><li><p><code>worker_processes nginx</code> 进程数量 worker_processes 比如设置为 2 nginx 将会开启一个 master 进程和 2 两个 worker 进程</p></li><li><p><code>pid logs/nginx.pid</code> 存放 pid 文件</p></li><li><p><code>error_log logs/error.log</code> 全局错误日志类型 debug info warn error 存放地址</p></li></ul></li><li><p>events 块<br> events 块涉及的指令主要影响 Nginx 服务器与用户的网络连接。常用到的设置包括是否开启对多 worker process 下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型处理连接请求，每个 worker process 可以同时支持的最大连接数等</p><ul><li><p><code>accept_mutex</code> 默认开启 - 开启之后 nginx 的多个 worker 将会以串行的方式来处理，只会有一个 worker 将会被唤起，其他的 worker 继续睡眠，如果不开启将会造成惊群效应多个 worker 全部唤起不过只有一个 Worker 能获取新连接，其它的 Worker 会重新进入休眠状态</p></li><li><p><code>worker_connections</code> 单个进程最大连接数（最大连接数=连接数 + 进程数）</p></li></ul></li><li><p>http 块<br> http 块是 Nginx 服务器配置中的重要部分，代理、缓存和日志定义等绝大多数的功能和第三方模块的配置都可以放在这个模块中。</p><ul><li><p><code>include</code> 用于引入其他的配置文件</p></li><li><p><code>default_type</code> 如果 Web 程序没设置，Nginx 也没对应文件的扩展名，就用 Nginx 里默认的 default_type 定义的处理方式。default_type application/octet-stream; nginx 默认文件类型</p></li><li><p><code>log_format</code> 用于定义日志格式，此指令只能在 http 块中进行配置</p></li><li><p><code>sendfile</code> 简单来说就是启用 sendfile() 系统调用来替换 read() 和 write() 调用，减少系统上下文切换从而提高性能，当 nginx 是静态文件服务器时，能极大提高 nginx 的性能表现</p></li><li><p><code>keepalive_timeout</code> HTTP 有一个 KeepAlive 模式，它告诉 webserver 在处理完一个请求后保持这个 TCP 连接的打开状态。若接收到来自客户端的其它请求，服务端会利用这个未被关闭的连接，而不需要再建立一个连接。</p></li><li><p><code>gzip</code> 开启 Gzip 压缩功能， 可以使网站的 css、js 、xml、html 文件在传输时进行压缩，提高访问速度, 进而优化 Nginx 性能</p></li></ul></li><li><p>server 块<br> 每一个 http 块都可以包含多个 server 块，而每个 server 块就相当于一台虚拟主机，它内部可有多台主机联合提供服务，一起对外提供在逻辑上关系密切的一组服务</p><ul><li><p><code>listen</code> 指令的配置非常灵活，可以单独制定 ip，单独指定端口或者同时指定 ip 和端口</p></li><li><p><code>server_name nginx</code> 允许一个虚拟主机有一个或多个名字，也可以使用通配符 &quot;*&quot; 来设置虚拟主机的名字  支持 ip 域名 通配符 正则等</p></li></ul></li><li><p>location 块<br> 每个 server 块中可以包含多个 location 块。在整个 Nginx 配置文档中起着重要的作用，而且 Nginx 服务器在许多功能上的灵活性往往在 location 指令的配置中体现出来</p><ul><li><p><code>location</code> 指令可以分为以下 3 类：<br> 前缀字符串匹配<br> 正则表达式匹配<br> 用于内部跳转的命名 location</p></li><li><p>前缀字符串匹配<br> 精确匹配 =<br> 前缀匹配 ^~（立刻停止后续的正则搜索）<br> 按文件中顺序的正则匹配 ~或~*<br> 匹配不带任何修饰的前缀匹配。</p></li><li><p><code>location root</code><br> root 指定目录的上级目录，并且该上级目录要含有 locatoin 指定名称的同名目录。</p><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>location /img/ {</span></span>
<span class="line"><span>	root /var/www/image;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>若按照这种配置的话，则访问/img/目录下的文件时，nginx 会去 <code>/var/www/image/img/</code> 目录下找文件</p></li></ul></li></ol><h2 id="六、反向代理案例" tabindex="-1">六、反向代理案例 <a class="header-anchor" href="#六、反向代理案例" aria-label="Permalink to &quot;六、反向代理案例&quot;">​</a></h2><p>Nginx 反向代理的配置语法：<br><code>proxy_pass</code><br><code>proxy_set_header</code></p><h3 id="案例-1-代理到哔哩哔哩" tabindex="-1">案例 1 代理到哔哩哔哩 <a class="header-anchor" href="#案例-1-代理到哔哩哔哩" aria-label="Permalink to &quot;案例 1 代理到哔哩哔哩&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location / {</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> root</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">   html;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> index</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">  index.html</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> index.htm;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> proxy_pass</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//bilibili.com;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="案例-2-nginx-反向代理解决跨域" tabindex="-1">案例 2 nginx 反向代理解决跨域 <a class="header-anchor" href="#案例-2-nginx-反向代理解决跨域" aria-label="Permalink to &quot;案例 2 nginx 反向代理解决跨域&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //前端</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xhr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XMLHttpRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;GET&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/portal/list&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onreadystatechange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xhr.readyState </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  xhr.status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){		</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		 console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xhr.responseText);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//后端</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> express</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;express&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> express</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/portal/list&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		code: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;搞咩啊&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;success&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>当前端向后端发送请求时，由于两个 ip 皆为客户端，只是端口号不同，此时会产生跨域问题。<br> 此时，通过配置 nginx 反向代理后端服务。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//nginx配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location /api/ {</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">  proxy_pass</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//localhost:9000/;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这时，nginx 截取到/api/ 的请求将会转发到后端的 express 服务。</p><h2 id="七、vue-histroy-模式跳转路由-404-问题" tabindex="-1">七、Vue histroy 模式跳转路由 404 问题 <a class="header-anchor" href="#七、vue-histroy-模式跳转路由-404-问题" aria-label="Permalink to &quot;七、Vue histroy 模式跳转路由 404 问题&quot;">​</a></h2><ul><li><p>问题原因<br> 我们的服务器是根据页面路由，去按路径寻找资源的。我们打包好的 web 站点只有一个 html 页面，不存在其他资源目录下的 html，服务器找不到对应页面所以才报 404。</p></li><li><p>解决方案<br><code>try_files $uri $uri/ /index.html;</code><br> 如果给出的 file 都没有匹配到，则重新请求最后一个参数给定的 uri，就是新的 location 匹配</p></li><li><p>常见的变量：</p><ol><li><code>$uri</code> 当前请求的 URI，但不含“？”后的参数</li><li><code>$args</code> 当前请求的参数，即“？”后的宇符串</li><li><code>$arg_xxx</code> 当前请求里的某个参数，“arg ”后是参数的名字</li><li><code>$http_xxx</code> 当前请求里的 xxx 头部对应的值</li><li><code>$sent_http_xxx</code> 返回给客户端的响应头部对应的值</li><li><code>$remote_addr</code> 客户端 IP 地址。</li><li><code>$http_cookie</code> 获取 cookie 值。</li><li><code>$cookie_xxx</code> 当前请求的 cookie xxx 对应的值。</li><li><code>$request_uri</code> 浏览器发起的不作任何修改的请求的 url 中的 path 如在 (www.baidu.com/p1/file?d=111), 其值为/p1/file?d=111</li><li><code>$uri</code> 指当前的请求 URI，不包括任何参数，反映任何内部重定向或 index 模块所做的修改。</li><li><code>$request_method</code> 请求方法</li></ol></li></ul><h2 id="八、go-access-日志分析器" tabindex="-1">八、Go-Access- 日志分析器 <a class="header-anchor" href="#八、go-access-日志分析器" aria-label="Permalink to &quot;八、Go-Access- 日志分析器&quot;">​</a></h2><p>详细用法参考官网文档 <a href="https://www.goaccess.cc/" target="_blank" rel="noreferrer">go-Access</a></p><h2 id="九、负载均衡-upstream" tabindex="-1">九、负载均衡 upstream <a class="header-anchor" href="#九、负载均衡-upstream" aria-label="Permalink to &quot;九、负载均衡 upstream&quot;">​</a></h2><p>upstream 的基本语法如下，一个 upstream 需要设置一个名称，这个名称可以在 server 里面当作 proxy 主机使用。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> upstream  node {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    server </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    server </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9002</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    server </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9003</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> location </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    proxy_pass </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//node;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><ul><li><p>默认状态是按照轮询的方式去做负载的<br> 使用 express 启动三个服务 分别是 9001 9002 9003<br> 经过 33 次压测之后 平均每个负载为 11 次证明轮询</p></li><li><p>权重 <code>weight</code></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> upstream  node {  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		server </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> weight</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		server </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9002</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> weight</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		server </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9003</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> weight</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>权重越大服务器承载的并发就越高，压测 100 更多的并发打到了 9001</p></li><li><p><code>fail_timeout backup</code><br> fail_timeout 是故障等待超时时间<br> backup 是备用服务器参数，可以为一个 upstream 设置一个 backup 的 server，在生产 server 全部都出问题之后，可以自动切换到备用 server 上，为回复服务争取时间</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">upstream  node {  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		server </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fail_timeout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		server </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9002</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fail_timeout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		server </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9003</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> backup;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul>`,44)]))}const b=s(k,[["render",r]]);export{u as __pageData,b as default};
