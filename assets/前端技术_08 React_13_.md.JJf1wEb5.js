import{_ as i,c as a,o as t,ag as l}from"./chunks/framework.-ewJmwvT.js";const E=JSON.parse('{"title":"13_","description":"","frontmatter":{},"headers":[],"relativePath":"前端技术/08 React/13_.md","filePath":"前端技术/08 React/13_.md"}'),n={name:"前端技术/08 React/13_.md"};function h(e,s,p,k,r,d){return t(),a("div",null,s[0]||(s[0]=[l(`<h1 id="_13" tabindex="-1">13_ <a class="header-anchor" href="#_13" aria-label="Permalink to &quot;13_&quot;">​</a></h1><p>#待补（程度：中）</p><h2 id="五、navlink-与封装-navlink" tabindex="-1">五、NavLink 与封装 NavLink <a class="header-anchor" href="#五、navlink-与封装-navlink" aria-label="Permalink to &quot;五、NavLink 与封装 NavLink&quot;">​</a></h2><ol><li>NavLink 可以实现路由链接的高亮，通过 activeClassName 指定样式名</li></ol><h2 id="六、switch-的使用" tabindex="-1">六、Switch 的使用 <a class="header-anchor" href="#六、switch-的使用" aria-label="Permalink to &quot;六、Switch 的使用&quot;">​</a></h2><ol><li>通常情况下，path 和 component 是一一对应的关系。</li><li>Switch 可以提高路由匹配效率 (单一匹配)。</li></ol><h2 id="七、解决多级路径刷新页面样式丢失的问题" tabindex="-1">七、解决多级路径刷新页面样式丢失的问题 <a class="header-anchor" href="#七、解决多级路径刷新页面样式丢失的问题" aria-label="Permalink to &quot;七、解决多级路径刷新页面样式丢失的问题&quot;">​</a></h2><ol><li>public/index.html 中 引入样式时不写 ./ 写 / （常用）</li><li>public/index.html 中 引入样式时不写 ./ 写 <code>%PUBLIC_URL%</code> （常用）</li><li>使用 HashRouter</li></ol><h2 id="八、路由的严格匹配与模糊匹配" tabindex="-1">八、路由的严格匹配与模糊匹配 <a class="header-anchor" href="#八、路由的严格匹配与模糊匹配" aria-label="Permalink to &quot;八、路由的严格匹配与模糊匹配&quot;">​</a></h2><ol><li><p>默认使用的是模糊匹配（简单记：【输入的路径】必须包含要【匹配的路径】，且顺序要一致）</p></li><li><p>开启严格匹配：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Route</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> exact</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/about&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> component</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{About}/&gt;</span></span></code></pre></div></li><li><p>严格匹配不要随便开启，需要再开，有些时候开启会导致无法继续匹配二级路由</p></li></ol><h2 id="九、redirect-的使用" tabindex="-1">九、Redirect 的使用 <a class="header-anchor" href="#九、redirect-的使用" aria-label="Permalink to &quot;九、Redirect 的使用&quot;">​</a></h2><ol><li><p>一般写在所有路由注册的最下方，当所有路由都无法匹配时，跳转到 Redirect 指定的路由</p></li><li><p>具体编码：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;Switch&gt;  </span></span>
<span class="line"><span>	&lt;Route path=&quot;/about&quot; component={About}/&gt;  </span></span>
<span class="line"><span>	&lt;Route path=&quot;/home&quot; component={Home}/&gt;  </span></span>
<span class="line"><span>	&lt;Redirect to=&quot;/about&quot;/&gt;  </span></span>
<span class="line"><span>&lt;/Switch&gt;</span></span></code></pre></div></li></ol><h2 id="十、嵌套路由" tabindex="-1">十、嵌套路由 <a class="header-anchor" href="#十、嵌套路由" aria-label="Permalink to &quot;十、嵌套路由&quot;">​</a></h2><p>1.注册子路由时要写上父路由的 path 值<br> 2.路由的匹配是按照注册路由的顺序进行的</p><h2 id="十一、向路由组件传递参数" tabindex="-1">十一、向路由组件传递参数 <a class="header-anchor" href="#十一、向路由组件传递参数" aria-label="Permalink to &quot;十一、向路由组件传递参数&quot;">​</a></h2><h3 id="_1-params-参数" tabindex="-1">1. <code>params</code> 参数 <a class="header-anchor" href="#_1-params-参数" aria-label="Permalink to &quot;1. \`params\` 参数&quot;">​</a></h3><ul><li><strong>路由链接（携带参数）：</strong></li></ul><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/demo/test/tom/18&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;详情&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li><strong>注册路由（声明接收）：</strong></li></ul><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Route</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/demo/test/:name/:age&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> component</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{Test} /&gt;</span></span></code></pre></div><ul><li><strong>接收参数：</strong></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.props.match.params</span></span></code></pre></div><h3 id="_2-search-参数" tabindex="-1">2. <code>search</code> 参数 <a class="header-anchor" href="#_2-search-参数" aria-label="Permalink to &quot;2. \`search\` 参数&quot;">​</a></h3><ul><li><strong>路由链接（携带参数）：</strong></li></ul><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/demo/test?name=tom&amp;age=18&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;详情&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li><strong>注册路由（无需声明）：</strong></li></ul><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Route</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/demo/test&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> component</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{Test} /&gt;</span></span></code></pre></div><ul><li><strong>接收参数：</strong></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.props.location.search</span></span></code></pre></div><ul><li><strong>备注：</strong><br> 接收到的是 URL 编码字符串，需要借助 <code>querystring</code> 模块解析：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> querystring </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;querystring&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> querystring.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.props.location.search.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre></div><h3 id="_3-state-参数" tabindex="-1">3. <code>state</code> 参数 <a class="header-anchor" href="#_3-state-参数" aria-label="Permalink to &quot;3. \`state\` 参数&quot;">​</a></h3><ul><li><strong>路由链接（携带参数）：</strong></li></ul><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{{ pathname: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/demo/test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, state: { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tom&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } }}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  详情</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li><strong>注册路由（无需声明）：</strong></li></ul><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Route</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/demo/test&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> component</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{Test} /&gt;</span></span></code></pre></div><ul><li><strong>接收参数：</strong></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.props.location.state</span></span></code></pre></div><ul><li><strong>备注：</strong><br> 刷新页面也可以保留参数（不会丢失）。</li></ul><h2 id="十二、编程式路由导航" tabindex="-1">十二、编程式路由导航 <a class="header-anchor" href="#十二、编程式路由导航" aria-label="Permalink to &quot;十二、编程式路由导航&quot;">​</a></h2><p>借助 this.prosp.history 对象上的 API 对操作路由跳转、前进、后退<br> -<code>this.prosp.history.push()</code><br> -<code>this.prosp.history.replace()</code><br> -<code>this.prosp.history.goBack()</code><br> -<code>this.prosp.history.goForward()</code><br> -<code>this.prosp.history.go()</code></p><h2 id="十三、browserrouter-与-hashrouter-的区别" tabindex="-1">十三、BrowserRouter 与 HashRouter 的区别 <a class="header-anchor" href="#十三、browserrouter-与-hashrouter-的区别" aria-label="Permalink to &quot;十三、BrowserRouter 与 HashRouter 的区别&quot;">​</a></h2><ol><li>底层原理不一样：<br> BrowserRouter 使用的是 H5 的 history API，不兼容 IE9 及以下版本。<br> HashRouter 使用的是 URL 的哈希值。</li><li>path 表现形式不一样<br> BrowserRouter 的路径中没有#,例如：<code>localhost:3000/demo/test</code><br> HashRouter 的路径包含#,例如：<code>localhost:3000/#/demo/test</code></li><li>刷新后对路由 state 参数的影响<br> (1).BrowserRouter 没有任何影响，因为 state 保存在 history 对象中。<br> (2).HashRouter 刷新后会导致路由 state 参数的丢失！！！</li><li>备注：HashRouter 可以用于解决一些路径错误相关的问题。</li></ol><h2 id="十四、antd-的按需引入-自定主题" tabindex="-1">十四、antd 的按需引入 + 自定主题 <a class="header-anchor" href="#十四、antd-的按需引入-自定主题" aria-label="Permalink to &quot;十四、antd 的按需引入 + 自定主题&quot;">​</a></h2><ol><li><p>安装依赖：<code>yarn add react-app-rewired customize-cra babel-plugin-import less less-loader</code></p></li><li><p>修改 package.json</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	&quot;start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;react-app-rewired start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	&quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;react-app-rewired build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	&quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;react-app-rewired test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	&quot;eject&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;react-scripts eject&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre></div></li><li><p>根目录下创建 <code>config-overrides.js</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//配置具体的修改规则  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">override</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fixBabelImports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addLessLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;customize-cra&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> override</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fixBabelImports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;import&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	libraryName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;antd&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	libraryDirectory: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;es&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	style: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}),  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addLessLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	lessOptions:{  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		javascriptEnabled: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		modifyVars: { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@primary-color&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;green&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}),  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>备注：不用在组件里亲自引入样式了，即：<code>import &#39;antd/dist/antd.css&#39;</code> 应该删掉</p></li></ol>`,45)]))}const g=i(n,[["render",h]]);export{E as __pageData,g as default};
