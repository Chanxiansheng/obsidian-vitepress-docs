import{_ as o,c as a,o as t,ag as l}from"./chunks/framework.-ewJmwvT.js";const i="/obsidian-vitepress-docs/assets/16%20BEM%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%B8%83%E5%B1%80-1.DDJauIDp.png",r="/obsidian-vitepress-docs/assets/16%20BEM%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%B8%83%E5%B1%80-2.CfroKmq6.png",u=JSON.parse('{"title":"BEM架构与布局","description":"","frontmatter":{},"headers":[],"relativePath":"前端技术/07 Vue/Vue3/16 BEM架构与布局.md","filePath":"前端技术/07 Vue/Vue3/16 BEM架构与布局.md"}'),c={name:"前端技术/07 Vue/Vue3/16 BEM架构与布局.md"};function d(n,e,s,p,_,m){return t(),a("div",null,e[0]||(e[0]=[l('<h1 id="bem架构与布局" tabindex="-1">BEM架构与布局 <a class="header-anchor" href="#bem架构与布局" aria-label="Permalink to &quot;BEM架构与布局&quot;">​</a></h1><h2 id="bem架构" tabindex="-1">BEM架构 <a class="header-anchor" href="#bem架构" aria-label="Permalink to &quot;BEM架构&quot;">​</a></h2><ul><li>BEM是一个出色的CSS架构，全称BlockElementModifier是由Yandex（俄罗斯最著名的互联网企业）的开发团队提出的前端开发理论。通过Block、Element、Modifier来描述页面，通过 <code>_</code> 与 <code>--</code> 连接 ，关键就是为了解决多人协作的命名问题。 <ul><li>B代表：Black（块）</li><li>E代表：Element（元素）</li><li>M代表： Modifier （修饰符）</li></ul></li></ul><h4 id="模块block" tabindex="-1"><strong>模块block</strong>（） <a class="header-anchor" href="#模块block" aria-label="Permalink to &quot;**模块block**（）&quot;">​</a></h4><p>没有前缀，多个单词用 <code>-</code> 连接，是对一个组件名抽象。</p><p><code>.block {}</code></p><h4 id="元素element" tabindex="-1"><strong>元素Element</strong> <a class="header-anchor" href="#元素element" aria-label="Permalink to &quot;**元素Element**&quot;">​</a></h4><p>元素在模块之后，可以有多个层级，以 <code>__</code>（双下划线） 连接。element 也不是死板的，是根据具体的需求演变的，中间也可以使用 <code>-</code> 来演变。</p><p><code>.block__element {}</code></p><h4 id="修饰modifier" tabindex="-1"><strong>修饰Modifier</strong> <a class="header-anchor" href="#修饰modifier" aria-label="Permalink to &quot;**修饰Modifier**&quot;">​</a></h4><p>某元素、或者某模块特别的状态，必须有一个状态名和状态值，使用 <code>--</code> 链接，也可根据具体需求而定。</p><p><code>.block—modifier {}</code></p><p>主要针对的是 Block 本身,是对于Block做修饰。例如有：</p><ul><li>颜色</li><li>大小</li><li>用途</li></ul><h2 id="layout布局" tabindex="-1">Layout布局 <a class="header-anchor" href="#layout布局" aria-label="Permalink to &quot;Layout布局&quot;">​</a></h2><p>常用布局如下</p><p><img src="'+i+'" alt=""></p><p><img src="'+r+'" alt=""></p>',18)]))}const h=o(c,[["render",d]]);export{u as __pageData,h as default};
