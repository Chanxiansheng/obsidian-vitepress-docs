import{_ as o,c as d,o as c,ae as r}from"./chunks/framework.CIivgcbp.js";const x=JSON.parse('{"title":"全局变量","description":"","frontmatter":{},"headers":[],"relativePath":"服务端/NodeJS/NodeJS笔记/02-全局变量.md","filePath":"服务端/NodeJS/NodeJS笔记/02-全局变量.md"}'),s={name:"服务端/NodeJS/NodeJS笔记/02-全局变量.md"};function t(a,e,n,p,_,i){return c(),d("div",null,e[0]||(e[0]=[r('<h1 id="全局变量" tabindex="-1">全局变量 <a class="header-anchor" href="#全局变量" aria-label="Permalink to &quot;全局变量&quot;">​</a></h1><p>如何在 nodejs 定义全局变量呢？</p><p>在 nodejs 中使用 global 定义全局变量。定义的变量，可以在引入的文件中也可以访问到该变量，例如在一个 js 文件中通过 <code>global.xxx = &#39;xxx&#39;</code> <code>require(&#39;xxx.js&#39;)</code> xxx.js 也可以访问到该变量。</p><p>在浏览器中我们定义的全局变量都在 window 对象中，而 nodejs 在 global，不同的环境还需要判断，于是在 ECMAScript 2020 出现了一个 <code>globalThis</code> 全局变量，在 nodejs 环境会自动切换成 global ，浏览器环境自动切换 window 非常方便。</p><ul><li>nodejs 内置全局 API</li></ul><blockquote><p><strong>__dirname __filename 只能在 cjs 使用 esm 规范没有这两个全局变量</strong></p></blockquote><p><code>__dirname</code> ：表示当前模块的所在 <strong>目录</strong> 的绝对路径<br><code>__filename</code>：表示当前模块 <strong>文件</strong> 的绝对路径，包括文件名和文件扩展名</p><p><code>require module</code> ：导入导出模块</p><p><code>process</code> ： 进程相关对象<br> 1. <code>process.argv</code>: 这是一个包含命令行参数的数组。第一个元素是 Node.js 的执行路径，第二个元素是当前执行的 JavaScript 文件的路径，之后的元素是传递给脚本的命令行参数。<br> 2. <code>process.env</code>: 这是一个包含当前环境变量的对象。您可以通过 process.env 访问并操作环境变量。<br> 3. <code>process.cwd()</code>: 这个方法返回当前工作目录的路径。<br> 4. <code>process.on(event, listener)</code>: 用于注册事件监听器。您可以使用 process.on 监听诸如 exit、uncaughtException 等事件，并在事件发生时执行相应的回调函数。<br> 5. <code>process.exit([code])</code>: 用于退出当前的 Node.js 进程。您可以提供一个可选的退出码作为参数。<br> 6. <code>process.pid</code>: 这个属性返回当前进程的 PID（进程 ID）。</p><p><code>Buffer</code>：二进制对象</p>',10)]))}const u=o(s,[["render",t]]);export{x as __pageData,u as default};
