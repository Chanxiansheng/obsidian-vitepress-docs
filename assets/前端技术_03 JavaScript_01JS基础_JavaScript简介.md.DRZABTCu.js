import{_ as a}from"./chunks/01 什么是JavaScript-1.CcAuDrKF.js";import{_ as r,c as i,o as e,ae as o}from"./chunks/framework.CIivgcbp.js";const u=JSON.parse('{"title":"JavaScript 简介","description":"","frontmatter":{},"headers":[],"relativePath":"前端技术/03 JavaScript/01JS基础/JavaScript简介.md","filePath":"前端技术/03 JavaScript/01JS基础/JavaScript简介.md"}'),d={name:"前端技术/03 JavaScript/01JS基础/JavaScript简介.md"};function c(l,t,p,s,n,M){return e(),i("div",null,t[0]||(t[0]=[o('<h1 id="javascript-简介" tabindex="-1">JavaScript 简介 <a class="header-anchor" href="#javascript-简介" aria-label="Permalink to &quot;JavaScript 简介&quot;">​</a></h1><div class="tip custom-block github-alert"><p class="custom-block-title">+ 说明</p><p>对应 <a href="../../00%20%E4%B9%A6%E7%B1%8D/JS/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%EF%BC%88%E7%AC%AC4%E7%89%88%EF%BC%89.pdf">JavaScript高级程序设计（第4版）</a> 第一章和第二章</p></div><h2 id="_1-什么是-javascript" tabindex="-1">1.什么是 JavaScript <a class="header-anchor" href="#_1-什么是-javascript" aria-label="Permalink to &quot;1.什么是 JavaScript&quot;">​</a></h2><p>完整的 JavaScript 实现包含以下几个部分：</p><ul><li>核心（ECMAScript）</li><li>文档对象模型（DOM）</li><li>浏览器对象模型（BOM）</li></ul><p><img src="'+a+'" alt="D-学习笔记/前端技术/03 JavaScript/笔记：JS高级程序设计/attachments/01 什么是JavaScript-1.png"></p><h3 id="ecmascript" tabindex="-1">ECMAScript <a class="header-anchor" href="#ecmascript" aria-label="Permalink to &quot;ECMAScript&quot;">​</a></h3><p>ECMAScript，即 ECMA-262 定义的语言。<br> Web 浏览器只是 ECMAScript 实现可能存在的一种宿主环境。宿主环境提供 ECMAScript 的基准实现和与环境自身交互必需的扩展。扩展（比如 DOM）使用 ECMAScript 核心类型和语法，提供特定于环境的额外功能。其他宿主环境还有服务器端 JavaScript 平台 Node.js 和 Deno。</p><p>在基本的层面，ECMA-262 描述这门语言的如下部分：</p><ul><li>语法</li><li>类型</li><li>语句</li><li>关键字</li><li>保留字</li><li>操作符</li><li>全局对象</li></ul><p>ECMAScript 不同的版本以“edition”表示， ECMA-262 第 6 版，俗称 ES6、ES2015 或 ES Harmony，于 2015 年 6 月发布。这一版包含了大概这个规范有史以来最重要的一批增强特性。ES6 正式支持了类、模块、迭代器、生成器、箭头函数、期约、反射、代理和众多新的数据类型。<br> 截至 2024 年 6 月，ECMA-262 已经发布了第 15 个版本，具体参见官方文档（<a href="https://ecma-international.org/publications-and-standards/standards/ecma-262/" target="_blank" rel="noreferrer">ECMA-262 - Ecma International</a>）</p><h3 id="dom" tabindex="-1">DOM <a class="header-anchor" href="#dom" aria-label="Permalink to &quot;DOM&quot;">​</a></h3><p><strong>文档对象模型（DOM，Document Object Model）</strong> 是一个应用编程接口（API），用于在 HTML 中使用扩展的 XML。DOM 将整个页面抽象为一组分层节点。HTML 或 XML 页面的每个组成部分都是一种节点，包含不同的数据。<br> DOM 通过创建表示文档的树，让开发者可以随心所欲地控制网页的内容和结构。使用 DOM API，可以轻松地删除、添加、替换、修改节点。</p><p>为了保持 Web 跨平台的本性，W3C 开始了制定 DOM 标准的进程（DOM4 在 2019 年交给 WHATWG）。</p><table tabindex="0"><thead><tr><th>DOM 级别</th><th>主要模块/特性</th><th>描述</th></tr></thead><tbody><tr><td><strong>Level 1</strong></td><td><strong>DOM Core</strong></td><td>提供了一种映射 XML 文档的方法，从而方便访问和操作文档任意部分的方式</td></tr><tr><td></td><td><strong>DOM HTML</strong></td><td>扩展了 DOM Core，并增加了特定于 HTML 的对象和方法</td></tr><tr><td><strong>Level 2</strong></td><td><strong>DOM 视图</strong></td><td>描述追踪文档不同视图（如应用 CSS 样式前后的文档）的接口</td></tr><tr><td></td><td><strong>DOM 事件</strong></td><td>描述事件及事件处理的接口</td></tr><tr><td></td><td><strong>DOM 样式</strong></td><td>描述处理元素 CSS 样式的接口</td></tr><tr><td></td><td><strong>DOM 遍历和范围</strong></td><td>描述遍历和操作 DOM 树的接口</td></tr><tr><td><strong>Level 3</strong></td><td><strong>DOM Load and Save</strong></td><td>增加了以统一的方式加载和保存文档的方法</td></tr><tr><td></td><td><strong>DOM Validation</strong></td><td>包含验证文档的方法</td></tr><tr><td></td><td><strong>DOM Core 扩展</strong></td><td>支持所有 XML 1.0 的特性，包括 XML Infoset、XPath 和 XML Base</td></tr><tr><td><strong>Level 4</strong></td><td><strong>Mutation Observers</strong></td><td>使用 Mutation Observers 替代 Mutation Events，提供一种更高效且灵活的方式来监听 DOM 树的变化</td></tr><tr><td></td><td>...</td><td>持续更新</td></tr></tbody></table><p>现行标准可以参考 WHATWG 官方文档（<a href="https://dom.spec.whatwg.org/" target="_blank" rel="noreferrer">DOM Standard</a>）</p><div class="tip custom-block github-alert"><p class="custom-block-title">+ 注意</p><p></p><ol><li>DOM 并非只能通过 JavaScript 访问。</li><li>事实上并没有一个 DOM Level 0 的标准，只是一个历史参照点，可以看成 IE4 最初支持的 DHTML。</li><li>除了 DOM Core 和 DOM HTML 接口，有些其他基于 XML 的语言也发布了自己的 DOM 标准，增加了独有的 DOM 方法和接口，如：</li></ol><ul><li>可伸缩矢量图（SVG，Scalable Vector Graphics）</li><li>数学标记语言（MathML，Mathematical Markup Language）</li><li>同步多媒体集成语言（SMIL，Synchronized Multimedia Integration Language）</li></ul></div><h3 id="bom" tabindex="-1">BOM <a class="header-anchor" href="#bom" aria-label="Permalink to &quot;BOM&quot;">​</a></h3><p>IE3 和 Netscape Navigator 3 提供了浏览器对象模型（BOM） API，用于支持访问和操作浏览器的窗口。使用 BOM，开发者可以操控浏览器显示页面之外的部分，如：</p><ul><li>弹出新浏览器窗口的能力；</li><li>移动、缩放和关闭浏览器窗口的能力；</li><li>navigator 对象，提供关于浏览器的详尽信息；</li><li>location 对象，提供浏览器加载页面的详尽信息；</li><li>screen 对象，提供关于用户屏幕分辨率的详尽信息；</li><li>performance 对象，提供浏览器内存占用、导航行为和时间统计的详尽信息；</li><li>对 cookie 的支持；</li><li>其他自定义对象，如 XMLHttpRequest 和 IE 的 ActiveXObject。</li></ul><p>值得注意的是，虽然没有针对 BOM 的官方标准，但随着 Web 技术的发展，某些 BOM 相关的 API 已经逐渐被纳入到 Web 平台的标准之中，比如 Window 接口的部分属性和方法已经被 WHATWG 在其 HTML Living Standard 中进行了定义。</p><h2 id="_2-script-标签" tabindex="-1">2. script 标签 <a class="header-anchor" href="#_2-script-标签" aria-label="Permalink to &quot;2. script 标签&quot;">​</a></h2><p>将 JavaScript 插入 HTML 的主要方法是使用 <code>&lt;script&gt;</code> 元素。</p><p><code>&lt;script&gt;</code> 元素有下列 8 个属性：</p><ul><li><code>async</code>：可选。表示应该立即开始下载脚本，但不能阻止其他页面动作，比如下载资源或等待其他脚本加载。只对外部脚本文件有效。</li><li><code>defer</code>：可选。表示脚本可以延迟到文档完全被解析和显示之后再执行。只对外部脚本文件有效。 在 IE7 及更早的版本中，对行内脚本也可以指定这个属性。</li><li><code>charset</code>：可选。使用 src 属性指定的代码字符集。这个属性很少使用，因为大多数浏览器不在乎它的值。</li><li><code>crossorigin</code>：可选。配置相关请求的 CORS（跨源资源共享）设置。默认不使用 CORS。crossorigin=&quot;anonymous&quot; 配置文件请求不必设置凭据标志。crossorigin=&quot;use-credentials&quot; 设置凭据标志，意味着出站请求会包含凭据。</li><li><code>integrity</code>：可选。允许比对接收到的资源和指定的加密签名以验证子资源完整性（SRI， Subresource Integrity）。如果接收到的资源的签名与这个属性指定的签名不匹配，则页面会报错，脚本不会执行。这个属性可以用于确保内容分发网络（CDN，Content Delivery Network）不会提供恶意内容。</li><li><code>language</code>：废弃。最初用于表示代码块中的脚本语言（如 &quot;JavaScript&quot;、&quot;JavaScript 1.2&quot; 或 &quot;VBScript&quot;）。大多数浏览器都会忽略这个属性，不应该再使用它。</li><li><code>src</code>：可选。表示包含要执行的代码的外部文件。</li><li><code>type</code>：可选。代替 language，表示代码块中脚本语言的内容类型（也称 MIME 类型）。JavaScript 文件的 MIME 类型通常是 &quot;application/x-javascript&quot;，不过给 type 属性这个值有可能导致脚本被忽略。在非 IE 的浏览器中有效的其他值还有 &quot;application/javascript&quot; 和 &quot;application/ecmascript&quot;。如果这个值是 module，则代码会被当成 ES6 模块，而且只有这时候代码中才能出现 import 和 export 关键字。</li></ul><p>使用 <code>&lt;script&gt;</code> 的方式有两种：通过它直接在网页中嵌入 JavaScript 代码，以及通过它在网页中包含外部 JavaScript 文件。</p><p>过去，所有 <code>&lt;script&gt;</code> 元素都被放在页面的 <code>&lt;head&gt;</code> 标签内。这种做法的主要目的是把外部的 CSS 和 JavaScript 文件都集中放到一起。不过，这就意味着必须把所有 JavaScript 代码都下载、解析和解释完成后，才能开始渲染页面，这会导致页面渲染的明显延迟，在此期间浏览器窗口完全空白。<br> 为解决这个问题，现代 Web 应用程序通常将所有 JavaScript 引用放在 <code>&lt;body&gt;</code> 元素中的页面内容后面。</p><p>==可以使用 <strong>defer(延迟)</strong> 属性把脚本推迟到文档渲染完毕后再执行。推迟的脚本原则上按照它们被列出==<br> ==的次序执行。==</p><p>==可以使用 <strong>async(异步)</strong> 属性表示脚本不需要等待其他脚本，同时也不阻塞文档渲染，即异步加载。异==<br> ==步脚本不能保证按照它们在页面中出现的次序执行。==</p><p>通过使用 <code>&lt;noscript&gt;</code> 元素，可以指定在浏览器不支持脚本时显示的内容。如果浏览器支持并启<br> 用脚本，则 <code>&lt;noscript&gt;</code> 元素中的任何内容都不会被渲染。</p>',30)]))}const h=r(d,[["render",c]]);export{u as __pageData,h as default};
