import{_ as e,c as a,o as i,ag as s}from"./chunks/framework.-ewJmwvT.js";const l="/obsidian-vitepress-docs/assets/Pasted%20image%2020240224215300.Bt9rcISz.png",c=JSON.parse('{"title":"数组操作方法","description":"","frontmatter":{},"headers":[],"relativePath":"前端技术/03 JavaScript/02JS数据类型/JS数组/数组操作方法.md","filePath":"前端技术/03 JavaScript/02JS数据类型/JS数组/数组操作方法.md"}'),n={name:"前端技术/03 JavaScript/02JS数据类型/JS数组/数组操作方法.md"};function d(r,t,h,o,p,g){return i(),a("div",null,t[0]||(t[0]=[s(`<h1 id="数组操作方法" tabindex="-1">数组操作方法 <a class="header-anchor" href="#数组操作方法" aria-label="Permalink to &quot;数组操作方法&quot;">​</a></h1><h2 id="一、创建一个数组" tabindex="-1">一、创建一个数组: <a class="header-anchor" href="#一、创建一个数组" aria-label="Permalink to &quot;一、创建一个数组:&quot;">​</a></h2><p>1.字面量(最常用)</p><p><code>var a = [1, 2, 3]</code></p><p>2.构造器</p><div class="language-JS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [1,2,3] </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [,,]</span></span></code></pre></div><p>3.Array.of() ES6</p><p>返回由所有参数值组成的数组，如果没有参数，就返回一个空数组。<br><code>let a = Array.of(1, 2, 3); // [1,2,3]</code></p><p>4.Array.from() ES6</p><p>用于将两类对象转为真正的数组（不改变原对象，返回新的数组）<br> 参数：<br> 第一个参数(必需):要转化为真正数组的对象。<br> 第二个参数(可选): 类似数组的map方法，对每个元素进行处理，将处理后的值放入返回的数组。<br> 第三个参数(可选): 用来绑定this。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;c&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, length: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;];</span></span></code></pre></div><h2 id="二、改变原数组的方法-9个" tabindex="-1">二、改变原数组的方法(9个) <a class="header-anchor" href="#二、改变原数组的方法-9个" aria-label="Permalink to &quot;二、改变原数组的方法(9个)&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:center;">方法名<img width="100"></th><th style="text-align:left;">定义<img width="150"></th><th style="text-align:left;">语法</th><th style="text-align:left;">示例 <img width="200"></th></tr></thead><tbody><tr><td style="text-align:center;">splice</td><td style="text-align:left;">向数组中添加/删除项目，然后返回被删除的项目</td><td style="text-align:left;"><code>array.splice(index,howmany,item1,.....,itemX)</code> index：必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。 howmany：可选。要删除的项目数量。如果设置为 0，则不会删除项目。 item1, ..., itemX： 可选。向数组添加的新项目。</td><td style="text-align:left;"><code>let a = [1, 2, 3, 4, 5, 6, 7];let item = a.splice(0, 3); // [1,2,3]console.log(a); // [4,5,6,7]</code></td></tr><tr><td style="text-align:center;">sort</td><td style="text-align:left;">对数组元素进行排序，并返回这个数组</td><td style="text-align:left;"><code>array.sort(fn)</code> 参数可选: 规定排序顺序的比较函数。 默认情况下sort()方法没有传比较函数的话，默认按字母升序，如果不是元素不是字符串的话，会调用toString()方法将元素转化为字符串的Unicode(万国码)位点，然后再比较字符。</td><td style="text-align:left;"><code>var a = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];a.sort(); // [&quot;Apple&quot;,&quot;Banana&quot;,&quot;Mango&quot;,&quot;Orange&quot;]</code></td></tr><tr><td style="text-align:center;">pop</td><td style="text-align:left;">删除数组中的最后一个元素，并且返回该元素</td><td style="text-align:left;"></td><td style="text-align:left;"><code>let a = [1,2,3];let item = a.pop(); // 3console.log(a); // [1,2]</code></td></tr><tr><td style="text-align:center;">shift</td><td style="text-align:left;">删除数组的第一个元素</td><td style="text-align:left;"></td><td style="text-align:left;"><code>let a = [1,2,3];let item = a.shift(); // 1 console.log(a); // [2,3]</code></td></tr><tr><td style="text-align:center;">push</td><td style="text-align:left;">向数组的末尾添加一个或多个元素，并返回新的长度</td><td style="text-align:left;">参数: item1, item2, ..., itemX ,要添加到数组末尾的元素</td><td style="text-align:left;"><code>let a = [1,2,3];let item = a.push(&#39;末尾&#39;); // 4 console.log(a); // [1,2,3,&#39;末尾&#39;]</code></td></tr><tr><td style="text-align:center;">unshift</td><td style="text-align:left;">向数组的开头添加一个或更多元素，并返回新的长度</td><td style="text-align:left;">参数: item1, item2, ..., itemX ,要添加到数组开头的元素</td><td style="text-align:left;"><code>let a = [1,2,3];let item = a.unshift(&#39;开头&#39;); // 4 console.log(a); // [&#39;开头&#39;,1,2,3]</code></td></tr><tr><td style="text-align:center;">reverse</td><td style="text-align:left;">颠倒数组中元素的顺序</td><td style="text-align:left;"></td><td style="text-align:left;"><code>let a = [1,2,3];a.reverse();console.log(a); // [3,2,1]</code></td></tr><tr><td style="text-align:center;">copyWithin</td><td style="text-align:left;">在当前数组内部，将指定位置的成员复制到其他位置,并返回这个数组</td><td style="text-align:left;"><code>array.copyWithin(target, start = 0, end = this.length)</code> target（必需）：从该位置开始替换数据。如果为负值，表示倒数。 start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示倒数。 end（可选）：到该位置前停止读取数据，默认等于数组长度。使用负数可从数组结尾处规定位置。</td><td style="text-align:left;"><code>[1, 2, 3, 4, 5].copyWithin(0, -2, -1)// [4, 2, 3, 4, 5]</code></td></tr><tr><td style="text-align:center;">fill</td><td style="text-align:left;">使用给定值，填充一个数组</td><td style="text-align:left;">第一个元素(必须): 要填充数组的值 第二个元素(可选): 填充的开始位置,默认值为0 第三个元素(可选)：填充的结束位置，默认是为this.length</td><td style="text-align:left;"><code> [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;].fill(7)// [7, 7, 7][&#39;a&#39;, &#39;b&#39;, &#39;c&#39;].fill(7, 1, 2)// [&#39;a&#39;, 7, &#39;c&#39;]</code></td></tr></tbody></table><h2 id="三、不改变原数组的方法-8个" tabindex="-1">三、不改变原数组的方法(8个) <a class="header-anchor" href="#三、不改变原数组的方法-8个" aria-label="Permalink to &quot;三、不改变原数组的方法(8个)&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:center;">方法名<img width="100"></th><th style="text-align:left;">定义<img width="150"></th><th style="text-align:left;">语法<img width="300"></th><th style="text-align:left;">示例<img width="200"></th></tr></thead><tbody><tr><td style="text-align:center;">cancat</td><td style="text-align:left;">用于合并两个或多个数组，返回一个新数组 ~ES6扩展运算符...可实现合并数组a=(...b,1,2,3)</td><td style="text-align:left;"><code>var newArr =oldArray.concat(arrayX,arrayX,......,arrayX)</code> arrayX（必须）：该参数可以是具体的值，也可以是数组对象。可以是任意多个。</td><td style="text-align:left;"><code>let a = [1, 2, 3];let b = [4, 5, 6];//连接两个数组 let newVal=a.concat(b); // [1,2,3,4,5,6]</code></td></tr><tr><td style="text-align:center;">includes</td><td style="text-align:left;">返回一个布尔值，表示某个数组是否包含给定的值</td><td style="text-align:left;"><code>array.includes(searchElement,fromIndex=0)</code> searchElement(必须):被查找的元素 fromIndex(可选):默认值为0，参数表示搜索的起始位置，接受负值。正值超过数组长度，数组不会被搜索，返回false。负值绝对值超过长数组度，重置从0开始搜索。</td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;">slice</td><td style="text-align:left;">返回一个从开始到结束（不包括结束）选择的数组的一部分<strong>浅拷贝</strong>到一个新数组对象，且原数组不会被修改。 <em>如果是复杂数据类型(对象,数组)的话，改变其中一个，另外一个也会改变。</em></td><td style="text-align:left;"><code>array.slice(begin, end)</code> begin(可选): 索引数值,接受负值，从该索引处开始提取原数组中的元素,默认值为0。 end(可选):索引数值(不包括),接受负值，在该索引处前结束提取原数组元素，默认值为数组末尾(包括最后一个元素)。</td><td style="text-align:left;"><code>let a= [1,2];let b=a.slice(0,1); // [1] a[0] = 3;console.log(a,b);//[3,2][1]</code></td></tr><tr><td style="text-align:center;">toLocaleString</td><td style="text-align:left;">返回一个表示数组元素的字符串。该字符串由数组中的每个元素的 toLocaleString() 返回值经调用 join() 方法连接（由逗号隔开）组成</td><td style="text-align:left;"></td><td style="text-align:left;"><code>let a=[{name:&#39;OBKoro1&#39;},23,&#39;abcd&#39;,new Date()];let str=a.toLocaleString(); // [object Object],23,abcd,2018/5/28 下午1:52:20</code></td></tr><tr><td style="text-align:center;">join</td><td style="text-align:left;">用于把数组中的所有元素通过指定的分隔符进行分隔放入一个字符串，返回生成的字符串</td><td style="text-align:left;">str(可选): 指定要使用的分隔符，默认使用逗号作为分隔符。</td><td style="text-align:left;"><code>let a= [&#39;hello&#39;,&#39;world&#39;];let str=a.join(); // &#39;hello,world&#39;let str2=a.join(&#39;+&#39;); // &#39;hello+world&#39;</code></td></tr><tr><td style="text-align:center;">toString</td><td style="text-align:left;">把数组转换为由逗号链接起来的字符串，同join(&#39;,&#39;)，不推荐使用</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;">indexOf</td><td style="text-align:left;">返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1</td><td style="text-align:left;"><code>array.indexOf(searchElement,fromIndex)</code> searchElement(必须):被查找的元素 fromIndex(可选):开始查找的位置(不能大于等于数组的长度，返回-1)，接受负值，默认值为0。</td><td style="text-align:left;"><code>let a = [1,2,3]console.log(a.indexOf(1))//0 console.log(a.indexOf(4))//-1</code></td></tr><tr><td style="text-align:center;">lastIndexOf</td><td style="text-align:left;">方法返回指定元素,在数组中的最后一个的索引，如果不存在则返回 -1。（从数组后面往前查找）</td><td style="text-align:left;"><code>arr.lastIndexOf(searchElement,fromIndex)</code></td><td style="text-align:left;"></td></tr></tbody></table><h2 id="四、知识一图" tabindex="-1">四、知识一图 <a class="header-anchor" href="#四、知识一图" aria-label="Permalink to &quot;四、知识一图&quot;">​</a></h2><p><img src="`+l+'" alt="D-学习笔记/前端技术/03 JavaScript/02JS数据类型/JS数组/image/Pasted image 20240224215300.png"></p>',17)]))}const y=e(n,[["render",d]]);export{c as __pageData,y as default};
