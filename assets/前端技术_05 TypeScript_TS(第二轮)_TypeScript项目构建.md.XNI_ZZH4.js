import{_ as e,c as p,o as i,ag as t}from"./chunks/framework.-ewJmwvT.js";const b=JSON.parse('{"title":"TypeScript 项目构建","description":"","frontmatter":{},"headers":[],"relativePath":"前端技术/05 TypeScript/TS(第二轮)/TypeScript项目构建.md","filePath":"前端技术/05 TypeScript/TS(第二轮)/TypeScript项目构建.md"}'),a={name:"前端技术/05 TypeScript/TS(第二轮)/TypeScript项目构建.md"};function r(s,l,o,n,c,d){return i(),p("div",null,l[0]||(l[0]=[t('<h1 id="typescript-项目构建" tabindex="-1">TypeScript 项目构建 <a class="header-anchor" href="#typescript-项目构建" aria-label="Permalink to &quot;TypeScript 项目构建&quot;">​</a></h1><p><a href="https://blog.csdn.net/qq1195566313/article/details/122708348?spm=1001.2014.3001.5501" target="_blank" rel="noreferrer">https://blog.csdn.net/qq1195566313/article/details/122708348?spm=1001.2014.3001.5501</a></p><h2 id="一、webpack" tabindex="-1">一、webpack <a class="header-anchor" href="#一、webpack" aria-label="Permalink to &quot;一、webpack&quot;">​</a></h2><ol><li>安装 webpack npm install webpack -D</li><li>webpack4 以上需要 npm install webpack-cli -D</li><li>编译 TS npm install ts-loader -D</li><li>TS 环境 npm install typescript -D</li><li>热更新服务 npm install webpack-dev-server -D</li><li>HTML 模板 npm install html-webpack-plugin -D</li></ol><h2 id="二、rollup" tabindex="-1">二、Rollup <a class="header-anchor" href="#二、rollup" aria-label="Permalink to &quot;二、Rollup&quot;">​</a></h2><p>1.全局安装 rollup npm install rollup-g</p><p>2.安装 TypeScript npm install typescript -D</p><p>3.安装 TypeScript 转换器 npm install rollup-plugin-typescript2 -D</p><p>4 安装代码压缩插件 npm install rollup-plugin-terser -D</p><p>5 安装 rollupweb 服务 npm install rollup-plugin-serve -D</p><p>6 安装热更新 npm install rollup-plugin-livereload -D</p><p>7 引入外部依赖 npm install rollup-plugin-node-resolve -D</p><p>8 安装配置环境变量用来区分本地和生产 npm install cross-env -D</p><p>9 替换环境变量给浏览器使用 npm install rollup-plugin-replace -D</p><h2 id="三、esbuild-swc" tabindex="-1">三、esbuild + swc <a class="header-anchor" href="#三、esbuild-swc" aria-label="Permalink to &quot;三、esbuild + swc&quot;">​</a></h2><p>前端工具层出不穷，之前有常用的打包工具 <code>webpack</code>，现在有了速度更快的 <code>vite</code>。 <code>vite</code> 的开发模式是基于 <code>esBuild</code> 编译的,打包又是基于 <code>rollup</code>,启动项目是很快的。</p><p><strong>esbuild</strong>是 go 语言编写的并且是多线程执行,性能是 js 的好几十倍，所以很快。</p><ul><li>无需缓存即可实现基础打包</li><li>支持 ES6 跟 CommonJS 模块</li><li>支持 ES 6 Tree Shaking</li><li>体积小</li><li>插件化</li><li>其他</li><li>内置支持编译 jsx</li></ul><p><strong>SWC</strong></p><p>SWC 则宣称其比 Babel 快 20 倍 (四核情况下可以快 70 倍)</p><p>swc 是用 <code>rust</code> 写的，所实现的功能跟 babel 一样，es6 语法转 es5，但是速度比 <code>babel</code> 更快，前端基建工具使用 rust 的是越来越多了，未来可能还会有一个替代 <code>postCss</code> 的。</p>',21)]))}const m=e(a,[["render",r]]);export{b as __pageData,m as default};
