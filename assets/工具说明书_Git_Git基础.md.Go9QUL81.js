import{_ as s,c as a,o as t,ae as l}from"./chunks/framework.CIivgcbp.js";const n="/obsidian-vitepress-docs/assets/image_1uD8IS6NvR.nWqV6n0S.png",e="/obsidian-vitepress-docs/assets/image_mcLLBvTjo_.D3JVNfSx.png",h="/obsidian-vitepress-docs/assets/image_MWH5Yt70NK.DJE_2AwM.png",p="/obsidian-vitepress-docs/assets/image_uwhN13yok4.D9qchh06.png",r="/obsidian-vitepress-docs/assets/image_VIhUaHnNu5.Dfca7H5k.png",d="/obsidian-vitepress-docs/assets/image_bXLhzV3i5X.BMe2EdaU.png",m=JSON.parse('{"title":"Git 基础","description":"","frontmatter":{},"headers":[],"relativePath":"工具说明书/Git/Git基础.md","filePath":"工具说明书/Git/Git基础.md"}'),k={name:"工具说明书/Git/Git基础.md"};function o(g,i,c,F,y,b){return t(),a("div",null,i[0]||(i[0]=[l(`<h1 id="git-基础" tabindex="-1">Git 基础 <a class="header-anchor" href="#git-基础" aria-label="Permalink to &quot;Git 基础&quot;">​</a></h1><h2 id="一、版本控制" tabindex="-1">一、版本控制 <a class="header-anchor" href="#一、版本控制" aria-label="Permalink to &quot;一、版本控制&quot;">​</a></h2><h3 id="什么是版本控制" tabindex="-1">什么是版本控制 <a class="header-anchor" href="#什么是版本控制" aria-label="Permalink to &quot;什么是版本控制&quot;">​</a></h3><p>版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p><ul><li>实现跨区域多人协同开发</li><li>追踪和记载一个或者多个文件的历史记录</li><li>组织和保护你的源代码和文档</li><li>统计工作量</li><li>并行开发、提高开发效率</li><li>跟踪记录整个软件的开发过程</li><li>减轻开发人员的负担，节省时间，同时降低人为错误</li></ul><p>简单说就是用于管理多人协同开发项目的技术。</p><p>没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题。</p><h3 id="常见的版本控制工具" tabindex="-1">常见的版本控制工具 <a class="header-anchor" href="#常见的版本控制工具" aria-label="Permalink to &quot;常见的版本控制工具&quot;">​</a></h3><ul><li><strong>Git</strong></li><li><strong>SVN</strong>（Subversion）</li><li><strong>CVS</strong>（Concurrent Versions System）</li><li><strong>VSS</strong>（Micorosoft Visual SourceSafe）</li><li><strong>TFS</strong>（Team Foundation Server）</li><li>Visual Studio Online</li></ul><h3 id="版本控制分类" tabindex="-1">版本控制分类 <a class="header-anchor" href="#版本控制分类" aria-label="Permalink to &quot;版本控制分类&quot;">​</a></h3><ol><li><p><strong>本地版本控制</strong><br> 记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如 RCS。</p></li><li><p><strong>集中版本控制  SVN</strong><br> 所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改。<br> 所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：SVN、CVS、VSS。</p></li><li><p><strong>分布式版本控制 Git</strong><br> 每个人都拥有全部的代码！<strong>安全隐患！</strong><br> 所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时 push 到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。<br> 不会因为服务器损坏或者网络问题，造成不能工作的情况！</p></li></ol><h3 id="git-与-svn-的主要区别" tabindex="-1">Git 与 SVN 的主要区别 <a class="header-anchor" href="#git-与-svn-的主要区别" aria-label="Permalink to &quot;Git 与 SVN 的主要区别&quot;">​</a></h3><p>SVN 是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。</p><p>Git 是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网了，因为版本都在自己电脑上。协同的方法是这样的：比如说自己在电脑上改了文件 A，其他人也在电脑上改了文件 A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。Git 可以直接看到更新了哪些代码和文件！</p><p><strong>Git 是目前世界上最先进的分布式版本控制系统。</strong></p><h2 id="二、git-环境配置" tabindex="-1">二、Git 环境配置 <a class="header-anchor" href="#二、git-环境配置" aria-label="Permalink to &quot;二、Git 环境配置&quot;">​</a></h2><h3 id="软件下载" tabindex="-1">软件下载 <a class="header-anchor" href="#软件下载" aria-label="Permalink to &quot;软件下载&quot;">​</a></h3><p>打开 <a href="https://git-scm.com/" target="_blank" rel="noreferrer">git官网</a>，下载 git 对应操作系统的版本。</p><h3 id="启动-git" tabindex="-1">启动 Git <a class="header-anchor" href="#启动-git" aria-label="Permalink to &quot;启动 Git&quot;">​</a></h3><p>安装成功后在开始菜单中会有 Git 项，菜单下有 3 个程序：任意文件夹下右键也可以看到对应的程序！</p><ul><li><strong>Git Bash</strong>：Unix 与 Linux 风格的命令行，使用最多，推荐最多</li><li><strong>Git CMD</strong>：Windows 风格的命令行</li><li><strong>Git GUI</strong>：图形界面的 Git，不建议初学者使用，尽量先熟悉常用命令</li></ul><h3 id="常用的-linux-命令" tabindex="-1">常用的 Linux 命令 <a class="header-anchor" href="#常用的-linux-命令" aria-label="Permalink to &quot;常用的 Linux 命令&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:center;">命令</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><code>cd</code></td><td style="text-align:left;">改变目录。</td></tr><tr><td style="text-align:center;"><code>cd ..</code></td><td style="text-align:left;">回退到上一个目录，直接 cd 进入默认目录</td></tr><tr><td style="text-align:center;"><code>pwd</code></td><td style="text-align:left;">显示当前所在的目录路径。</td></tr><tr><td style="text-align:center;"><code>ls(ll)</code></td><td style="text-align:left;">都是列出当前目录中的所有文件，只不过 ll(两个 ll) 列出的内容更为详细。</td></tr><tr><td style="text-align:center;"><code>touch </code></td><td style="text-align:left;">新建一个文件 如 touch index.js 就会在当前目录下新建一个 index.js 文件。</td></tr><tr><td style="text-align:center;"><code>rm</code></td><td style="text-align:left;">删除一个文件, rm index.js 就会把 index.js 文件删除。</td></tr><tr><td style="text-align:center;"><code>mkdir</code></td><td style="text-align:left;">新建一个目录,就是新建一个文件夹。</td></tr><tr><td style="text-align:center;"><code>rm -r </code></td><td style="text-align:left;">删除一个文件夹, rm -r src 删除 src 目录</td></tr><tr><td style="text-align:center;"><code>rm -rf / </code></td><td style="text-align:left;">切勿在 Linux 中尝试！删除电脑中全部文件！</td></tr><tr><td style="text-align:center;"><code>mv</code></td><td style="text-align:left;">移动文件, mv index.html src index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下。</td></tr><tr><td style="text-align:center;"><code>reset</code></td><td style="text-align:left;">重新初始化终端/清屏。</td></tr><tr><td style="text-align:center;"><code>clear </code></td><td style="text-align:left;">清屏。</td></tr><tr><td style="text-align:center;"><code>history</code></td><td style="text-align:left;">查看命令历史。</td></tr><tr><td style="text-align:center;"><code>help</code></td><td style="text-align:left;">帮助。</td></tr><tr><td style="text-align:center;"><code>exit </code></td><td style="text-align:left;">退出。</td></tr></tbody></table><h3 id="git-配置" tabindex="-1">Git 配置 <a class="header-anchor" href="#git-配置" aria-label="Permalink to &quot;Git 配置&quot;">​</a></h3><ul><li><p>查看配置</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看所有配置</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#查看系统config</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --system</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --list</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#查看当前用户（global）配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --list</span></span></code></pre></div></li></ul><p><img src="`+n+`" alt=""></p><ul><li><p>Git 相关的配置文件存放路径<br> 1. 系统配置：Git 安装目录下的 gitconfig <code>Git\\etc\\gitconfig</code><br> 2. 用户 (global) 配置：<code>C:\\Users\\Administrator\\ .gitconfig</code></p></li><li><p>设置用户名与邮箱（用户标识，必要）<br> 当你安装 Git 后首先要做的事情是设置你的用户名称和 e-mail 地址。这是非常重要的，因为每次 Git 提交都会使用该信息。它被永远的嵌入到了你的提交中：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;kuangshen&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #名称  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.email</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 24736743@qq.com</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   #邮箱</span></span></code></pre></div><p>只需要做一次这个设置，如果你传递了 --global 选项，因为 Git 将总是会使用该信息来处理你在系统中所做的一切操作。如果你希望在一个特定的项目中使用不同的名称或 e-mail 地址，你可以在该项目中运行该命令而不要 --global 选项。总之 --global 为全局配置，不加为某个项目的特定配置。</p></li></ul><h2 id="三、git-基本理论-核心" tabindex="-1">三、Git 基本理论（核心） <a class="header-anchor" href="#三、git-基本理论-核心" aria-label="Permalink to &quot;三、Git 基本理论（核心）&quot;">​</a></h2><h3 id="三个区域" tabindex="-1">三个区域 <a class="header-anchor" href="#三个区域" aria-label="Permalink to &quot;三个区域&quot;">​</a></h3><p>Git 本地有三个工作区域：工作目录（Working Directory）、暂存区 (Stage/Index)、资源库 (Repository 或 Git Directory)。如果在加上远程的 git 仓库 (Remote Directory) 就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：</p><p><img src="`+e+`" alt=""></p><ul><li>Workspace：工作区，就是你平时存放项目代码的地方</li><li>Index / Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li><li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中 HEAD 指向最新放入仓库的版本</li><li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li></ul><h3 id="工作流程" tabindex="-1">工作流程 <a class="header-anchor" href="#工作流程" aria-label="Permalink to &quot;工作流程&quot;">​</a></h3><ul><li><p>git 的工作流程一般是这样的：</p><ol><li>在工作目录中添加、修改文件；</li><li>将需要进行版本管理的文件放入暂存区域；</li><li>将暂存区域的文件提交到 git 仓库。</li></ol></li><li><p>因此，git 管理的文件有三种状态：</p><ol><li>已修改（modified）</li><li>已暂存（staged）</li><li>已提交 (committed)</li></ol></li></ul><h2 id="四、git-项目搭建" tabindex="-1">四、Git 项目搭建 <a class="header-anchor" href="#四、git-项目搭建" aria-label="Permalink to &quot;四、Git 项目搭建&quot;">​</a></h2><p>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库。</p><ul><li><p>本地仓库搭建<br> 1. 创建全新的仓库，需要用 GIT 管理的项目的根目录执行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在当前目录新建一个Git代码库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span></code></pre></div><ol><li>执行后可以看到，仅仅在项目目录多出了一个.git 目录，关于版本等的所有信息都在这个目录里面。<br><img src="`+h+`" alt=""></li></ol></li><li><p>克隆远程仓库</p><p>另一种方式是克隆远程目录，由于是将远程服务器上的仓库完全镜像一份至本地。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 克隆一个项目和它的整个代码历史 (版本信息)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [url]</span></span></code></pre></div></li></ul><h2 id="五、git-操作" tabindex="-1">五、Git 操作 <a class="header-anchor" href="#五、git-操作" aria-label="Permalink to &quot;五、Git 操作&quot;">​</a></h2><h3 id="文件的四种状态" tabindex="-1">文件的四种状态 <a class="header-anchor" href="#文件的四种状态" aria-label="Permalink to &quot;文件的四种状态&quot;">​</a></h3><ul><li>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到 git 库, 不参与版本控制. 通过 <code>git add</code> 状态变为 Staged.</li><li>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为 Modified. 如果使用 <code>git rm</code> 移出版本库, 则成为 Untracked 文件</li><li>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过 <code>git add</code> 可进入暂存 staged 状态, 使用 git checkout 则丢弃修改过, 返回到 unmodify 状态, 这个 git checkout 即从库中取出文件, 覆盖当前修改 !</li><li>Staged: 暂存状态. 执行 <code>git commit</code> 则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为 Unmodify 状态。执行 git reset HEAD filename 取消暂存, 文件状态为 Modified</li></ul><h3 id="查看文件状态" tabindex="-1">查看文件状态 <a class="header-anchor" href="#查看文件状态" aria-label="Permalink to &quot;查看文件状态&quot;">​</a></h3><p>上面说文件有 4 种状态，通过如下命令可以查看到文件的状态：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#查看指定文件状态</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [filename]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#查看所有文件状态</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># git add .                  添加所有文件到暂存区</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># git commit -m &quot;消息内容&quot;    提交暂存区中的内容到本地仓库 -m 提交信息</span></span></code></pre></div><p><img src="`+p+`" alt=""></p><h3 id="忽略文件" tabindex="-1">忽略文件 <a class="header-anchor" href="#忽略文件" aria-label="Permalink to &quot;忽略文件&quot;">​</a></h3><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等。</p><p>在主目录下建立 &quot;<code>.gitignore</code>&quot; 文件，此文件有如下规则：</p><ol><li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li><li>可以使用 Linux 通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,...}）代表可选的字符串等。</li><li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li><li>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li><li>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li></ol><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>*.txt        #忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span></span>
<span class="line"><span>!lib.txt     #但lib.txt除外</span></span>
<span class="line"><span>/temp        #仅忽略项目根目录下的TODO文件,不包括其它目录temp</span></span>
<span class="line"><span>build/       #忽略build/目录下的所有文件</span></span>
<span class="line"><span>doc/*.txt    #会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span></span></code></pre></div><h3 id="分支-branch" tabindex="-1">分支 branch <a class="header-anchor" href="#分支-branch" aria-label="Permalink to &quot;分支 branch&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 列出所有本地分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 列出所有远程分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 新建一个分支，但依然停留在当前分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [branch-name]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 新建一个分支，并切换到该分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [branch]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 合并指定分支到当前分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [branch]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [branch-name]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除远程分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [branch-name]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -dr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [remote/branch]</span></span></code></pre></div><h2 id="六、github-gitee-托管" tabindex="-1">六、GitHub/Gitee 托管 <a class="header-anchor" href="#六、github-gitee-托管" aria-label="Permalink to &quot;六、GitHub/Gitee 托管&quot;">​</a></h2><ul><li><p>注册<br><a href="https://github.com/" title="GitHub" target="_blank" rel="noreferrer">GitHub</a><br><a href="https://gitee.com/" title="Gitee - 企业级 DevOps 研发效能平台" target="_blank" rel="noreferrer">Gitee - 企业级 DevOps 研发效能平台</a></p></li><li><p>SSH 公钥<br> 设置本机绑定 SSH 公钥，实现免密码登录。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 进入 C:\\Users\\Administrator\\.ssh 目录</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 生成公钥</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ssh-keygen</span></span></code></pre></div></li></ul><p><img src="`+r+'" alt=""></p><p>将公钥信息 public key 添加到 GitHub 或 Gitee 账户中即可。</p><ul><li><p>创建仓库</p><p><img src="'+d+`" alt=""></p><ul><li>仓库类型<br> public 公开，需要配置许可证<br> private 私有</li></ul></li><li><p>仓库管理<br> 使用 <code>git remote</code> 命令管理仓库</p><div class="language-SH vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">SH</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加一个远端仓库。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [-t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">branc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [-m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">maste</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [-f] [--[no-]tags] [--mirror</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fetch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">push)] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">URL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看关联仓库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span></code></pre></div></li><li><p>推送 push/拉取 pull</p><div class="language-SH vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">SH</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 推送最新 commit 到仓库。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 拉取仓库到 commit。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span></span></code></pre></div></li></ul><h2 id="七、常用命令" tabindex="-1">七、常用命令 <a class="header-anchor" href="#七、常用命令" aria-label="Permalink to &quot;七、常用命令&quot;">​</a></h2><p>参考 git 文档<br><a href="https://git-scm.com/docs" target="_blank" rel="noreferrer">Git - Reference</a><br><a href="https://ndpsoftware.com/git-cheatsheet.html#loc=local_repo" target="_blank" rel="noreferrer">NDP SoftwareGit Cheatsheet</a></p>`,58)]))}const C=s(k,[["render",o]]);export{m as __pageData,C as default};
