import{_ as i,c as a,o as t,ag as l}from"./chunks/framework.-ewJmwvT.js";const n="/obsidian-vitepress-docs/assets/c29a881306a84693bd40440b4a29d46b~tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0.B6o0Oz3r.webp",g=JSON.parse('{"title":"居中的若干方法","description":"","frontmatter":{},"headers":[],"relativePath":"前端技术/02 CSS/02 CSS进阶/核心布局/居中的若干方法.md","filePath":"前端技术/02 CSS/02 CSS进阶/核心布局/居中的若干方法.md"}'),e={name:"前端技术/02 CSS/02 CSS进阶/核心布局/居中的若干方法.md"};function h(p,s,k,r,d,E){return t(),a("div",null,s[0]||(s[0]=[l('<h1 id="居中的若干方法" tabindex="-1">居中的若干方法 <a class="header-anchor" href="#居中的若干方法" aria-label="Permalink to &quot;居中的若干方法&quot;">​</a></h1><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>仅居中元素定宽高适用：</p><ul><li>absolute + 负 margin</li><li>absolute + margin auto</li><li>absolute + calc</li></ul><p>居中元素不定宽高：</p><ul><li>absolute + transform</li><li>lineheight</li><li>writing-mode</li><li>table</li><li>css-table</li><li>flex</li><li>grid</li></ul><h2 id="行内元素" tabindex="-1">行内元素 <a class="header-anchor" href="#行内元素" aria-label="Permalink to &quot;行内元素&quot;">​</a></h2><p>行内元素也称为内联元素，这些元素以行内的形式显示在页面上，它们不会独占一行，而是在同一行上与其他元素并排显示。 行内元素的宽度和高度默认由其内容决定，无法设置宽度和高度。<br> 因此，行内元素的水平与垂直居中可以通过其父元素的以下几个属性进行设置。</p><h3 id="text-align" tabindex="-1">text-align <a class="header-anchor" href="#text-align" aria-label="Permalink to &quot;text-align&quot;">​</a></h3><p>父元素的 text-align 可以定义其下行内元素的排布方式，center 默认为<strong>水平居中</strong><br><code>text-align:center</code></p><h3 id="line-height" tabindex="-1">line-height <a class="header-anchor" href="#line-height" aria-label="Permalink to &quot;line-height&quot;">​</a></h3><p>当父元素的 line-height 等于其 height 时（或者 height 未定义被撑开），行高等于盒子高度，行内即可实现<strong>垂直居中</strong>。<br><code>line-height:(height)</code><br><strong>使用时需要注意行内元素行溢出的问题。</strong></p><blockquote><p><code>writing-mode</code> 可以改变文字的显示方向，类似与 flex 布局的主轴与副轴，默认情况是水平靠左开始。如设置为垂直排布后，text-align 对应的则为垂直居中，line-height 等于 width 对应的才是水平居中。</p></blockquote><h3 id="vertical-align" tabindex="-1">vertical-align <a class="header-anchor" href="#vertical-align" aria-label="Permalink to &quot;vertical-align&quot;">​</a></h3><p>vertical-align 设置的是行内元素的垂直对齐方式，用来定义行内元素的基线相对于该元素所在行的基线的垂直对齐。<br> --baseline(默认): 使元素的基线与父元素的基线对齐<br> --middle：使元素的中部与父元素的基线加上父元素字母 x 的一半对齐<br> --top：使元素的顶部与其所在行的顶部对齐<br> --bottom：使元素底部与所在行的底部对齐<br> 当行内元素有 img、input 等非文字元素的时候，它们的基线也是它们的底部，这就是为什么居中效果失效的原因。<br> 此时可以给这些非文字元素赋予 <code>vertical-align:middle</code> 属性，即可实现<strong>垂直居中</strong>效果。<br><img src="'+n+`" alt="c29a881306a84693bd40440b4a29d46btplv-k3u1fbpfcp-zoom-in-crop-mark1512000.webp"></p><h2 id="块状元素" tabindex="-1">块状元素 <a class="header-anchor" href="#块状元素" aria-label="Permalink to &quot;块状元素&quot;">​</a></h2><h3 id="margin" tabindex="-1">margin <a class="header-anchor" href="#margin" aria-label="Permalink to &quot;margin&quot;">​</a></h3><p>块状元素的水平居中可以利用 margin 进行限位。</p><h2 id="不定宽高通用" tabindex="-1">不定宽高通用 <a class="header-anchor" href="#不定宽高通用" aria-label="Permalink to &quot;不定宽高通用&quot;">​</a></h2><h3 id="absolute-位移方法" tabindex="-1">absolute + 位移方法 <a class="header-anchor" href="#absolute-位移方法" aria-label="Permalink to &quot;absolute + 位移方法&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">absolute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">translate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">calc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">calc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>transform<br> 负 margin<br> margin auto<br> calc() 函数</p><h3 id="flex" tabindex="-1">flex <a class="header-anchor" href="#flex" aria-label="Permalink to &quot;flex&quot;">​</a></h3><p><a href="./Flex布局.html">Flex布局</a><br> 可以利用弹性布局 flex，实现水平垂直居中：<br><code>justify-content</code> ：设置弹性盒子元素在主轴（横轴）方向上的对齐方式<br><code>align-items</code>：设置纵轴方向上的对齐方式</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	align-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>当 flex 布局有多个子项时，如何实现各个子项的居中呢？</p><ol><li>可以给子项容器设置 <code>margin:auto</code>，子项将自动响应式的占满盒子，效果类似于 justify-content:space-around（但不会占满盒子）。</li><li>定义单独子项的的垂直排列方式，配合 justify-content：<br><code>align-self:center</code></li></ol><h3 id="grid" tabindex="-1">grid <a class="header-anchor" href="#grid" aria-label="Permalink to &quot;grid&quot;">​</a></h3><p><a href="./Grid布局.html">Grid布局</a><br> 利用网格布局 grid，也可实现水平垂直居中，<strong>目前兼容性较差</strong>。<br><code>justify-content</code> 属性是整个内容区域在容器里面的水平位置（左中右）<br><code>align-content</code> 属性是整个内容区域的垂直位置（上中下）。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">grid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	align-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>当有多个子项时：<br> 同样的可以使用 <code>margin:auto</code></p><p>也可以设置对应子项的排列方式：<br><code>justify-items</code> 属性设置单元格内容的水平位置（左中右），为父容器属性<br><code>align-items</code> 属性设置单元格内容的垂直位置（上中下），为父容器属性</p><p><code>justify-self</code> 属性设置单元格内容的水平位置（左中右），跟 <code>justify-items</code> 属性的用法完全一致，但只作用于单个项目。<br><code>align-self</code> 属性设置单元格内容的垂直位置（上中下），跟 <code>align-items</code> 属性的用法完全一致，也是只作用于单个项目。~</p><h3 id="table" tabindex="-1">table <a class="header-anchor" href="#table" aria-label="Permalink to &quot;table&quot;">​</a></h3><p>使用表格布局（Table Layout）可以实现元素的居中布局。虽然表格布局在现代响应式布局中不常用，但在某些特定情况下仍然可以作为一种解决方案。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">table</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;box5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">tbody</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">tr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">td</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;这是一个div&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">td</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">tr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">tbody</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>tabel 单元格中的内容天然就是垂直居中的，只要添加一个水平居中属性就好:<br><code>text-align: center</code></p><p>这种方法代码太冗余，也不是 table 的正确用法。</p>`,38)]))}const c=i(e,[["render",h]]);export{g as __pageData,c as default};
