import{_ as i,c as a,o as e,ag as l}from"./chunks/framework.-ewJmwvT.js";const n="/obsidian-vitepress-docs/assets/Redis-1.OZA5eM0U.png",t="/obsidian-vitepress-docs/assets/Redis-2.B9nCxbLn.png",p="/obsidian-vitepress-docs/assets/Redis-3.v7R0RZud.png",y=JSON.parse('{"title":"Redis","description":"","frontmatter":{},"headers":[],"relativePath":"服务端/数据库/Redis/Redis.md","filePath":"服务端/数据库/Redis/Redis.md"}'),h={name:"服务端/数据库/Redis/Redis.md"};function k(d,s,o,c,r,g){return e(),a("div",null,s[0]||(s[0]=[l(`<h1 id="redis" tabindex="-1">Redis <a class="header-anchor" href="#redis" aria-label="Permalink to &quot;Redis&quot;">​</a></h1><p>Redis（Remote Dictionary Server）是一个开源的内存数据结构存储系统，它提供了一个高效的键值存储解决方案，并支持多种数据结构，如字符串（Strings）、哈希（Hashes）、列表（Lists）、集合（Sets）和有序集合（Sorted Sets）等。它被广泛应用于缓存、消息队列、实时统计等场景。</p><p>以下是一些关键特性和用途介绍：</p><ol><li>内存存储：Redis 主要将数据存储在内存中，因此具有快速的读写性能。它可以持久化数据到磁盘，以便在重新启动后恢复数据。</li><li>多种数据结构：Redis 不仅仅是一个简单的键值存储，它支持多种数据结构，如字符串、哈希、列表、集合和有序集合。这些数据结构使得 Redis 能够更灵活地存储和操作数据。</li><li>发布/订阅：Redis 支持发布/订阅模式，允许多个客户端订阅一个或多个频道，以接收实时发布的消息。这使得 Redis 可以用作实时消息系统。</li><li>事务支持：Redis 支持事务，可以将多个命令打包成一个原子操作执行，确保这些命令要么全部执行成功，要么全部失败。</li><li>持久化：Redis 提供了两种持久化数据的方式：RDB（Redis Database）和 AOF（Append Only File）。RDB 是将数据以快照形式保存到磁盘，而 AOF 是将每个写操作追加到文件中。这些机制可以确保数据在意外宕机或重启后的持久性。</li><li>高可用性：Redis 支持主从复制和 Sentinel 哨兵机制。通过主从复制，可以创建多个 Redis 实例的副本，以提高读取性能和容错能力。Sentinel 是一个用于监控和自动故障转移的系统，它可以在主节点宕机时自动将从节点提升为主节点。</li><li>缓存：由于 Redis 具有快速的读写性能和灵活的数据结构，它被广泛用作缓存层。它可以将常用的数据存储在内存中，以加快数据访问速度，减轻后端数据库的负载。</li><li>实时统计：Redis 的计数器和有序集合等数据结构使其非常适合实时统计场景。它可以存储和更新计数器，并对有序集合进行排名和范围查询，用于统计和排行榜功能</li></ol><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><div class="note custom-block github-alert"><p class="custom-block-title">Title</p><p><a href="https://redis.io/" target="_blank" rel="noreferrer">Redis - The Real-time Data Platform</a></p></div><ul><li>window: <ol><li>安装包 <a href="https://github.com/redis-windows/redis-windows" target="_blank" rel="noreferrer">redis-windows/redis-windows: Redis 6.0.20 6.2.14 7.0.15 7.2.4 7.4.0 for Windows</a></li><li>依照官网 wls 方式</li></ol></li><li>mac: <code>brew install redis</code> 启动 redis redis-server 连接 redis redis-cli</li><li>linux: <code>wget https://download.redis.io/redis-stable.tar.gz</code></li></ul><p>配置环境变量</p><p>添加到 windows 服务 (非必须)</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sc.exe</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Redis</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> binpath=C:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">oftware</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\R</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">edis</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\R</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">edisService.exe</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> auto</span></span></code></pre></div><p>powershell 启动</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./redis-server.exe</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis.conf</span></span></code></pre></div><p>cmd</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis-server.exe</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis.conf</span></span></code></pre></div><p>可视化工具 Vscode 扩展 <code>Database Client</code></p><p>进入命令行工具</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis-cli</span></span></code></pre></div><h2 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-label="Permalink to &quot;基本使用&quot;">​</a></h2><h3 id="字符串操作" tabindex="-1">字符串操作 <a class="header-anchor" href="#字符串操作" aria-label="Permalink to &quot;字符串操作&quot;">​</a></h3><p>设置语法：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [NX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">XX]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [EX </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">seconds]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [PX </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">milliseconds]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [GET]</span></span></code></pre></div><ul><li><code>key</code>：要设置的键名。</li><li><code>value</code>：要设置的值。</li><li><code>NX</code>：可选参数，表示只在键不存在时才设置值。</li><li><code>XX</code>：可选参数，表示只在键已经存在时才设置值。</li><li><code>EX seconds</code>：可选参数，将键的过期时间设置为指定的秒数。</li><li><code>PX milliseconds</code>：可选参数，将键的过期时间设置为指定的毫秒数。</li><li><code>GET</code>：可选参数，返回键的旧值。</li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 键名name设为小明</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;小明&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置键名为 &quot;counter&quot; 的值为 10，并设置过期时间为 60 秒</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> counter</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> EX</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 只在键名为 &quot;status&quot; 不存在时，设为 &quot;active&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;active&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NX</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 只在键名为 &quot;score&quot; 已经存在时，设为 5</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> score</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> XX</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置键名为 &quot;message&quot; 的值为 &quot;Hello&quot;，并返回旧的值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> message</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GET</span></span></code></pre></div><p>删除语法：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除键名为&quot;name&quot;的键，返回1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DEL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 批量删除多个键名，返回删除的个数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DEL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除不存在的键名，不会报错，返回删除的键数量为0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DEL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> non_existing_key</span></span></code></pre></div><h3 id="集合操作" tabindex="-1">集合操作 <a class="header-anchor" href="#集合操作" aria-label="Permalink to &quot;集合操作&quot;">​</a></h3><p>集合（Set）是一种无序且不重复的数据结构，用于存储一组独立的元素。集合中的元素之间没有明确的顺序关系，每个元素在集合中只能出现一次。</p><ol><li><p>添加成员到集合：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SADD</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> member</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [member </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">...]</span></span></code></pre></div></li><li><p>获取集合中的所有成员：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SMEMBERS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span></span></code></pre></div></li><li><p>检查成员是否存在于集合中。如有返回 1，没有返回 0：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SISMEMBER</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> member</span></span></code></pre></div></li><li><p>从集合中移除成员。如有返回 1，没有返回 0：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SREM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> member</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [member </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">...]</span></span></code></pre></div></li><li><p>获取集合中的成员数量：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SCARD</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span></span></code></pre></div></li><li><p>获取随机成员：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SRANDMEMBER</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [count]</span></span></code></pre></div></li><li><p>求多个集合的并集：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SUNION</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [key </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">...]</span></span></code></pre></div></li><li><p>求多个集合的交集：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SINTER</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [key </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">...]</span></span></code></pre></div></li><li><p>求多个集合的差集：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SDIFF</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [key </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">...]</span></span></code></pre></div></li></ol><h3 id="哈希表操作" tabindex="-1">哈希表操作 <a class="header-anchor" href="#哈希表操作" aria-label="Permalink to &quot;哈希表操作&quot;">​</a></h3><p>哈希表（Hash）是一种数据结构，也称为字典、关联数组或映射，用于存储键值对集合。在哈希表中，键和值都是存储的数据项，并通过哈希函数将键映射到特定的存储位置，从而实现快速的数据访问和查找。</p><ol><li><p>设置哈希表中的字段值：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HSET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> field</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> value</span></span></code></pre></div></li><li><p>获取哈希表中的字段值：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HGET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> field</span></span></code></pre></div></li><li><p>一次设置多个字段的值：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HMSET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> field</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [field </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...]</span></span></code></pre></div></li><li><p>获取多个字段的值：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HMGET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> field</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [field </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">...]</span></span></code></pre></div></li><li><p>获取哈希表中所有字段和值：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HGETALL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span></span></code></pre></div></li><li><p>删除哈希表中的字段：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HDEL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> field</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [field </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">...]</span></span></code></pre></div></li><li><p>检查哈希表中是否存在指定字段。如有返回 1，没有返回 0：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HEXISTS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> field</span></span></code></pre></div></li><li><p>获取哈希表中所有的字段：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HKEYS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span></span></code></pre></div></li><li><p>获取哈希表中所有的值：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HVALS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span></span></code></pre></div></li><li><p>获取哈希表中字段的数量：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HLEN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span></span></code></pre></div></li></ol><h3 id="列表操作" tabindex="-1">列表操作 <a class="header-anchor" href="#列表操作" aria-label="Permalink to &quot;列表操作&quot;">​</a></h3><p>列表（List）是一种有序、可变且可重复的数据结构。在许多编程语言和数据存储系统中，列表是一种常见的数据结构类型，用于存储一组元素</p><ol><li><p>添加元素：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将元素从右侧插入列表</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RPUSH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> element1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> element2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> element3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将元素从左侧插入列表</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LPUSH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> element1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> element2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> element3</span></span></code></pre></div><ul><li><code>LPUSH key element1 element2 ...</code>：将一个或多个元素从列表的左侧插入，即将元素依次插入列表的 ==头部==。如果列表不存在，则在执行操作前会自动创建一个新的列表。</li><li><code>RPUSH key element1 element2 ...</code>：将一个或多个元素从列表的右侧插入，即将元素依次插入列表的 ==尾部==。如果列表不存在，则在执行操作前会自动创建一个新的列表。</li></ul></li><li><p>获取元素：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取列表中指定索引位置的元素</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LINDEX</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取列表中指定范围内的元素</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LRANGE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span></span></code></pre></div></li><li><p>修改元素：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 修改列表中指定索引位置的元素的值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LSET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> newValue</span></span></code></pre></div></li><li><p>删除元素：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 从列表的左侧移除并返回第一个元素</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LPOP</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 从列表的右侧移除并返回最后一个元素 </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RPOP</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 从列表中删除指定数量的指定值元素</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LREM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> count</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> value</span></span></code></pre></div></li><li><p>获取列表长度：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LLEN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span></span></code></pre></div></li></ol><h2 id="redis-发布订阅" tabindex="-1">redis 发布订阅 <a class="header-anchor" href="#redis-发布订阅" aria-label="Permalink to &quot;redis 发布订阅&quot;">​</a></h2><p>发布 - 订阅是一种消息传递模式，其中消息发布者（发布者）将消息发送到频道（channel），而订阅者（订阅者）可以订阅一个或多个频道以接收消息。这种模式允许消息的解耦，发布者和订阅者之间可以独立操作，不需要直接交互。</p><p>在 Redis 中，发布 - 订阅模式通过以下命令进行操作：</p><ol><li><p>PUBLISH 命令：用于将消息发布到指定的频道。</p><ul><li>语法为：<code>PUBLISH channel message</code></li><li>例如，PUBLISH news &quot;Hello, world!&quot; 将消息 &quot;Hello, world!&quot; 发布到名为 &quot;news&quot; 的频道。</li></ul></li><li><p>SUBSCRIBE 命令：用于订阅一个或多个频道。</p><ul><li>语法为：<code>SUBSCRIBE channel [channel ...]</code></li><li>例如，SUBSCRIBE news sports 订阅了名为 &quot;news&quot; 和 &quot;sports&quot; 的频道。</li></ul></li><li><p>UNSUBSCRIBE 命令：用于取消订阅一个或多个频道。</p><ul><li>语法为：<code>UNSUBSCRIBE [channel [channel ...]]</code></li><li>例如，UNSUBSCRIBE news 取消订阅名为 &quot;news&quot; 的频道。</li></ul></li><li><p>PSUBSCRIBE 命令：用于模式订阅一个或多个匹配的频道。</p><ul><li>语法为：<code>PSUBSCRIBE pattern [pattern ...]</code></li><li>其中，pattern 可以包含通配符。</li><li>例如，PSUBSCRIBE news.* 订阅了以 &quot;news.&quot; 开头的所有频道。</li></ul></li><li><p>PUNSUBSCRIBE 命令：用于取消模式订阅一个或多个匹配的频道。</p><ul><li>语法为：<code>PUNSUBSCRIBE [pattern [pattern ...]]</code></li><li>例如，PUNSUBSCRIBE news.* 取消订阅以 &quot;news.&quot; 开头的所有频道。</li></ul></li></ol><h2 id="事务" tabindex="-1">事务 <a class="header-anchor" href="#事务" aria-label="Permalink to &quot;事务&quot;">​</a></h2><p>Redis 支持事务（Transaction），它允许用户将多个命令打包在一起作为一个单元进行执行。事务提供了一种原子性操作的机制，要么所有的命令都执行成功，要么所有的命令都不执行。</p><p>Redis 的事务使用 MULTI、EXEC、WATCH 和 DISCARD 等命令来管理。</p><ol><li>MULTI 命令：用于开启一个事务。在执行 MULTI 命令后，Redis 会将接下来的命令都添加到事务队列中，而不是立即执行。</li><li>EXEC 命令：用于执行事务中的所有命令。当执行 EXEC 命令时，Redis 会按照事务队列中的顺序执行所有的命令。执行结果以数组的形式返回给客户端。</li><li>WATCH 命令：用于对一个或多个键进行监视。如果在事务执行之前，被监视的键被修改了，事务将被中断，不会执行。</li><li>DISCARD 命令：用于取消事务。当执行 DISCARD 命令时，所有在事务队列中的命令都会被清空，事务被取消。</li></ol><p>使用事务的基本流程如下：</p><ol><li>使用 MULTI 命令开启一个事务。</li><li>将需要执行的命令添加到事务队列中。</li><li>如果需要，使用 WATCH 命令监视键。</li><li>执行 EXEC 命令执行事务。Redis 会按照队列中的顺序执行命令，并返回执行结果。</li><li>根据返回结果判断事务执行是否成功。</li></ol><p>事务中的命令在执行之前不会立即执行，而是在执行 EXEC 命令时才会被执行。这意味着事务期间的命令并不会阻塞其他客户端的操作，也不会中断其他客户端对键的读写操作。</p><p>需要注意的是，==Redis 的事务不支持回滚操作==。如果在事务执行期间发生错误，事务会继续执行，而不会回滚已执行的命令。==因此，在使用 Redis 事务时，需要保证事务中的命令是幂等的，即多次执行命令的结果和一次执行的结果相同==。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 连接Redis</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis-cli</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 开启事务</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MULTI</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加命令到事务队列</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> value1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行事务</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EXEC</span></span></code></pre></div><h2 id="redis-持久化" tabindex="-1">redis 持久化 <a class="header-anchor" href="#redis-持久化" aria-label="Permalink to &quot;redis 持久化&quot;">​</a></h2><p>Redis 提供两种持久化方式：</p><ol><li>RDB（Redis Database）持久化：==RDB 是一种快照的形式==，它会将内存中的数据定期保存到磁盘上。可以通过配置 Redis 服务器，设置自动触发 RDB 快照的条件，比如在指定的时间间隔内，或者在指定的写操作次数达到一定阈值时进行快照保存。RDB 持久化生成的快照文件是一个二进制文件，包含了 Redis 数据的完整状态。在恢复数据时，可以通过加载快照文件将数据重新加载到内存中。</li><li>AOF（Append-Only File）持久化：==AOF 持久化记录了 Redis 服务器执行的所有写操作命令，在文件中以追加的方式保存==。当 Redis 需要重启时，可以重新执行 AOF 文件中保存的命令，以重新构建数据集。相比于 RDB 持久化，AOF 持久化提供了更好的数据恢复保证，因为它记录了每个写操作，而不是快照的形式。然而，AOF 文件相对于 RDB 文件更大，恢复数据的速度可能会比较慢。</li></ol><p>RDB 使用</p><ul><li><p>打开 redis 配置文件</p></li><li><p>找到 save<br><img src="`+n+'" alt=""></p></li><li><p>三个案例</p><ol><li>3600 秒内也就是一小时进行一次改动就会触发快照</li><li>300 秒内也就是 5 分钟，进行 100 次修改就会进行快照</li><li>60 秒内一万次修改就会进行快照</li></ol></li><li><p>具体场景需要根据你的用户量，以及负载情况自己定义。</p></li><li><p>其次就是可以通过 <code>save</code> 命令行手动触发快照</p></li></ul><p>AOF 使用</p><ul><li>打开 redis 配置文件</li><li>将 <code>appendonly</code> 配置项的值设置为 <code>yes</code>：默认情况下，该配置项的值为 <code>no</code>，表示未启用 AOF 持久化。将其值修改为 <code>yes</code>，以启用 AOF 持久化。<br><img src="'+t+'" alt=""></li></ul><h2 id="redis-主从复制" tabindex="-1">redis 主从复制 <a class="header-anchor" href="#redis-主从复制" aria-label="Permalink to &quot;redis 主从复制&quot;">​</a></h2><p>Redis 主从复制是一种数据复制和同步机制，其中一个 Redis 服务器（称为主服务器）将其数据复制到一个或多个其他 Redis 服务器（称为从服务器）。主从复制提供了数据冗余备份、读写分离和故障恢复等功能。<br><img src="'+p+`" alt=""></p><p>以下是 Redis 主从复制的一般工作流程：</p><ol><li>配置主服务器：在主服务器上，你需要在配置文件中启用主从复制并指定从服务器的 IP 地址和端口号。你可以使用 <code>replicaof</code> 配置选项或 <code>slaveof</code> 配置选项来指定从服务器。</li><li>连接从服务器：从服务器连接到主服务器并发送复制请求。从服务器通过发送 <code>SYNC</code> 命令请求进行全量复制或通过发送 <code>PSYNC</code> 命令请求进行部分复制（增量复制）。</li><li>全量复制（SYNC）：如果从服务器是第一次连接或无法执行部分复制，主服务器将执行全量复制。在全量复制期间，主服务器将快照文件（RDB 文件）发送给从服务器，从服务器将接收并加载该文件以完全复制主服务器的数据。</li><li>部分复制（PSYNC）：如果从服务器已经执行过全量复制并建立了复制断点，主服务器将执行部分复制。在部分复制期间，主服务器将发送增量复制流（replication stream）给从服务器，从服务器将接收并应用该流以保持与主服务器的同步。</li><li>复制持久化：从服务器接收到数据后，会将其保存在本地磁盘上，以便在重启后仍然保持数据的一致性。</li><li>同步延迟：从服务器的复制是异步的，因此存在复制延迟。延迟取决于网络延迟、主服务器的负载和从服务器的性能等因素。</li><li>读写分离：一旦建立了主从复制关系，从服务器可以接收读操作。这使得可以将读流量从主服务器分散到从服务器上，从而减轻主服务器的负载。</li><li>故障恢复：如果主服务器发生故障，可以将一个从服务器提升为新的主服务器，以继续提供服务。当主服务器恢复时，它可以作为从服务器连接到新的主服务器，继续进行数据复制。</li></ol><p>具体步骤：</p><ol><li><p>建立主从服务器配置文件<br> 在根目录下面新建一个 redis-6378.conf 配置文件 作为 redis 从服务器，设置不同的端口，指定主服务器。默认的配置文件 6379 作为 主服务器。</p><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>bind 127.0.0.1 #ip地址 </span></span>
<span class="line"><span>port 6378 #端口号 </span></span>
<span class="line"><span>daemonize yes #守护线程静默运行 </span></span>
<span class="line"><span>replicaof 127.0.0.1 6379 #指定主服务器</span></span></code></pre></div></li><li><p>启动从服务器</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis-server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./redis-6378.conf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 指定配置文件</span></span></code></pre></div></li><li><p>打开从服务器 cli</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis-cli</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6378</span></span></code></pre></div></li><li><p>启动主服务器</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis-cli</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 直接启动默认就是主服务器的配置文件</span></span></code></pre></div></li><li><p>主服务器写入一个值</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span></code></pre></div></li><li><p>从服务器直接同步过来这个值 就可以直接获取到</p></li></ol><blockquote><p>注意：<br> ==从服务器是不允许写入的操作==</p></blockquote>`,61)]))}const u=i(h,[["render",k]]);export{y as __pageData,u as default};
