import{_ as i,c as t,o as e,ae as a}from"./chunks/framework.CIivgcbp.js";const d=JSON.parse('{"title":"27-WebSocket-socket.io","description":"","frontmatter":{},"headers":[],"relativePath":"服务端/NodeJS/NodeJS笔记/27-WebSocket-socket.io.md","filePath":"服务端/NodeJS/NodeJS笔记/27-WebSocket-socket.io.md"}'),o={name:"服务端/NodeJS/NodeJS笔记/27-WebSocket-socket.io.md"};function k(l,s,n,h,p,c){return e(),t("div",null,s[0]||(s[0]=[a(`<h1 id="_27-websocket-socket-io" tabindex="-1">27-WebSocket-socket.io <a class="header-anchor" href="#_27-websocket-socket-io" aria-label="Permalink to &quot;27-WebSocket-socket.io&quot;">​</a></h1><p>传统的 HTTP 是一种单向请求 - 响应协议，客户端发送请求后，服务器才会响应并返回相应的数据。在传统的 HTTP 中，客户端需要主动发送请求才能获取服务器上的资源，而且每次请求都需要重新建立连接，这种方式在实时通信和持续获取资源的场景下效率较低。</p><p>WebSocket 提供了实时的双向通信能力，可以实时地传输数据。客户端和服务器之间的通信是即时的，数据的传输和响应几乎是实时完成的，不需要轮询或定时发送请求。</p><h2 id="socket-io" tabindex="-1">socket.io <a class="header-anchor" href="#socket-io" aria-label="Permalink to &quot;socket.io&quot;">​</a></h2><blockquote><p>网络原理笔记 <a href="./../../../计算机基础课程/网络/01 网络原理/09_WebSocket.html">09_WebSocket</a>，使用的是 ws 库。</p></blockquote><p>Socket.IO 是一个基于事件驱动的实时通信框架，用于构建实时应用程序。它提供了双向、低延迟的通信能力，使得服务器和客户端可以实时地发送和接收数据。</p><div class="note custom-block github-alert"><p class="custom-block-title">Title</p><p><a href="https://socket.io/zh-CN/" target="_blank" rel="noreferrer">Socket.IO</a></p></div><p>Socket.IO 的主要特点包括：</p><ol><li><strong>实时性</strong>: Socket.IO 构建在 WebSocket 协议之上，使用了 WebSocket 连接来实现实时通信。WebSocket 是一种双向通信协议，相比传统的 HTTP 请求 - 响应模型，它可以实现更快速、低延迟的数据传输。</li><li><strong>事件驱动</strong>: Socket.IO 使用事件驱动的编程模型。服务器和客户端可以通过触发事件来发送和接收数据。这种基于事件的通信模式使得开发者可以轻松地构建实时的应用程序，例如聊天应用、实时协作工具等。</li><li><strong>跨平台支持</strong>: Socket.IO 可以在多个平台上使用，包括浏览器、服务器和移动设备等。它提供了对多种编程语言和框架的支持，如 JavaScript、Node.js、Python、Java 等，使得开发者可以在不同的环境中构建实时应用程序。</li><li><strong>容错性</strong>: Socket.IO 具有容错能力，当 WebSocket 连接不可用时，它可以自动降级到其他传输机制，如 HTTP 长轮询。这意味着即使在不支持 WebSocket 的环境中，Socket.IO 仍然可以实现实时通信。</li><li><strong>扩展性</strong>: Socket.IO 支持水平扩展，可以将应用程序扩展到多个服务器，并实现事件的广播和传递。这使得应用程序可以处理大规模的并发连接，并实现高可用性和高性能</li></ol><p>nodejs 安装</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> socket.io</span></span></code></pre></div><p>浏览器客户端</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { io } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://cdn.socket.io/4.7.4/socket.io.esm.min.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> socket</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ws://localhost:3000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//ws的地址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="案例-构建一个聊天室" tabindex="-1">案例：构建一个聊天室 <a class="header-anchor" href="#案例-构建一个聊天室" aria-label="Permalink to &quot;案例：构建一个聊天室&quot;">​</a></h2>`,14)]))}const g=i(o,[["render",k]]);export{d as __pageData,g as default};
