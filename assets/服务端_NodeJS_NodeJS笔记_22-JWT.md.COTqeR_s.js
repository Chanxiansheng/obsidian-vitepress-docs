import{_ as a,c as o,o as t,ae as l}from"./chunks/framework.CIivgcbp.js";const c=JSON.parse('{"title":"22-JWT","description":"","frontmatter":{},"headers":[],"relativePath":"服务端/NodeJS/NodeJS笔记/22-JWT.md","filePath":"服务端/NodeJS/NodeJS笔记/22-JWT.md"}'),i={name:"服务端/NodeJS/NodeJS笔记/22-JWT.md"};function r(s,e,d,n,T,p){return t(),o("div",null,e[0]||(e[0]=[l('<h1 id="_22-jwt" tabindex="-1">22-JWT <a class="header-anchor" href="#_22-jwt" aria-label="Permalink to &quot;22-JWT&quot;">​</a></h1><h2 id="什么是-jwt" tabindex="-1">什么是 JWT <a class="header-anchor" href="#什么是-jwt" aria-label="Permalink to &quot;什么是 JWT&quot;">​</a></h2><p>JWT（JSON Web Token）是一种开放的标准（RFC 7519），用于在网络应用间传递信息的一种方式。它是一种基于 JSON 的安全令牌，用于在客户端和服务器之间传输信息。</p><div class="note custom-block github-alert"><p class="custom-block-title">Title</p><p><a href="https://jwt.io/" target="_blank" rel="noreferrer">JWT.IO - JSON Web Tokens</a></p></div><p>JWT 由三部分组成，它们通过点（.）进行分隔：</p><ol><li>Header（头部）：包含了令牌的类型和使用的加密算法等信息。通常采用 Base64 编码表示。</li><li>Payload（负载）：包含了身份验证和授权等信息，如用户 ID、角色、权限等。也可以自定义其他相关信息。同样采用 Base64 编码表示。</li><li>Signature（签名）：使用指定的密钥对头部和负载进行签名，以确保令牌的完整性和真实性。</li></ol><p>JWT 的工作流程如下：</p><ol><li>用户通过提供有效的凭证（例如用户名和密码）进行身份验证。</li><li>服务器验证凭证，并生成一个 JWT 作为响应。JWT 包含了用户的身份信息和其他必要的数据。</li><li>服务器将 JWT 发送给客户端。</li><li>客户端在后续的请求中，将 JWT 放入请求的头部或其他适当的位置。</li><li>服务器在接收到请求时，验证 JWT 的签名以确保其完整性和真实性。如果验证通过，服务器使用 JWT 中的信息进行授权和身份验证。</li></ol><p>更多见：<a href="./../../../计算机基础课程/网络/01 网络原理/13_前端鉴权-Token和JWT.html">13_前端鉴权-Token和JWT</a></p><h2 id="案例" tabindex="-1">案例 <a class="header-anchor" href="#案例" aria-label="Permalink to &quot;案例&quot;">​</a></h2><p>#待补（程度：低）<br> 依赖</p><ol><li><code>passport</code> passport 是一个流行的用于身份验证和授权的 Node.js 库</li><li><code>passport-jwt</code> Passport-JWT 是 Passport 库的一个插件，用于支持使用 JSON Web Token (JWT) 进行身份验证和授权</li><li><code>jsonwebtoken</code> 生成 token 的库</li></ol>',12)]))}const _=a(i,[["render",r]]);export{c as __pageData,_ as default};
