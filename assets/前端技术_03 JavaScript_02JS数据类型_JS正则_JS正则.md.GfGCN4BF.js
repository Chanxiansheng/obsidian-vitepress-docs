import{_ as s,c as t,o as a,ag as e}from"./chunks/framework.-ewJmwvT.js";const g=JSON.parse('{"title":"JS 正则","description":"","frontmatter":{},"headers":[],"relativePath":"前端技术/03 JavaScript/02JS数据类型/JS正则/JS正则.md","filePath":"前端技术/03 JavaScript/02JS数据类型/JS正则/JS正则.md"}'),l={name:"前端技术/03 JavaScript/02JS数据类型/JS正则/JS正则.md"};function h(n,i,p,k,d,r){return a(),t("div",null,i[0]||(i[0]=[e(`<h1 id="js-正则" tabindex="-1">JS 正则 <a class="header-anchor" href="#js-正则" aria-label="Permalink to &quot;JS 正则&quot;">​</a></h1><h2 id="什么是正则表达式" tabindex="-1">什么是正则表达式？ <a class="header-anchor" href="#什么是正则表达式" aria-label="Permalink to &quot;什么是正则表达式？&quot;">​</a></h2><p>正则表达式是描述字符模式的对象。<br> 正则表达式用于对字符串模式匹配及检索替换，是对字符串执行模式匹配的强大工具。</p><h2 id="regexp-对象" tabindex="-1">RegExp 对象 <a class="header-anchor" href="#regexp-对象" aria-label="Permalink to &quot;RegExp 对象&quot;">​</a></h2><p>RegExp 是正则表达式（regular expression）的简写。<br> RegExp 对象有两种创建形式，一是 new RegExp，二是通过/pattern/字面量形式。<br> 语法：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. 对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> patt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegExp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pattern,modifiers);  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. 字面量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> patt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pattern</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">modifiers;</span></span></code></pre></div><ul><li>pattern（模式）描述了表达式的模式</li><li>modifiers(修饰符) 用于指定全局匹配、区分大小写的匹配和多行匹配 <ul><li>i: 执行对大小写不敏感的匹配。</li><li>g: 执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</li><li>m: 执行多行匹配。</li></ul></li></ul><h2 id="pattern-模板语法" tabindex="-1">pattern 模板语法 <a class="header-anchor" href="#pattern-模板语法" aria-label="Permalink to &quot;pattern 模板语法&quot;">​</a></h2><ul><li>字符组 []<br> 使用方括号 [] 包裹一组字符表示匹配该组字符的任意成员。<br> 排除字符组：[^ ] 包裹一组字符表示匹配该非组字符的其他字符。<br> 示例：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[abc]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //匹配 a 或 b 或 c  </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">abc]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //匹配非 abc 字符  </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[0-9]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //匹配从 0 至 9 的任一数字  </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[a-z]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //匹配任何从小写 a 到小写 z 的任一字母</span></span></code></pre></div><ul><li>元字符<br> 元字符是拥有特殊含义的字符</li></ul><table tabindex="0"><thead><tr><th style="text-align:left;">元字符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">.</td><td style="text-align:left;">查找单个字符，除了换行和行结束符。</td></tr><tr><td style="text-align:left;">\\w</td><td style="text-align:left;">查找数字、字母及下划线。</td></tr><tr><td style="text-align:left;">\\W</td><td style="text-align:left;">查找非单词字符。</td></tr><tr><td style="text-align:left;">\\d</td><td style="text-align:left;">查找数字。</td></tr><tr><td style="text-align:left;">\\D</td><td style="text-align:left;">查找非数字字符。</td></tr><tr><td style="text-align:left;">\\s</td><td style="text-align:left;">查找空白字符。</td></tr><tr><td style="text-align:left;">\\S</td><td style="text-align:left;">查找非空白字符。</td></tr><tr><td style="text-align:left;">\\b</td><td style="text-align:left;">匹配单词边界。</td></tr><tr><td style="text-align:left;">\\B</td><td style="text-align:left;">匹配非单词边界。</td></tr><tr><td style="text-align:left;">\\0</td><td style="text-align:left;">查找 NULL 字符。</td></tr><tr><td style="text-align:left;">\\n</td><td style="text-align:left;">查找换行符。</td></tr><tr><td style="text-align:left;">\\f</td><td style="text-align:left;">查找换页符。</td></tr><tr><td style="text-align:left;">\\r</td><td style="text-align:left;">查找回车符。</td></tr><tr><td style="text-align:left;">\\t</td><td style="text-align:left;">查找制表符。</td></tr><tr><td style="text-align:left;">\\v</td><td style="text-align:left;">查找垂直制表符。</td></tr><tr><td style="text-align:left;">\\xxx</td><td style="text-align:left;">查找以八进制数 xxx 规定的字符。</td></tr><tr><td style="text-align:left;">\\xdd</td><td style="text-align:left;">查找以十六进制数 dd 规定的字符。</td></tr><tr><td style="text-align:left;">\\uxxxx</td><td style="text-align:left;">查找以十六进制数 xxxx 规定的 Unicode 字符。</td></tr></tbody></table><ul><li><p>量词<br> 量词用于声明某个或某组字符的重复次数。<br> 在字符后使用 <code>{m,n}</code> 表示，m 表示至少出现 m 次，n 表示至多出现 n 次。<br> 简写形式：<br><code>{m}</code>，表示字符固定出现 m 次。<br><code>{m,}</code>，表示字符至少出现 m 次。<br><code>?</code>，表示字符至少 0 或 1 次。等价于 <code>{0,1}</code><br><code>+</code>，表示字符至少出现 1 次。等价于 <code>{1,}</code><br><code>*</code>，表示字符出现任意次。等价于 <code>{0,}</code></p></li><li><p>贪婪匹配和惰性匹配<br> 使用量词后默认使用贪婪匹配，即匹配长度尽可能大的字符。<br> 而通过在量词后面加个问号？就能实现惰性匹配<br> 示例：<code>{m,n}?</code>、<code>??</code>、<code>+?</code></p></li><li><p>位置匹配<br><code>^</code>（脱字符）匹配开头，在多行匹配中匹配行开头。<br><code>$</code>（美元符号）匹配结尾，在多行匹配中匹配行结尾。<br><code>\\b</code> 是单词边界，boundary 的简写，<br><code>\\B</code> 就是 not boundary 的意思，非单词边界。</p></li></ul><blockquote><p>什么是单词边界？<br> 个人理解即：字符串中单词与单词间的划分边界。<br> 如字符串 &quot;i love cat!&quot; 中，i 与 love,love 与 cat 之间均存在单词边界。同时，cat 与! 也存在单词边界，i 前面以及!后也存在单词边界。<br> 具体就是 <code>\\w</code> 和 <code>\\W</code> 之间的位置，也包括 <code>\\w</code> 和 <code>^</code> 之间的位置，也包括 <code>\\w</code> 和 <code>$</code> 之间的位置。</p></blockquote><p><code>?=p</code>，其中 p 是一个子 pattern，即匹配任何其后满足 p 的位置。学名 positive lookahead，正向先行断言。<br><code>?!p</code> 则与之相反，即匹配任何其后不满足满足 p 的位置。学名 negative lookbehind，负向先行断言。<br> ES6 中，还支持 positive lookbehind<code>?&lt;=p</code> 和 negative lookbehind<code>?&lt;!p</code>。</p><ul><li><p>多选分支<br><code>p1|p2|p3</code>，其中 p1、p2 和 p3 是子模式，用 <code>|</code>（管道符）分隔，表示其中任何之一。<br> 分支结构的匹配是惰性的。</p></li><li><p>分组<br> 使用括号 <code>()</code> 进行分隔，通常与多选分支或在复杂的正则表达式上使用。<br> 反向引用：使用 <code>\\num</code> 匹配前面对应的分组字符<br> 示例：</p></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// \\1\\2\\3\\4是一种转义表示，匹配与顺序对应的分组。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\D</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\W</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\w</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">))</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\\1\\2\\3\\4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reg.$1)  	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// $1属性即为\\1分组的对应匹配</span></span></code></pre></div><h2 id="regexp-对象方法" tabindex="-1">RegExp 对象方法 <a class="header-anchor" href="#regexp-对象方法" aria-label="Permalink to &quot;RegExp 对象方法&quot;">​</a></h2><h4 id="test" tabindex="-1">test <a class="header-anchor" href="#test" aria-label="Permalink to &quot;test&quot;">​</a></h4><ul><li>test() 方法用于检测一个字符串是否匹配某个模式。</li><li><code>RegExpObject.test(string)</code></li><li>如果字符串中有匹配的值返回 true ，否则返回 false。</li></ul><h4 id="exec" tabindex="-1">exec <a class="header-anchor" href="#exec" aria-label="Permalink to &quot;exec&quot;">​</a></h4><ul><li>exec() 方法用于检索字符串中的正则表达式的匹配。</li><li><code>RegExpObject.exec(string)</code></li><li>返回值：如果字符串中有匹配的值返回该匹配值，否则返回 null。</li></ul><h2 id="字符串正则方法" tabindex="-1">字符串正则方法 <a class="header-anchor" href="#字符串正则方法" aria-label="Permalink to &quot;字符串正则方法&quot;">​</a></h2><h4 id="search" tabindex="-1">search <a class="header-anchor" href="#search" aria-label="Permalink to &quot;search&quot;">​</a></h4><ul><li>search() 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。</li><li><code>string.search(string or regExp)</code></li><li>返回值：匹配子字符串的起始位置索引。如果没有找到任何匹配的子串，则返回 -1。</li></ul><h4 id="match" tabindex="-1">match <a class="header-anchor" href="#match" aria-label="Permalink to &quot;match&quot;">​</a></h4><ul><li>match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。</li><li><code>string.match(regexp)</code></li><li>返回值：存放匹配结果的数组。如果没有找到任何匹配的子串，则返回 null。</li></ul><h4 id="replace" tabindex="-1">replace <a class="header-anchor" href="#replace" aria-label="Permalink to &quot;replace&quot;">​</a></h4><ul><li>replace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</li><li><code>string.replace(searchvalue, newvalue)</code></li><li>返回值：一个替换后的新字符串。</li></ul><h4 id="split" tabindex="-1">split <a class="header-anchor" href="#split" aria-label="Permalink to &quot;split&quot;">​</a></h4><ul><li>split() 方法用于把一个字符串分割成字符串数组。limit 为数组长度限制。</li></ul><blockquote><p><strong>提示：</strong> 如果把空字符串 (&quot;&quot;) 用作 separator，那么 stringObject 中的每个字符之间都会被分割。</p></blockquote><ul><li><code>string.split(string or regExp, limit)</code></li><li>返回值：一个字符串数组。</li></ul><h2 id="常用正则表达式" tabindex="-1">常用正则表达式 <a class="header-anchor" href="#常用正则表达式" aria-label="Permalink to &quot;常用正则表达式&quot;">​</a></h2><p>vscode 插件 <strong>any-rule</strong></p><p>中国手机号 (严谨), 根据工信部 2019 年最新公布的手机号段</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?:(?:</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\+</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">00)86)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">1(?:(?:3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[\\d]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?:4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[5-7|9]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?:5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[0-3|5-9]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?:6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[5-7]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?:7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[0-8]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?:8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[\\d]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?:9</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[1|8|9]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">))</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{8}$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span></span></code></pre></div><p>邮箱地址 (email)</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[a-zA-Z0-9.!#$%&amp;&#39;*+</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">=?^_\`{|}~-]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[a-zA-Z0-9]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[a-zA-Z0-9-]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{0,61}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[a-zA-Z0-9]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?:</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[a-zA-Z0-9]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[a-zA-Z0-9-]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{0,61}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[a-zA-Z0-9]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span></span></code></pre></div>`,39)]))}const c=s(l,[["render",h]]);export{g as __pageData,c as default};
