import{_ as i,c as a,o as l,ae as t}from"./chunks/framework.CIivgcbp.js";const g=JSON.parse('{"title":"Set 和 Map","description":"","frontmatter":{},"headers":[],"relativePath":"前端技术/03 JavaScript/02JS数据类型/Set和Map.md","filePath":"前端技术/03 JavaScript/02JS数据类型/Set和Map.md"}'),p={name:"前端技术/03 JavaScript/02JS数据类型/Set和Map.md"};function e(n,s,h,k,r,E){return l(),a("div",null,s[0]||(s[0]=[t(`<h1 id="set-和-map" tabindex="-1">Set 和 Map <a class="header-anchor" href="#set-和-map" aria-label="Permalink to &quot;Set 和 Map&quot;">​</a></h1><p>Set 和 Map 主要的应用场景在于 数据重组 和 数据储存。<br> Set 是一种叫做集合的数据结构，Map 是一种叫做字典的数据结构</p><h2 id="一、set" tabindex="-1">一、Set <a class="header-anchor" href="#一、set" aria-label="Permalink to &quot;一、Set&quot;">​</a></h2><ul><li><p>集合是由一组无序且唯一 (即不能重复) 的项组成的，可以想象成集合是一个既没有重复元素，也没有顺序概念的数组。</p></li><li><p>创建<br><code>const s = new Set([iterable])</code><br><code>Set</code> 函数可以接受一个数组、字符串（或者具有 iterable 接口的其他数据结构）作为参数，用来初始化。<br><code>const s = new Set([1, 2, 3, 4, 4]);</code></p><ul><li><p>Set 对象允许你储存任何类型的唯一值，无论是原始值或者是对象引用。</p></li><li><p>向 Set 加入值的时候，不会发生类型转换，所以 5 和 &quot;5&quot; 是两个不同的值。Set 内部判断两个值是否不同，使用的算法叫做“Same-value-zero equality”，它类似于精确相等运算符（<code>===</code>），主要的区别是<strong>NaN 等于自身，而精确相等运算符认为 NaN 不等于自身。</strong></p></li></ul></li><li><p>属性<br> size：返回集合中所包含的元素个数</p></li><li><p>操作方法</p><ul><li>add(value)：添加某个值，返回 Set 结构本身。</li><li>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。</li><li>has(value)：返回一个布尔值，表示该值是否为 Set 的成员。</li><li>clear()：清除所有成员，无返回值。</li></ul></li><li><p>遍历方法（遍历顺序为插入顺序）</p><ul><li>keys()：返回一个包含集合中所有键的迭代器</li><li>values()：返回一个包含集合中所有值得迭代器</li><li>entries()：返回一个包含 Set 对象中所有元素得键值对迭代器</li><li>forEach(callbackFn, thisArg)：用于对集合成员执行 callbackFn 操作，如果提供了 thisArg 参数，回调中的 this 会是这个参数，没有返回值</li></ul><p>Set 可默认遍历，默认迭代器生成函数是 values() 方法。因此，Set 也可以使用 map、filter 方法。</p></li><li><p>用途<br> 去除数组重复成员<br><code>[...new Set(array)]</code></p></li></ul><h2 id="二、map" tabindex="-1">二、Map <a class="header-anchor" href="#二、map" aria-label="Permalink to &quot;二、Map&quot;">​</a></h2><p>JavaScript 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用字符串当作键。这给它的使用带来了很大的限制。</p><p>Map 类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适。</p><ul><li><p>创建<br><code>const m = new Map([iterable])</code><br> 任何具有 Iterator 接口、且每个成员都是一个双元素的数组的数据结构都可以当作 Map 构造函数的参数。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;张三&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;title&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Author&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span></code></pre></div><p>如果读取一个未知的键，则返回 undefined。</p><p><strong>Map 的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键。</strong> 这就解决了同名属性碰撞（clash）的问题，我们扩展别人的库的时候，如果使用对象作为键名，就不用担心自己的属性与原作者的属性同名。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">map.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">555</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">map.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// undefined</span></span></code></pre></div><p>如果 Map 的键是一个简单类型的值（数字、字符串、布尔值），则只要两个值严格相等，Map 将其视为一个键，比如 0 和 -0 就是一个键，布尔值 true 和字符串 true 则是两个不同的键。另外，undefined 和 null 也是两个不同的键。虽然 NaN 不严格相等于自身，但 Map 将其视为同一个键。</p></li><li><p>属性<br> size：返回字典所包含的元素个数</p></li><li><p>操作方法</p><ul><li>set(key, value)：向字典中添加新元素</li><li>get(key)：通过键查找特定的数值并返回</li><li>has(key)：判断字典中是否存在键 key</li><li>delete(key)：通过键 key 从字典中移除对应的数据</li><li>clear()：将这个字典中的所有元素删除</li></ul></li><li><p>遍历方法</p><ul><li>Keys()：将字典中包含的所有键名以迭代器形式返回</li><li>values()：将字典中包含的所有数值以迭代器形式返回</li><li>entries()：返回所有成员的迭代器</li><li>forEach()：遍历字典的所有成员</li></ul><p>Map 结构的默认遍历器接口（Symbol.iterator 属性），就是 entries() 方法。</p></li><li><p>Map 结构转为数组结构，比较快速的方法是使用扩展运算符（...）。</p></li></ul><h2 id="三、weakset-和-weakmap" tabindex="-1">三、WeakSet 和 WeakMap <a class="header-anchor" href="#三、weakset-和-weakmap" aria-label="Permalink to &quot;三、WeakSet 和 WeakMap&quot;">​</a></h2><ul><li>Weak 在英语的意思就是弱，WeakSet 和 WeakMap 的键都是弱引用，不计入垃圾回收的引用机制。</li></ul><blockquote><p>垃圾回收机制：</p><p>JavaScript 会在执行内存回收时，<strong>清除掉 被引用次数为 0 的那部分内存</strong>；</p></blockquote><ul><li><p>WeakSet：</p><ol><li><strong>WeakSet 只能储存对象引用</strong>。</li><li>WeakSet 对象中储存的对象值都是被弱引用的，即垃圾回收机制不考虑 WeakSet 对该对象的引用，如果没有其他的变量或属性引用这个对象值，则这个对象将会被垃圾回收掉（不考虑该对象还存在于 WeakSet 中），所以，WeakSet 对象里有多少个成员元素，取决于垃圾回收机制有没有运行，运行前后成员个数可能不一致，遍历结束之后，有的成员可能取不到了（被垃圾回收了）。因此，<strong>WeakSet 对象是无法被遍历的</strong>，也没有办法拿到它包含的所有元素。</li><li>WeakSet 可以看成没有“长度”、“遍历”概念的特殊弱引用 Set 型。</li></ol></li><li><p>WeakMap：</p><ol><li><strong>WeakMap 对象是一组键值对的集合，其中的键是弱引用对象，而值可以是任意。</strong> 注意，WeakMap 弱引用的只是键名，而不是键值。键值依然是正常引用。</li><li>WeakMap 中，每个键对自己所引用对象的引用都是弱引用，在没有其他引用和该键引用同一对象，这个对象将会被垃圾回收（相应的 key 则变成无效的），所以，<strong>WeakMap 的 key 是不可枚举的</strong>。</li><li>WeakMap 非常擅长去配合 非常态的实例、节点、属性 一同使用，在那些内容被销毁时跟着一起被回收。vue3 的响应式原理就有 WeakMap 的应用：<a href="./../../07 Vue/Vue3/10 响应式原理.html">10 响应式原理</a></li></ol></li><li><p>我们来演示一下:</p><p>首先 obj 引用了这个对象 +1，aahph 也引用了 +1，wmap 也引用了，但是不会 + 1，应为他是弱引用，不会计入垃圾回收，因此 obj 和 aahph 释放了该引用 WeakMap 也会随着消失的，但是有个问题你会发现控制台能输出，值是取不到的，应为 V8 的 GC 回收是需要一定时间的，你可以延长到 500ms 看一看，并且为了避免这个问题不允许读取键值，也不允许遍历，同理 WeakSet 也一样。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">any</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;小明&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> aahph</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">any</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wmap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WeakMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WeakMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wmap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//2 他的键是弱引用不会计数的</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // -1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">aahph </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//-1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//v8 GC 不稳定 最少200ms</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wmap)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li></ul>`,12)]))}const y=i(p,[["render",e]]);export{g as __pageData,y as default};
