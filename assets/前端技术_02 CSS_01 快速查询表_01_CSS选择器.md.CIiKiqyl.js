import{_ as d,c as e,o as r,ae as a}from"./chunks/framework.CIivgcbp.js";const u=JSON.parse('{"title":"CSS 选择器","description":"","frontmatter":{},"headers":[],"relativePath":"前端技术/02 CSS/01 快速查询表/01_CSS选择器.md","filePath":"前端技术/02 CSS/01 快速查询表/01_CSS选择器.md"}'),o={name:"前端技术/02 CSS/01 快速查询表/01_CSS选择器.md"};function l(s,t,h,E,n,i){return r(),e("div",null,t[0]||(t[0]=[a('<h1 id="css-选择器" tabindex="-1">CSS 选择器 <a class="header-anchor" href="#css-选择器" aria-label="Permalink to &quot;CSS 选择器&quot;">​</a></h1><h2 id="元素选择符-element-selectors" tabindex="-1">元素选择符 Element Selectors <a class="header-anchor" href="#元素选择符-element-selectors" aria-label="Permalink to &quot;元素选择符 Element Selectors&quot;">​</a></h2><table tabindex="0"><thead><tr><th>选择符</th><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>*</td><td>通配选择符</td><td>所有元素对象。</td></tr><tr><td>E</td><td>类型选择符</td><td>以文档语言对象类型作为选择符。</td></tr><tr><td>E#myid</td><td>id 选择符</td><td>以唯一标识符 id 属性等于 myid 的 E 对象作为选择符。</td></tr><tr><td>E.myclass</td><td>class 选择符</td><td>以 class 属性包含 myclass 的 E 对象作为选择符。</td></tr></tbody></table><h2 id="关系选择符-relationship-selectors" tabindex="-1">关系选择符 Relationship Selectors <a class="header-anchor" href="#关系选择符-relationship-selectors" aria-label="Permalink to &quot;关系选择符 Relationship Selectors&quot;">​</a></h2><table tabindex="0"><thead><tr><th>选择符</th><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>E F</td><td>包含选择符</td><td>选择所有被 E 元素包含的 F 元素。</td></tr><tr><td>E&gt;F</td><td>子选择符</td><td>选择所有作为 E 元素的子元素 F。</td></tr><tr><td>E+F</td><td>相邻选择符</td><td>选择紧贴在 E 元素之后 F 元素。</td></tr><tr><td>E~F</td><td>兄弟选择符</td><td>选择 E 元素所有兄弟元素 F。</td></tr></tbody></table><h2 id="属性选择符-attribute-selectors" tabindex="-1">属性选择符 Attribute Selectors <a class="header-anchor" href="#属性选择符-attribute-selectors" aria-label="Permalink to &quot;属性选择符 Attribute Selectors&quot;">​</a></h2><table tabindex="0"><thead><tr><th>选择符</th><th>描述</th></tr></thead><tbody><tr><td>E[att]</td><td>选择具有 att 属性的 E 元素。</td></tr><tr><td>E[att=&quot;val&quot;]</td><td>选择具有 att 属性且属性值等于 val 的 E 元素。</td></tr><tr><td>E[att~=&quot;val&quot;]</td><td>选择具有 att 属性且属性值为一用空格分隔的字词列表，其中一个等于 val 的 E 元素。</td></tr><tr><td>E[att^=&quot;val&quot;]</td><td>选择具有 att 属性且属性值为以 val 开头的字符串的 E 元素。</td></tr><tr><td>E[att$=&quot;val&quot;]</td><td>选择具有 att 属性且属性值为以 val 结尾的字符串的 E 元素。</td></tr><tr><td>E[att*=&quot;val&quot;]</td><td>选择具有 att 属性且属性值为包含 val 的字符串的 E 元素。</td></tr><tr><td>E[att=&quot;val&quot;]</td><td>选择具有 att 属性且属性值为以 val 开头并用连接符 &quot;-&quot; 分隔的字符串的 E 元素，如果属性值仅为 val，也将被选择。</td></tr></tbody></table><h2 id="伪对象选择符-pseudo-element-selectors" tabindex="-1">伪对象选择符 Pseudo-Element Selectors <a class="header-anchor" href="#伪对象选择符-pseudo-element-selectors" aria-label="Permalink to &quot;伪对象选择符 Pseudo-Element Selectors&quot;">​</a></h2><table tabindex="0"><thead><tr><th>选择符</th><th>描述</th></tr></thead><tbody><tr><td>E::first-letter</td><td>设置对象内的第一个字符的样式。</td></tr><tr><td>E::first-line</td><td>设置对象内的第一行的样式。</td></tr><tr><td>E::before</td><td>设置在对象前（依据对象树的逻辑结构）发生的内容。和 content 属性一起使用</td></tr><tr><td>E::after</td><td>设置在对象后（依据对象树的逻辑结构）发生的内容。和 content 属性一起使用</td></tr><tr><td>E::placeholder</td><td>设置对象文字占位符的样式。</td></tr><tr><td>E::selection</td><td>设置对象被选择时的颜色。</td></tr></tbody></table><h2 id="伪类选择符-pseudo-classes-selectors" tabindex="-1">伪类选择符 Pseudo-Classes Selectors <a class="header-anchor" href="#伪类选择符-pseudo-classes-selectors" aria-label="Permalink to &quot;伪类选择符 Pseudo-Classes Selectors&quot;">​</a></h2><table tabindex="0"><thead><tr><th>选择符</th><th>描述</th></tr></thead><tbody><tr><td>E:link</td><td>设置超链接 a 在未被访问前的样式。</td></tr><tr><td>E:visited</td><td>设置超链接 a 在其链接地址已被访问过时的样式。</td></tr><tr><td>E:hover</td><td>设置元素在其鼠标悬停时的样式。</td></tr><tr><td>E:active</td><td>设置元素在被用户激活（在鼠标点击与释放之间发生的事件）时的样式。</td></tr><tr><td>E:focus</td><td>设置元素在成为输入焦点（该元素的 onfocus 事件发生）时的样式。</td></tr><tr><td>E:lang(fr)</td><td>匹配使用特殊语言的 E 元素。</td></tr><tr><td>E:not(s)</td><td>匹配不含有 s 选择符的元素 E。</td></tr><tr><td>E:root</td><td>匹配 E 元素在文档的根元素。</td></tr><tr><td>E:first-child</td><td>匹配父元素的第一个子元素 E。</td></tr><tr><td>E:last-child</td><td>匹配父元素的最后一个子元素 E。</td></tr><tr><td>E:only-child</td><td>匹配父元素仅有的一个子元素 E。</td></tr><tr><td>E:nth-child(n)</td><td>匹配父元素的第 n 个子元素 E。</td></tr><tr><td>E:nth-last-child(n)</td><td>匹配父元素的倒数第 n 个子元素 E。</td></tr><tr><td>E:first-of-type</td><td>匹配父元素下第一个类型为 E 的子元素。</td></tr><tr><td>E:last-of-type</td><td>匹配父元素下的所有 E 子元素中的倒数第一个。</td></tr><tr><td>E:only-of-type</td><td>匹配父元素的所有子元素中唯一的那个子元素 E。</td></tr><tr><td>E:nth-of-type(n)</td><td>匹配父元素的第 n 个子元素 E。</td></tr><tr><td>E:nth-last-of-type(n)</td><td>匹配父元素的倒数第 n 个子元素 E。</td></tr><tr><td>E:empty</td><td>匹配没有任何子元素（包括 text 节点）的元素 E。</td></tr><tr><td>E:checked</td><td>匹配用户界面上处于选中状态的元素 E。(用于 input type 为 radio 与 checkbox 时)</td></tr><tr><td>E:enabled</td><td>匹配用户界面上处于可用状态的元素 E。</td></tr><tr><td>E:disabled</td><td>匹配用户界面上处于禁用状态的元素 E。</td></tr><tr><td>E:target</td><td>匹配相关 URL 指向的 E 元素。</td></tr><tr><td>@page:first</td><td>设置页面容器第一页使用的样式。仅用于@page 规则</td></tr><tr><td>@page:left</td><td>设置页面容器位于装订线左边的所有页面使用的样式。仅用于@page 规则</td></tr><tr><td>@page:right</td><td>设置页面容器位于装订线右边的所有页面使用的样式。仅用于@page 规则</td></tr></tbody></table>',11)]))}const b=d(o,[["render",l]]);export{u as __pageData,b as default};
