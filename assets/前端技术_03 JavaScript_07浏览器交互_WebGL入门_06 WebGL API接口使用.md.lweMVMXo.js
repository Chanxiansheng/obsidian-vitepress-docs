import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.-ewJmwvT.js";const g=JSON.parse('{"title":"06 WebGL API 接口使用","description":"","frontmatter":{},"headers":[],"relativePath":"前端技术/03 JavaScript/07浏览器交互/WebGL入门/06 WebGL API接口使用.md","filePath":"前端技术/03 JavaScript/07浏览器交互/WebGL入门/06 WebGL API接口使用.md"}'),e={name:"前端技术/03 JavaScript/07浏览器交互/WebGL入门/06 WebGL API接口使用.md"};function t(p,s,h,k,r,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="_06-webgl-api-接口使用" tabindex="-1">06 WebGL API 接口使用 <a class="header-anchor" href="#_06-webgl-api-接口使用" aria-label="Permalink to &quot;06 WebGL API 接口使用&quot;">​</a></h1><h2 id="创建着色器对象​" tabindex="-1">创建着色器对象​ <a class="header-anchor" href="#创建着色器对象​" aria-label="Permalink to &quot;创建着色器对象​&quot;">​</a></h2><p><code>WebGLRenderingContext.createShader()</code> 可以用于创建着色器对象，可以创建顶点着色器或者片元着色器，接收参数 type 决定创建哪一种类型的着色器，参数 type 的值可以是：​</p><ul><li><code>gl.VERTEX_SHADER</code>：创建顶点着色器​</li><li><code>gl.FRAGMENT_SHADER</code>：创建片元着色器​</li></ul><p><code>WebGLRenderingContext.shaderSource(shader,source)</code>：用于设置着色器的 GLSL 程序代码，创建着色器对象之后，相当于把着色器源码引入。​</p><ul><li>参数 shader：用于设置程序代码的 WebGLShader（着色器对象）。​</li><li>参数 source：包含 GLSL 程序代码的字符串。​</li></ul><p><code>WebGLRenderingContext.compileShader(shader)</code>：用于编译一个 GLSL 着色器，使其成为二进制数据，然后就可以被 WebGLProgram 对象所使用。​</p><ul><li>参数 shader：要被编译的 WebGLShader（着色器对象）。</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 顶点着色器 --&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vertex-shader&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x-shader/x-vertex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">attribute vec4 aVertexPosition;​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">void main(void) {​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	gl_Position = aVertexPosition;​	</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 片段着色器 --&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fragment-shader&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x-shader/x-fragment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">void main(void) {​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	gl_FragColor = vec4(1.0,0.0,0.0,1.0);​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;​</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建顶点着色器 和 片元着色器​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vertexShader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createShader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VERTEX_SHADER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fragmentShader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createShader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FRAGMENT_SHADER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取顶点着色器和片元着色器的程序源码​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vertexShaderSource</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;vertex-shader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).innerText;​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fragmentShaderSource</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fragment-shader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).innerText;​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置顶点着色器和片元着色器的程序源码​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shaderSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vertexShader,vertexShaderSource)​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shaderSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fragmentShader,fragmentShaderSource)​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 编译着色器使其成为二进制数据​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compileShader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vertexShader)​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compileShader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fragmentShader)​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="创建-webprogram-程序对象" tabindex="-1">创建 WebProgram 程序对象 <a class="header-anchor" href="#创建-webprogram-程序对象" aria-label="Permalink to &quot;创建 WebProgram 程序对象&quot;">​</a></h2><p><code>WebGLRenderingContext.createProgram()</code> 可以用于创建一个 WebProgram 程序对象，这个对象表示一个 WebGL 着色器程序，它包含了一个顶点着色器和一个片元着色器，并可以被 WebGL 渲染管线使用。​</p><p>WebGLProgram 的作用是将顶点着色器和片元着色器组合在一起，以便 WebGL 渲染管线能够使用这两个着色器来处理顶点和片元的着色操作。通过创建和链接一个 WebGLProgram，可以确保顶点着色器和片元着色器能够正确地协同工作，从而完成图形的渲染。​</p><p><code>WebGLRenderingContext.attachShader(program,shader)</code>：将一个编译好的着色器（顶点着色器或片元着色器）附加到程序对象。​</p><ul><li>参数 program：要添加着色器的 WebProgram 程序对象​</li><li>参数 shader：编译好的着色器​</li></ul><p><code>WebGLRenderingContext.linkProgram(program)</code>：链接给定的 WebGLProgram，从而完成为程序的片元和顶点着色器准备 GPU 代码的过程，使其成为一个可用于渲染的着色器程序。​</p><ul><li>参数 program：要链接的 WebProgram 程序对象​</li></ul><p><code>WebGLRenderingContext.useProgram(program)</code>：将指定的程序对象设置为当前的渲染状态。​</p><ul><li>参数 program：WebProgram 程序对象</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建WebProgram对象​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> shaderProgram</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createProgram</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 添加顶点着色器​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attachShader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(shaderProgram, vertexShader);​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 添加片元着色器​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attachShader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(shaderProgram, fragmentShader);​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 链接WebProgram对象​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">linkProgram</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(shaderProgram);​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 开始使用WebProgram对象​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useProgram</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(shaderProgram);​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取在 WebGL 程序对象中名为 aVertexPosition 的属性变量的位置（索引），​</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 并将这个位置存储在 vertexPositionAttribute 变量中​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vertexPositionAttribute</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAttribLocation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(shaderProgram, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;aVertexPosition&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="绘制图元的方法​" tabindex="-1">绘制图元的方法​ <a class="header-anchor" href="#绘制图元的方法​" aria-label="Permalink to &quot;绘制图元的方法​&quot;">​</a></h2><p><code>WebGLRenderingContext.drawArrays()</code> 是 WebGL API 中用于绘制图元（如点、线、三角形等）的方法。它从当前绑定的缓冲区中提取顶点数据，根据指定的绘制模式进行渲染。​</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">drawArrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mode, first, count);​</span></span></code></pre></div><ul><li><p>参数 mode: 指定要绘制的图元类型，可以是以下常量之一：​</p><ul><li><code>gl.POINTS</code>: 绘制一系列点。​</li><li><code>gl.LINES</code>: 绘制一系列不连接的线段。​</li><li><code>gl.LINE_STRIP</code>: 绘制一系列连接的线段。​</li><li><code>gl.LINE_LOOP</code>: 绘制一个闭合的线段环。​</li><li><code>gl.TRIANGLES</code>: 绘制一系列不连接的三角形。​</li><li><code>gl.TRIANGLE_STRIP</code>: 绘制一个三角形条带。​</li><li><code>gl.TRIANGLE_FAN</code>: 绘制一个三角形扇形。​</li></ul></li><li><p>参数 first: 从缓冲区数组中的哪个位置开始读取顶点数据。​</p></li><li><p>参数 count: 要绘制的顶点数量。</p></li></ul><h2 id="创建缓冲区对象​" tabindex="-1">创建缓冲区对象​ <a class="header-anchor" href="#创建缓冲区对象​" aria-label="Permalink to &quot;创建缓冲区对象​&quot;">​</a></h2><p><code>WebGLRenderingContext.createBuffer()</code> 用于创建一个新的缓冲区对象。缓冲区对象是用于存储顶点数据、颜色数据、纹理坐标数据等的内存区域，这些数据将被传递到 GPU 中以供渲染使用。​</p><p><code>WebGLRenderingContext.bindBuffer(target,buffer)</code>：绑定一个给定的 WebGL 缓冲区对象到指定的目标。​</p><ul><li>参数 target：一个常量，指定要绑定的目标。常用的目标有：​ <ul><li><code>gl.ARRAY_BUFFER</code>: 表示一个顶点属性数组缓冲区，例如顶点坐标、顶点颜色等。​</li><li><code>gl.ELEMENT_ARRAY_BUFFER</code>: 表示一个元素数组缓冲区，存储顶点索引数据。​</li></ul></li><li>参数 buffer: 一个 WebGLBuffer 对象，表示要绑定的缓冲区。如果传入 null，则解除对当前目标的绑定。​</li></ul><p><code>WebGLRenderingContext.bufferData()</code>：向缓冲区对象写入数据的方法。它将数据复制到当前绑定的缓冲区中，并且可以指定使用这些数据的模式​</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bufferData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, srcData, usage);​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bufferData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, size, usage);​</span></span></code></pre></div><p><code>target</code>: 一个 GLenum，指定绑定缓冲区的目标。常用值包括：​</p><ul><li>gl.ARRAY_BUFFER：顶点属性缓冲区。​</li><li>gl.ELEMENT_ARRAY_BUFFER：元素数组缓冲区（索引数据）。​</li></ul><p><code>srcData</code>: 一个 ArrayBuffer、ArrayBufferView 或 null，包含要写入缓冲区的数据。如果传递 null，则会为缓冲区分配特定大小的内存，而不初始化。​</p><p><code>usage</code>: 一个 GLenum，指定数据存储的使用模式。常用值包括：​</p><ul><li><code>gl.STATIC_DRAW</code>：数据不会或几乎不会改变。​</li><li><code>gl.DYNAMIC_DRAW</code>：数据会频繁改变。​</li><li><code>gl.STREAM_DRAW</code>：数据每次绘制时都会改变。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vertices</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Float32Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([​</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 位置(x, y, z)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 颜色(r, g, b, a)​</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建并绑定缓冲区​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vertexBuffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bindBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ARRAY_BUFFER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, vertexBuffer);​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bufferData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ARRAY_BUFFER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, vertices, gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">STATIC_DRAW</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="配置-webgl-以正确地读取和解释顶点数据​" tabindex="-1">配置 WebGL 以正确地读取和解释顶点数据​ <a class="header-anchor" href="#配置-webgl-以正确地读取和解释顶点数据​" aria-label="Permalink to &quot;配置 WebGL 以正确地读取和解释顶点数据​&quot;">​</a></h2><p><code>WebGLRenderingContext.getAttribLocation(program,name)</code>：返回了给定 WebGLProgram 对象中某属性的下标指向位置。其实就是要获取着色器中定义的变量的，那个变量在内存中的地址。​</p><ul><li>参数 program：WebProgram 程序对象​</li><li>参数 name：参数是顶点着色器中声明的属性变量的名称。这个名称必须与顶点着色器中的 attribute 变量名一致。​</li></ul><p><code>WebGLRenderingContext.vertexAttrib[1234]f[v]()</code>：用于设置顶点属性的数据。这些方法有多个变体，分别适用于不同数量和类型的数据。具体有：​</p><ul><li><code>vertexAttrib1f(location,v0)​</code></li><li><code>vertexAttrib2f(location,v0,v1)​</code></li><li><code>vertexAttrib3f(location,v0,v1,v2)​</code></li><li><code>vertexAttrib4f(location,v0,v1,v2,v3)​</code></li><li><code>vertexAttrib1fv(location, value)​</code></li><li><code>vertexAttrib2fv(location, value)​</code></li><li><code>vertexAttrib3fv(location, value)​</code></li><li><code>vertexAttrib4fv(location, value)</code></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> position</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Float32Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取aPosition这个变量的索引地址​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> posLocation1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAttribLocation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(program,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;aPosition&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置顶点属性的数据​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vertexAttrib2fv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(posLocation1,position)​</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 或者 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> position</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取aPosition这个变量的索引地址​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> posLocation1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAttribLocation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(program,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;aPosition&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置顶点属性的数据​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vertexAttrib2f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(posLocation1,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">position)</span></span></code></pre></div><p><code>WebGLRenderingContext.vertexAttribPointer()</code>： 方法用于在当前绑定的顶点缓冲区对象中指定顶点属性数组的信息。它将顶点缓冲区的数据与顶点着色器中的顶点属性关联起来。这个方法是设置顶点属性数组的重要一步。​</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vertexAttribPointer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index, size, type, normalized, stride, offset);​</span></span></code></pre></div><p><code>index</code>: 一个 GLuint，指定顶点属性的索引位置。这个位置通常通过 gl.getAttribLocation() 方法获取。​</p><p><code>size</code>: 一个 GLint，指定每个顶点属性的组件数量。必须是 1, 2, 3 或 4。例如，对于二维位置坐标（x, y），size 应为 2。​</p><p><code>type</code>: 一个 GLenum，指定数组中每个组件的数据类型。常用值包括：​</p><ul><li><code>gl.BYTE​</code></li><li><code>gl.UNSIGNED_BYTE​</code></li><li><code>gl.SHORT​</code></li><li><code>gl.UNSIGNED_SHORT​</code></li><li><code>gl.FLOAT​</code></li></ul><p><code>normalized</code>: 一个 GLboolean，指定在数据传输到着色器前是否将整数数值归一化到特定范围内。如果为 true，则归一化，否则不归一化。​</p><p><code>stride</code>: 一个 GLsizei，指定连续顶点属性间的字节偏移量。如果为 0，表示属性是紧密打包的。​</p><p><code>offset</code>: 一个 GLintptr，指定顶点属性数组中起始位置的字节偏移量。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取着色器程序 program 中 aPosition 属性的位置索引，并将其存储在 positionLocation 变量中。​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> positionLocation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> webgl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAttribLocation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(program, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;aPosition&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置顶点属性的指针，告诉 WebGL 如何解析顶点数据。​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">webgl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vertexAttribPointer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(positionLocation, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, webgl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FLOAT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 启用顶点属性数组。具体来说，它告诉 WebGL 在后续的绘制操作中使用指定位置的顶点属性。​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">webgl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">enableVertexAttribArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(positionLocation);</span></span></code></pre></div><p><code>WebGLRenderingContext.getUniformLocation(program,name)</code>：是一个用于获取顶点着色器或片元着色器中 uniform 变量的 WebGLRenderingContext 方法。通过 uniform 变量的名称来获取其在 WebGL 程序中的位置，和 getAttribLocation 用法类似。​</p><ul><li>参数 program：WebProgram 程序对象​</li><li>参数 name：是 uniform 变量的名称，需要确保名称与着色器中定义的一致。​</li></ul><p><code>WebGLRenderingContext.uniform[1234][fi][v]</code>：用于设置顶点属性的数据。这些方法有多个变体，分别适用于不同数量和类型的数据。具体有：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uniform1f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location, v0)​</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uniform1fv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location, value)​</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uniform1i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location, v0)​</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uniform1iv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location, value)​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uniform2f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location, v0, v1)​</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uniform2fv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location, value)​</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uniform2i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location, v0, v1)​</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uniform2iv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location, value)​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uniform3f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location, v0, v1, v2)​</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uniform3fv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location, value)​</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uniform3i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location, v0, v1, v2)​</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uniform3iv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location, value)​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uniform4f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location, v0, v1, v2, v3)​</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uniform4fv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location, value)​</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uniform4i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location, v0, v1, v2, v3)​</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uniform4iv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location, value)</span></span></code></pre></div><h2 id="顶点索引绘制图形​" tabindex="-1">顶点索引绘制图形​ <a class="header-anchor" href="#顶点索引绘制图形​" aria-label="Permalink to &quot;顶点索引绘制图形​&quot;">​</a></h2><p><code>gl.drawElements()</code> 是 WebGL 中用于渲染图元（primitives）的函数之一，它通常与顶点缓冲和元素数组缓冲结合使用，用来绘制复杂的几何图形，比如三角形网格、线条等。​</p><p>负责根据顶点数据和索引（元素数组）来绘制图元。它从元素数组缓冲中读取索引，这些索引指示了顶点缓冲中哪些顶点构成哪些图元（如三角形或线段）。​</p><p>参数：​</p><ul><li><p>mode：指定要绘制的图元的类型。​</p><ul><li><code>gl.POINTS</code>：将每个顶点作为一个点来绘制。​</li><li><code>gl.LINES</code>：将每两个顶点作为一条线段来绘制。​</li><li><code>gl.LINE_STRIP</code>：将每个顶点与其后继顶点形成的线段依次相连。​</li><li><code>gl.LINE_LOOP</code>：与 gl.LINE_STRIP 类似，但最后一个顶点和第一个顶点会形成闭合的线环。​</li><li><code>gl.TRIANGLES</code>：将每三个顶点作为一个三角形来绘制。​</li><li><code>gl.TRIANGLE_STRIP</code>：将每个顶点与前两个顶点形成的三角形依次相连。​</li><li><code>gl.TRIANGLE_FAN</code>：将每个顶点与第一个顶点和前一个顶点形成的三角形依次相连。​</li></ul></li><li><p>count：指定要绘制的索引数量，即元素数组中的索引数目。每个索引对应一个顶点。​</p></li><li><p>type：指定元素数组缓冲区中的索引数据类型。​</p><ul><li><code>gl.UNSIGNED_BYTE</code>：8 位无符号整数。​</li><li><code>gl.UNSIGNED_SHORT</code>：16 位无符号整数。​</li><li><code>gl.UNSIGNED_INT</code>：32 位无符号整数。​</li></ul></li><li><p>offset：指定元素数组缓冲区中的偏移量，即从缓冲区的哪个位置开始读取索引数据。默认为 0。​</p></li></ul><p>用法：​</p><ol><li><p>绑定缓冲区：首先需要通过 <code>gl.bindBuffer()</code> 方法绑定顶点缓冲区和元素数组缓冲区。​</p></li><li><p>设置顶点属性指针：使用 <code>gl.vertexAttribPointer()</code> 来指定顶点属性（如位置、颜色等）在缓冲区中的布局。​</p></li><li><p>启用顶点属性：通过 <code>gl.enableVertexAttribArray()</code> 启用顶点属性数组。​</p></li><li><p>绘制调用：最后调用 <code>gl.drawElements()</code> 来绘制图元，传入绘制模式、索引数量、索引类型和偏移量等参数。</p></li></ol>`,62)]))}const o=i(e,[["render",t]]);export{g as __pageData,o as default};
