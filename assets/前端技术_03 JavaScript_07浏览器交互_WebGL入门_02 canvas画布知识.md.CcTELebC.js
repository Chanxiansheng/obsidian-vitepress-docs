import{_ as s,c as i,o as n,ag as t}from"./chunks/framework.-ewJmwvT.js";const o=JSON.parse('{"title":"02 canvas 画布知识","description":"","frontmatter":{},"headers":[],"relativePath":"前端技术/03 JavaScript/07浏览器交互/WebGL入门/02 canvas画布知识.md","filePath":"前端技术/03 JavaScript/07浏览器交互/WebGL入门/02 canvas画布知识.md"}'),e={name:"前端技术/03 JavaScript/07浏览器交互/WebGL入门/02 canvas画布知识.md"};function l(p,a,h,c,d,r){return n(),i("div",null,a[0]||(a[0]=[t(`<h1 id="_02-canvas-画布知识" tabindex="-1">02 canvas 画布知识 <a class="header-anchor" href="#_02-canvas-画布知识" aria-label="Permalink to &quot;02 canvas 画布知识&quot;">​</a></h1><p><code>&lt;canvas&gt;</code> 元素是 HTML5 提供的一个用于绘制图形的区域，它可以通过 JavaScript 动态地渲染图形内容。<code>&lt;canvas&gt;</code> 可用于绘制图形、动画、图表、游戏以及实时数据可视化等。​</p><p>可以在 canvas 画布上绘制 2D 或者 3D 图形，这取决于渲染上下文对象是 2D 还是 3D。</p><h2 id="获取渲染上下文​" tabindex="-1">获取渲染上下文​ <a class="header-anchor" href="#获取渲染上下文​" aria-label="Permalink to &quot;获取渲染上下文​&quot;">​</a></h2><p><code>HTMLCanvasElement.getContext()</code> 方法用于返回绘图上下文对象，绘图上下文对象是 2D 上下文还是 3D 上下文取决于传入的参数。​</p><ul><li><p><code>getContext(&#39;2d&#39;)</code>：创建一个 CanvasRenderingContext2D 二维的渲染上下文对象​</p></li><li><p><code>getContext(&#39;webgl&#39;)</code>：创建一个 WebGLRenderingContext 三维的渲染上下文对象​</p></li></ul><h2 id="画布宽高设置​" tabindex="-1">画布宽高设置​ <a class="header-anchor" href="#画布宽高设置​" aria-label="Permalink to &quot;画布宽高设置​&quot;">​</a></h2><p>Canvas 画布默认会在页面中占据一块位置，这块位置的大小默认是 300 * 150。虽然 canvas 是一个元素，可以通过 CSS 样式属性来设置这个元素的宽和高，但是通常不推荐使用 CSS 样式属性来设置画布的宽高。​</p><p>因为使用 CSS 属性只是影响画布元素在网页上显示的尺寸，并不会改变画布的分辨率。即使使用 CSS 样式改变了画布的大小，但是画布的分辨率还是默认的 300 * 150，在显示上的缩放会导致绘制的图形失真或者模糊。​</p><p>Canvas 有两个属性：width 和 height，这两个属性定义了画布的实际尺寸，也就是会更改画布绘图的分辨率。​</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 正确用法：通过固有属性进行设置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">canvas</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;600&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;600&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 错误用法：设置css style</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">canvas {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	width:600px;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	height:600px;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>使用 HTML 属性来设置宽高可以：​</p><ul><li><p>避免图像失真：使用 HTML 属性来设置画布的宽度和高度确保了绘图操作是在正确的分辨率下进行的。如果使用 CSS 设置尺寸，画布的分辨率不会改变，绘制的图像可能会被拉伸或压缩，从而导致失真。​</p></li><li><p>更好地控制分辨率：在高分辨率设备（如 Retina 显示屏）上，通过 HTML 属性设置宽度和高度可以确保绘制的内容具有足够的像素密度，避免模糊。​</p></li><li><p>一致的绘图结果：HTML 属性设置的宽度和高度确保了绘制操作的坐标系统是一致的。这对于复杂的绘图操作或需要精确控制图像位置和尺寸的场景尤其重要。​</p></li></ul>`,13)]))}const E=s(e,[["render",l]]);export{o as __pageData,E as default};
