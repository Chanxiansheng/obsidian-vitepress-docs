import{_ as t,c as i,o as a,ae as e}from"./chunks/framework.CIivgcbp.js";const c=JSON.parse('{"title":"ESLint","description":"","frontmatter":{},"headers":[],"relativePath":"前端技术/03 JavaScript/11第三方JS库与工具/格式化与检查工具/ESLint.md","filePath":"前端技术/03 JavaScript/11第三方JS库与工具/格式化与检查工具/ESLint.md"}'),n={name:"前端技术/03 JavaScript/11第三方JS库与工具/格式化与检查工具/ESLint.md"};function d(l,s,o,h,p,r){return a(),i("div",null,s[0]||(s[0]=[e(`<h1 id="eslint" tabindex="-1">ESLint <a class="header-anchor" href="#eslint" aria-label="Permalink to &quot;ESLint&quot;">​</a></h1><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p><a href="https://zh-hans.eslint.org/docs/latest/use/getting-started" target="_blank" rel="noreferrer">ESLint 入门 - ESLint - 插件化的 JavaScript 代码检查工具</a></p></div><h2 id="什么是-eslint" tabindex="-1">什么是 ESLint <a class="header-anchor" href="#什么是-eslint" aria-label="Permalink to &quot;什么是 ESLint&quot;">​</a></h2><p>ESLint 是一个根据方案识别并报告 ECMAScript/JavaScript 代码问题的工具，其目的是使代码风格更加一致并避免错误。</p><h2 id="安装使用" tabindex="-1">安装使用 <a class="header-anchor" href="#安装使用" aria-label="Permalink to &quot;安装使用&quot;">​</a></h2><ol><li><p><strong>安装</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 一体化安装</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @eslint/config</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 手动安装（须自行添加 .eslintrc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 文件）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint</span></span></code></pre></div></li><li><p><strong>配置文件</strong>：在运行 <code>npm init @eslint/config</code> 后，你的目录下会有 <code>.eslintrc.{js,yml,json}</code> 文件。在里面你可以看到类似于这样的一些已经配置好了的规则：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	&quot;rules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		&quot;semi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;always&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		&quot;quotes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;double&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>命令行运行</strong>：在此之后，你可以像这样使用 ESLint 检查任一文件或目录：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yourfile.js</span></span></code></pre></div></li><li><p><strong>编辑器集成</strong>：为避免每次都运行命令行，建议安装插件在编辑期间实时检查，例如 VSCode <a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint" target="_blank" rel="noreferrer">ESLint - Visual Studio Marketplace</a></p></li></ol><hr><h2 id="配置-eslint" tabindex="-1">配置 ESLint <a class="header-anchor" href="#配置-eslint" aria-label="Permalink to &quot;配置 ESLint&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>==本文为 8.x.x 版本的配置风格，9 版本有新的配置系统==</p></div><ol><li><p><strong>配置文件格式</strong><br> ESLint 支持<strong>JavaScript</strong>（<code>.eslintrc.js</code>）、<strong>YAML</strong>（<code>.eslintrc.yaml</code>）、<strong>JSON</strong>（<code>.eslintrc.json</code>）三种结构化配置风格。</p></li><li><p><strong>指定环境</strong><br> 在配置文件中使用 <code>env</code> 键指定环境，并通过将每个环境设置为 <code>true</code> 来启用想要的环境。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	&quot;env&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		&quot;browser&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		&quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>配置规则</strong><br> 规则是 ESLint 的核心构建块。规则会验证 你的代码是否符合预期，以及如果不符合预期该怎么做。规则还可以包含针对该规则的额外配置项。<br> 要在配置文件中配置规则，请使用 <code>rules</code> 键和一个错误级别以及任何你想使用的选项。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	&quot;rules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		&quot;eqeqeq&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;off&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		&quot;curly&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		&quot;quotes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;double&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>要改变规则的设置，你必须把规则 ID 设置为这些值之一：</p><ul><li><code>&quot;off&quot;</code> 或 <code>0</code> - 关闭规则</li><li><code>&quot;warn&quot;</code> 或 <code>1</code> - 启用并视作警告（不影响退出）</li><li><code>&quot;error&quot;</code> 或 <code>2</code> - 启用并视作错误（触发时退出代码为 1）<br> 通常会将规则设置为 <code>&quot;error&quot;</code> 以便在持续集成测试、pre- commit 检查和拉取请求合并中强制遵守规则，而 ESLint 则以非零代码退出。</li></ul></li><li><p><strong>配置插件</strong><br> 要在配置文件内配置插件，请使用 <code>plugins</code> 键，它应该是由插件名称组成的列表。可以省略插件名称中的 <code>eslint-plugin-</code> 前缀。</p></li><li><p><strong>配置解析器</strong><br> 默认情况下，ESLint 使用 <a href="https://github.com/eslint/espree" target="_blank" rel="noreferrer">Espree</a> 作为解析器。要指定 npm 模块作为解析，需要在 <code>.eslintrc</code> 文件中使用 <code>parser</code> 选项指定。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	&quot;parser&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;esprima&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	&quot;rules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		&quot;semi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>配置忽略文件</strong><br> 可以在配置文件中使用 <code>ignorePatterns</code> 来告诉 ESLint 忽略特定的文件和目录。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	&quot;ignorePatterns&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;temp.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;**/vendor/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	&quot;rules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		//...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><hr><h2 id="常用规则" tabindex="-1">常用规则 <a class="header-anchor" href="#常用规则" aria-label="Permalink to &quot;常用规则&quot;">​</a></h2><p>以下是从 ESLint 规则中总结的常用规则表格（按分类整理）：</p><h3 id="possible-problems-潜在问题" tabindex="-1">Possible Problems（潜在问题） <a class="header-anchor" href="#possible-problems-潜在问题" aria-label="Permalink to &quot;Possible Problems（潜在问题）&quot;">​</a></h3><table tabindex="0"><thead><tr><th>规则名</th><th>描述</th><th>自动修复</th></tr></thead><tbody><tr><td><code>no-unused-vars</code></td><td>禁止未使用的变量</td><td>✅</td></tr><tr><td><code>no-undef</code></td><td>禁止使用未声明的变量</td><td>❌</td></tr><tr><td><code>no-dupe-keys</code></td><td>禁止对象字面量中的重复键</td><td>❌</td></tr><tr><td><code>no-duplicate-case</code></td><td>禁止重复的 <code>case</code> 标签</td><td>❌</td></tr><tr><td><code>no-debugger</code></td><td>禁止使用 <code>debugger</code></td><td>❌</td></tr><tr><td><code>no-constant-condition</code></td><td>禁止在条件中使用常量表达式</td><td>❌</td></tr><tr><td><code>no-await-in-loop</code></td><td>禁止在循环中使用 <code>await</code></td><td>❌</td></tr></tbody></table><h3 id="suggestions-代码建议" tabindex="-1">Suggestions（代码建议） <a class="header-anchor" href="#suggestions-代码建议" aria-label="Permalink to &quot;Suggestions（代码建议）&quot;">​</a></h3><table tabindex="0"><thead><tr><th>规则名</th><th>描述</th><th>自动修复</th></tr></thead><tbody><tr><td><code>eqeqeq</code></td><td>要求使用 $===$ 和 $!==$ 代替 $==$ 和 $!=$</td><td>✅</td></tr><tr><td><code>camelcase</code></td><td>强制使用驼峰命名法</td><td>❌</td></tr><tr><td><code>arrow-body-style</code></td><td>要求箭头函数体使用大括号或简写</td><td>✅</td></tr><tr><td><code>prefer-const</code></td><td>建议用 <code>const</code> 声明未重新赋值的变量</td><td>✅</td></tr><tr><td><code>no-var</code></td><td>禁止使用 <code>var</code>，推荐 <code>let</code> 或 <code>const</code></td><td>✅</td></tr><tr><td><code>prefer-template</code></td><td>建议使用模板字符串代替字符串拼接</td><td>✅</td></tr><tr><td><code>no-console</code></td><td>禁止使用 <code>console</code></td><td>❌</td></tr></tbody></table><h3 id="layout-formatting-代码格式" tabindex="-1">Layout &amp; Formatting（代码格式） <a class="header-anchor" href="#layout-formatting-代码格式" aria-label="Permalink to &quot;Layout &amp; Formatting（代码格式）&quot;">​</a></h3><table tabindex="0"><thead><tr><th>规则名</th><th>描述</th><th>自动修复</th></tr></thead><tbody><tr><td><code>indent</code></td><td>强制一致的缩进风格（如 2 空格/4 空格）</td><td>✅</td></tr><tr><td><code>quotes</code></td><td>强制统一使用单引号或双引号</td><td>✅</td></tr><tr><td><code>semi</code></td><td>强制语句末尾使用分号</td><td>✅</td></tr><tr><td><code>comma-dangle</code></td><td>强制对象/数组末尾是否带逗号</td><td>✅</td></tr><tr><td><code>max-len</code></td><td>限制单行最大长度（如 80/120 字符）</td><td>❌</td></tr><tr><td><code>object-curly-spacing</code></td><td>强制对象字面量大括号内的空格</td><td>✅</td></tr><tr><td><code>keyword-spacing</code></td><td>强制关键字前后的空格（如 <code>if ()</code>）</td><td>✅</td></tr></tbody></table><h3 id="其他重要规则" tabindex="-1">其他重要规则 <a class="header-anchor" href="#其他重要规则" aria-label="Permalink to &quot;其他重要规则&quot;">​</a></h3><table tabindex="0"><thead><tr><th>规则名</th><th>分类</th><th>描述</th><th>自动修复</th></tr></thead><tbody><tr><td><code>no-empty</code></td><td>Possible</td><td>禁止空代码块</td><td>❌</td></tr><tr><td><code>no-multi-spaces</code></td><td>Formatting</td><td>禁止连续多个空格</td><td>✅</td></tr><tr><td><code>no-trailing-spaces</code></td><td>Formatting</td><td>禁止行尾空格</td><td>✅</td></tr><tr><td><code>no-unreachable</code></td><td>Possible</td><td>禁止不可达代码</td><td>❌</td></tr><tr><td><code>no-implicit-globals</code></td><td>Suggestions</td><td>禁止隐式全局变量</td><td>❌</td></tr></tbody></table>`,21)]))}const E=t(n,[["render",d]]);export{c as __pageData,E as default};
