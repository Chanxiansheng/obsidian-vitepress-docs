import{_ as s,c as i,o as t,ae as n}from"./chunks/framework.CIivgcbp.js";const a="/obsidian-vitepress-docs/assets/09-events%E6%A8%A1%E5%9D%97-1.B41DNGoH.png",c=JSON.parse('{"title":"09-events 模块","description":"","frontmatter":{},"headers":[],"relativePath":"服务端/NodeJS/NodeJS笔记/09-events模块.md","filePath":"服务端/NodeJS/NodeJS笔记/09-events模块.md"}'),r={name:"服务端/NodeJS/NodeJS笔记/09-events模块.md"};function l(p,e,h,k,o,d){return t(),i("div",null,e[0]||(e[0]=[n('<h1 id="_09-events-模块" tabindex="-1">09-events 模块 <a class="header-anchor" href="#_09-events-模块" aria-label="Permalink to &quot;09-events 模块&quot;">​</a></h1><p><a href="https://nodejs.cn/api/events.html#%E4%BA%8B%E4%BB%B6" target="_blank" rel="noreferrer">events 事件触发器 | Node.js v22 文档</a></p><p>许多 Node.js 核心 API 都是围绕惯用的==异步事件驱动架构==构建的，在该架构中，某些类型的对象（称为 &quot; 触发器 &quot;）触发命名事件，导致调用 Function 对象（&quot; 监听器 &quot;）。</p><p>这是一种 ==发布订阅设计模式== <a href="./../../../前端技术/03 JavaScript/04异步编程/发布-订阅模式.html">发布-订阅模式</a></p><p><img src="'+a+`" alt="attachments/09-events模块-1.png"></p><p>当一个发布者有新消息时，就将这个消息发布到调度中心。调度中心就会将这个消息通知给所有订阅者。这就实现了发布者和订阅者之间的解耦，发布者和订阅者不再直接依赖于彼此，他们可以独立地扩展自己。</p><h2 id="eventemitter-类" tabindex="-1">EventEmitter 类 <a class="header-anchor" href="#eventemitter-类" aria-label="Permalink to &quot;EventEmitter 类&quot;">​</a></h2><p>EventEmitter 是事件发布者的意思，每个实例可以绑定多个监听事件，一个监听事件也可以绑定多个回调函数，由 <code>node:events</code> 模块定义和暴露：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> EventEmitter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:events&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> emitter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventEmitter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//监听test</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">emitter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;event&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">emitter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;event&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//派发事件</span></span></code></pre></div><p>所有 <code>EventEmitter</code> 在添加新监听器时触发事件 <code>&#39;newListener&#39;</code>，在删除现有监听器时触发 <code>&#39;removeListener&#39;</code>。</p><ul><li><a href="https://nodejs.cn/api/events.html#%E4%BA%8B%E4%BB%B6newlistener" target="_blank" rel="noreferrer">事件：<code>&#39;newListener&#39;</code></a></li><li><a href="https://nodejs.cn/api/events.html#%E4%BA%8B%E4%BB%B6removelistener" target="_blank" rel="noreferrer">事件：<code>&#39;removeListener&#39;</code></a></li></ul><p>每一个 emitter 实例具有以下方法：</p><ul><li><p><a href="https://nodejs.cn/api/events.html#emitteroneventname-listener" target="_blank" rel="noreferrer"><code>emitter.on(eventName, listener)</code></a> ：绑定事件</p></li><li><p><a href="https://nodejs.cn/api/events.html#emitteraddlistenereventname-listener" target="_blank" rel="noreferrer"><code>emitter.addListener(eventName, listener)</code></a> 别名，为保持 web 风格，作用同 on</p></li><li><p><a href="https://nodejs.cn/api/events.html#emitteronceeventname-listener" target="_blank" rel="noreferrer"><code>emitter.once(eventName, listener)</code></a> 绑定只能触发一次的事件</p></li><li><p><a href="https://nodejs.cn/api/events.html#emitteremiteventname-args" target="_blank" rel="noreferrer"><code>emitter.emit(eventName[, ...args])</code></a> 触发事件</p></li><li><p><a href="https://nodejs.cn/api/events.html#emitterremovelistenereventname-listener" target="_blank" rel="noreferrer"><code>emitter.removeListener(eventName, listener)</code></a> 解绑事件</p></li><li><p><a href="https://nodejs.cn/api/events.html#emitteroffeventname-listener" target="_blank" rel="noreferrer"><code>emitter.off(eventName, listener)</code></a> 同 removeListener</p></li><li><p><a href="https://nodejs.cn/api/events.html#emitterremovealllistenerseventname" target="_blank" rel="noreferrer"><code>emitter.removeAllListeners([eventName])</code></a> 解绑该发布者下的所有事件</p></li><li><p><a href="https://nodejs.cn/api/events.html#emittergetmaxlisteners" target="_blank" rel="noreferrer"><code>emitter.getMaxListeners()</code></a> 返回 EventEmitter 的当前最大监听器数的值，默认 10</p></li><li><p><a href="https://nodejs.cn/api/events.html#emittereventnames" target="_blank" rel="noreferrer"><code>emitter.eventNames()</code></a></p></li><li><p><a href="https://nodejs.cn/api/events.html#emitterlistenercounteventname-listener" target="_blank" rel="noreferrer"><code>emitter.listenerCount(eventName[, listener])</code></a></p></li><li><p><a href="https://nodejs.cn/api/events.html#emitterlistenerseventname" target="_blank" rel="noreferrer"><code>emitter.listeners(eventName)</code></a></p></li><li><p><a href="https://nodejs.cn/api/events.html#emitterprependlistenereventname-listener" target="_blank" rel="noreferrer"><code>emitter.prependListener(eventName, listener)</code></a></p></li><li><p><a href="https://nodejs.cn/api/events.html#emitterprependoncelistenereventname-listener" target="_blank" rel="noreferrer"><code>emitter.prependOnceListener(eventName, listener)</code></a></p></li><li><p><a href="https://nodejs.cn/api/events.html#emittersetmaxlistenersn" target="_blank" rel="noreferrer"><code>emitter.setMaxListeners(n)</code></a></p></li><li><p><a href="https://nodejs.cn/api/events.html#emitterrawlistenerseventname" target="_blank" rel="noreferrer"><code>emitter.rawListeners(eventName)</code></a></p></li><li><p><a href="https://nodejs.cn/api/events.html#emittersymbolfornodejsrejectionerr-eventname-args" target="_blank" rel="noreferrer"><code>emitter[Symbol.for(&#39;nodejs.rejection&#39;)](err, eventName[, ...args])</code></a></p></li></ul><h2 id="process-on-源码" tabindex="-1">process.on 源码 <a class="header-anchor" href="#process-on-源码" aria-label="Permalink to &quot;process.on 源码&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setupProcessObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> EventEmitter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;events&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> origProcProto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ObjectGetPrototypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ObjectSetPrototypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(origProcProto, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">EventEmitter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  FunctionPrototypeCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(EventEmitter, process);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ObjectDefineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process, SymbolToStringTag, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    __proto__: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    enumerable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    writable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    configurable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    value: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;process&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span></code></pre></div><ol><li>它首先引入 event 模块</li><li>获取 process 的原型对象</li><li>将 evnet 的原型对象设给了 process 的原型对象</li><li>并且重新绑定上下文</li><li>将 process 挂载到 globalThis 所以我们可以全局访问这个 API</li></ol>`,16)]))}const m=s(r,[["render",l]]);export{c as __pageData,m as default};
