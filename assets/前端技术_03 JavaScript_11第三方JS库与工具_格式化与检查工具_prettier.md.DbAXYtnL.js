import{_ as i,c as t,o as a,ag as e}from"./chunks/framework.-ewJmwvT.js";const c=JSON.parse('{"title":"prettier 代码格式化工具","description":"","frontmatter":{},"headers":[],"relativePath":"前端技术/03 JavaScript/11第三方JS库与工具/格式化与检查工具/prettier.md","filePath":"前端技术/03 JavaScript/11第三方JS库与工具/格式化与检查工具/prettier.md"}'),n={name:"前端技术/03 JavaScript/11第三方JS库与工具/格式化与检查工具/prettier.md"};function l(p,s,r,d,h,o){return a(),t("div",null,s[0]||(s[0]=[e(`<h1 id="prettier-代码格式化工具" tabindex="-1">prettier 代码格式化工具 <a class="header-anchor" href="#prettier-代码格式化工具" aria-label="Permalink to &quot;prettier 代码格式化工具&quot;">​</a></h1><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>官方文档：<a href="https://prettier.io/" target="_blank" rel="noreferrer">Prettier · Opinionated Code Formatter · Prettier</a><br> 官方地址：<a href="https://github.com/prettier/prettier" target="_blank" rel="noreferrer">GitHub - prettier/prettier: Prettier is an opinionated code formatter.</a><br> 中文文档：<a href="https://prettier.nodejs.cn/docs/install" target="_blank" rel="noreferrer">安装 · Prettier 中文网</a></p></div><h2 id="什么是-prettier" tabindex="-1">什么是 Prettier？ <a class="header-anchor" href="#什么是-prettier" aria-label="Permalink to &quot;什么是 Prettier？&quot;">​</a></h2><p>Prettier 是一个有态度的代码格式化程序，支持：</p><ul><li>JavaScript（包括实验性功能）</li><li>JSX</li><li>Angular</li><li>Vue</li><li>Flow</li><li>TypeScript</li><li>CSS、Less 和 SCSS</li><li>HTML</li><li>Ember/Handlebars</li><li>JSON</li><li>GraphQL</li><li>Markdown，包括 GFM 和 MDX v1</li><li>YAML<br> 它删除所有原始风格并确保所有输出的代码都符合一致的风格。</li></ul><blockquote><p>[!question] Prettier 与 Linter<br> Linter 有两类规则：</p><ol><li><p><strong>格式规则</strong>：例如：max-len、no-mixed-spaces-and-tabs、keyword-spacing、comma-style…<br> Prettier 减轻了对这一整类规则的需求！Prettier 将以一致的方式从头开始重新打印整个程序，因此程序员不可能再犯错误了:)</p></li><li><p><strong>代码质量规则</strong>：例如 no-unused-vars、no-extra-bind、no-implicit-globals、prefer-promise-reject-errors……<br> Prettier 对这些规则没有任何帮助。它们也是 linters 提供的最重要的东西，因为它们很可能会捕获你代码中的真正错误！</p></li></ol><p>==换句话说，使用 Prettier 进行格式化，使用 linter 捕获错误！==</p></blockquote><h2 id="安装使用" tabindex="-1">安装使用 <a class="header-anchor" href="#安装使用" aria-label="Permalink to &quot;安装使用&quot;">​</a></h2><ol><li><p><strong>安装 prettier 库</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prettier</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span></code></pre></div></li><li><p><strong>配置文件</strong>：创建一个空的配置文件，让编辑器和其他工具知道你正在使用 Prettier（直接手动创建文件亦可）：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --eval</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;fs.writeFileSync(&#39;.prettierrc&#39;,&#39;{}\\n&#39;)&quot;</span></span></code></pre></div></li><li><p><strong>忽略文件</strong>：创建一个 <code>.prettierignore</code> 文件，让 Prettier CLI 和编辑器知道哪些文件不要格式化（直接手动创建文件亦可）：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --eval</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;fs.writeFileSync(&#39;.prettierignore&#39;,&#39;# Ignore artifacts:\\nbuild\\ncoverage\\n&#39;)&quot;</span></span></code></pre></div></li><li><p><strong>格式化 CLI 命令</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prettier</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --write</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> or</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prettier</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --write</span></span></code></pre></div></li><li><p><strong>编辑器集成</strong>：为了在编辑器中自动格式化使用，需要配合 IDE 插件。例如 VSCode 安装 <a href="https://github.com/prettier/prettier-vscode" target="_blank" rel="noreferrer">GitHub - prettier/prettier-vscode: Visual Studio Code extension for Prettier</a></p></li><li><p><strong>插件</strong>：如果希望扩展其功能到其他语言，可以通过在 <code>.prettierrc</code> 配置文件进行插件的导入，例如扩展 tailwindcss 的顺序化功能：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 提前安装：\`npm i prettier-plugin-tailwindcss -D\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .prettierrc配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;plugins&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;prettier-plugin-tailwindcss&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><h2 id="配置选项-常用" tabindex="-1">配置选项（常用） <a class="header-anchor" href="#配置选项-常用" aria-label="Permalink to &quot;配置选项（常用）&quot;">​</a></h2><table tabindex="0"><thead><tr><th>配置项</th><th>默认值</th><th>有效值</th><th>描述</th></tr></thead><tbody><tr><td><code>printWidth</code></td><td>80</td><td>整数</td><td>控制换行的近似行长度（非硬性限制）</td></tr><tr><td><code>tabWidth</code></td><td>2</td><td>整数</td><td>缩进空格数</td></tr><tr><td><code>useTabs</code></td><td>false</td><td>bool</td><td>使用制表符 (Tab) 缩进</td></tr><tr><td><code>semi</code></td><td>true</td><td>bool</td><td>是否在语句末尾添加分号</td></tr><tr><td><code>singleQuote</code></td><td>false</td><td>bool</td><td>使用单引号（会根据内容自动优化引号比例）</td></tr><tr><td><code>jsxSingleQuote</code></td><td>false</td><td>bool</td><td>在 JSX 中使用单引号</td></tr><tr><td><code>trailingComma</code></td><td>&quot;all&quot;</td><td>&quot;all&quot;|&quot;es5&quot;|&quot;none&quot;</td><td>在多行逗号分隔的语法结构中添加尾随逗号（<code>all</code> 包含函数参数）</td></tr><tr><td><code>bracketSpacing</code></td><td>true</td><td>bool</td><td>对象大括号间是否添加空格（<code>{ foo: bar }</code> vs <code>{foo: bar}</code>）</td></tr><tr><td><code>bracketSameLine</code></td><td>false</td><td>bool</td><td>多行 HTML/JSX 闭合标签是否与内容同行</td></tr><tr><td><code>arrowParens</code></td><td>&quot;always&quot;</td><td>&quot;always&quot;|&quot;avoid&quot;</td><td>箭头函数单个参数是否添加括号（<code>(x) =&gt; x</code> vs <code>x =&gt; x</code>）</td></tr><tr><td><code>endOfLine</code></td><td>&quot;lf&quot;</td><td>&quot;lf&quot;|&quot;crlf&quot;|&quot;cr&quot;|&quot;auto&quot;</td><td>换行符格式（推荐使用 <code>lf</code> 保证跨平台一致性）</td></tr><tr><td><code>proseWrap</code></td><td>&quot;preserve&quot;</td><td>&quot;always&quot;|&quot;never&quot;|&quot;preserve&quot;</td><td>Markdown 文本换行方式（<code>preserve</code> 保持原样）</td></tr><tr><td><code>htmlWhitespaceSensitivity</code></td><td>&quot;css&quot;</td><td>&quot;css&quot;|&quot;strict&quot;|&quot;ignore&quot;</td><td>HTML/JSX 空格敏感模式（<code>css</code> 按 CSS 显示规则处理）</td></tr><tr><td><code>embeddedLanguageFormatting</code></td><td>&quot;auto&quot;</td><td>&quot;auto&quot;|&quot;off&quot;</td><td>是否自动格式化嵌入的代码（如模板字符串中的 HTML）</td></tr><tr><td><code>singleAttributePerLine</code></td><td>false</td><td>bool</td><td>HTML/JSX 是否强制每个属性单独一行</td></tr></tbody></table><p><code>.prettierrc</code> 配置示例：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .prettierrc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;printWidth&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 每行代码数量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;tabWidth&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 缩进的空格个数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;useTabs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 制表符使用空格还是tab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;semi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 末尾是否添加分号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;singleQuote&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用单引号还是双引号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;trailingComma&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;all&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在多行逗号分隔的语法结构中是否添加尾随逗号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;bracketSpacing&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 对象大括号是否带空格</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;bracketSameLine&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 多行 HTML/JSX 闭合标签与内容同行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;arrowParens&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;always&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 箭头符号参数始终带括号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;endOfLine&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 换行符</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,12)]))}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
