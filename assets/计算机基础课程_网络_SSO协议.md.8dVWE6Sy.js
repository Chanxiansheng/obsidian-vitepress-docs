import{_ as s,c as a,o as i,ag as n}from"./chunks/framework.-ewJmwvT.js";const u=JSON.parse('{"title":"SSO 协议","description":"","frontmatter":{},"headers":[],"relativePath":"计算机基础课程/网络/SSO协议.md","filePath":"计算机基础课程/网络/SSO协议.md"}'),l={name:"计算机基础课程/网络/SSO协议.md"};function r(e,t,o,g,d,h){return i(),a("div",null,t[0]||(t[0]=[n(`<h1 id="sso-协议" tabindex="-1">SSO 协议 <a class="header-anchor" href="#sso-协议" aria-label="Permalink to &quot;SSO 协议&quot;">​</a></h1><p>#待补（程度：高）</p><p>​<strong>​OIDC（OpenID Connect）​</strong>​ 和 ​<strong>​SAML（Security Assertion Markup Language）​</strong>​ 是两种主流的身份认证与单点登录（SSO）协议。</p><h2 id="​saml-security-assertion-markup-language" tabindex="-1">​SAML（Security Assertion Markup Language） <a class="header-anchor" href="#​saml-security-assertion-markup-language" aria-label="Permalink to &quot;​SAML（Security Assertion Markup Language）&quot;">​</a></h2><h4 id="_1-​基本概念​​" tabindex="-1">1. ​基本概念​​ <a class="header-anchor" href="#_1-​基本概念​​" aria-label="Permalink to &quot;1. ​基本概念​​&quot;">​</a></h4><ul><li>​<strong>​诞生时间​</strong>​：2005 年（OASIS 标准）。</li><li>​<strong>​协议基础​</strong>​：基于 ​<strong>​XML​</strong>​ 的协议，用于在身份提供者（IdP）和服务提供者（SP）之间交换认证和授权数据。</li><li>​<strong>​核心角色​</strong>​： <ul><li>​<strong>​Identity Provider (IdP)​</strong>​：管理用户身份（如公司 AD）。</li><li>​<strong>​Service Provider (SP)​</strong>​：提供具体服务的应用（如 Salesforce）。</li></ul></li></ul><h4 id="_2-​工作原理​" tabindex="-1">2. ​工作原理​ <a class="header-anchor" href="#_2-​工作原理​" aria-label="Permalink to &quot;2. ​工作原理​&quot;">​</a></h4><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sequenceDiagram</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    User-&gt;&gt;SP: 访问应用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SP-&gt;&gt;IdP: 生成SAML Request（重定向）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    IdP-&gt;&gt;User: 要求登录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    User-&gt;&gt;IdP: 提交凭证</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    IdP-&gt;&gt;SP: 生成SAML Response（包含断言）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SP-&gt;&gt;User: 授权访问</span></span></code></pre></div><ul><li>​<strong>​关键组件​</strong>​： <ul><li>​<strong>​SAML Assertion​</strong>​：XML 格式的声明，包含用户身份和权限。</li><li>​<strong>​签名与加密​</strong>​：使用 XML Signature 和 XML Encryption 保障安全。</li></ul></li></ul><h4 id="_3-​​适用场景​​" tabindex="-1">3. ​​适用场景​​ <a class="header-anchor" href="#_3-​​适用场景​​" aria-label="Permalink to &quot;3. ​​适用场景​​&quot;">​</a></h4><ul><li>​<strong>​企业级 SSO​</strong>​：内网应用（如 Office 365、内部系统）。</li><li>​<strong>​跨组织协作​</strong>​：B2B 场景（如供应商访问企业门户）。</li><li>​<strong>​遗留系统集成​</strong>​：支持 SAML 的传统应用。</li></ul><h4 id="_4-​​优缺点​​" tabindex="-1">4. ​​优缺点​​ <a class="header-anchor" href="#_4-​​优缺点​​" aria-label="Permalink to &quot;4. ​​优缺点​​&quot;">​</a></h4><ul><li>​<strong>​优点​</strong>​： <ul><li>成熟稳定，企业广泛支持。</li><li>支持复杂属性传递（如用户角色、部门）。</li></ul></li><li>​<strong>​缺点​</strong>​： <ul><li>XML 冗长，解析性能低。</li><li>配置复杂（需处理证书、元数据交换）。</li></ul></li></ul><h2 id="​​oidc-openid-connect-​" tabindex="-1">​​OIDC（OpenID Connect）​ <a class="header-anchor" href="#​​oidc-openid-connect-​" aria-label="Permalink to &quot;​​OIDC（OpenID Connect）​&quot;">​</a></h2><h4 id="_1-​​基本概念​​" tabindex="-1">1. ​​基本概念​​ <a class="header-anchor" href="#_1-​​基本概念​​" aria-label="Permalink to &quot;1. ​​基本概念​​&quot;">​</a></h4><ul><li>​<strong>​诞生时间​</strong>​：2014 年（基于 OAuth 2.0 的扩展）。</li><li>​<strong>​协议基础​</strong>​：基于 ​<strong>​JSON​</strong>​ 的轻量协议，专注于身份认证。</li><li>​<strong>​核心角色​</strong>​： <ul><li>​<strong>​OpenID Provider (OP)​</strong>​：身份提供者（如 Google、Auth0）。</li><li>​<strong>​Relying Party (RP)​</strong>​：依赖方（客户端应用）。</li></ul></li></ul><h4 id="_2-​​工作原理​" tabindex="-1">2. ​​工作原理​ <a class="header-anchor" href="#_2-​​工作原理​" aria-label="Permalink to &quot;2. ​​工作原理​&quot;">​</a></h4><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sequenceDiagram</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    User-&gt;&gt;RP: 访问应用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RP-&gt;&gt;OP: 生成OIDC Auth Request（重定向）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP-&gt;&gt;User: 要求登录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    User-&gt;&gt;OP: 提交凭证</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP-&gt;&gt;RP: 返回Authorization Code</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RP-&gt;&gt;OP: 用Code换取ID Token</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OP-&gt;&gt;RP: 返回ID Token（JWT格式）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RP-&gt;&gt;User: 授权访问</span></span></code></pre></div><ul><li>​<strong>​关键组件​</strong>​： <ul><li>​<strong>​ID Token​</strong>​：JWT 格式，包含用户身份信息。</li><li>​<strong>​UserInfo Endpoint​</strong>​：通过 OAuth 令牌获取用户属性。</li></ul></li></ul><h4 id="_3-​​适用场景​​-1" tabindex="-1">3. ​​适用场景​​ <a class="header-anchor" href="#_3-​​适用场景​​-1" aria-label="Permalink to &quot;3. ​​适用场景​​&quot;">​</a></h4><ul><li>​<strong>​现代 Web/移动应用​</strong>​：SPA、移动 App（如微信登录）。</li><li>​<strong>​社交登录​</strong>​：集成 Google、Facebook 等第三方登录。</li><li>​<strong>​微服务架构​</strong>​：API 间的身份传递（JWT 作为 Bearer Token）。</li></ul><h4 id="_4-​​优缺点​-​" tabindex="-1">4. ​​优缺点​**​ <a class="header-anchor" href="#_4-​​优缺点​-​" aria-label="Permalink to &quot;4. ​​优缺点​**​&quot;">​</a></h4><ul><li>​<strong>​优点​</strong>​： <ul><li>轻量、易用（JSON + RESTful API）。</li><li>原生支持移动端和现代前端框架。</li><li>灵活的扩展性（如自定义 Claims）。</li></ul></li><li>​<strong>​缺点​</strong>​： <ul><li>不擅长复杂属性管理（需依赖 UserInfo 端点）。</li><li>企业级生态支持弱于 SAML。</li></ul></li></ul><h2 id="​​saml-vs-oidc-核心对比​" tabindex="-1">​​SAML vs OIDC 核心对比​ <a class="header-anchor" href="#​​saml-vs-oidc-核心对比​" aria-label="Permalink to &quot;​​SAML vs OIDC 核心对比​&quot;">​</a></h2><table tabindex="0"><thead><tr><th>​<strong>​维度​</strong>​</th><th>​<strong>​SAML​</strong>​</th><th>​<strong>​OIDC​</strong>​</th></tr></thead><tbody><tr><td>​<strong>​协议基础​</strong>​</td><td>XML（SOAP/HTTP-POST 绑定）</td><td>JSON（基于 OAuth 2.0）</td></tr><tr><td>​<strong>​数据格式​</strong>​</td><td>冗长、严格结构</td><td>简洁、易解析（JWT）</td></tr><tr><td>​<strong>​典型场景​</strong>​</td><td>企业内网 SSO、B2B 协作</td><td>社交登录、移动/现代 Web 应用</td></tr><tr><td>​<strong>​传输方式​</strong>​</td><td>依赖浏览器重定向（Form POST）</td><td>支持多种方式（Code/PKCE/Implicit）</td></tr><tr><td>​<strong>​安全机制​</strong>​</td><td>XML 签名/加密</td><td>JWT 签名 + HTTPS</td></tr><tr><td>​<strong>​性能开销​</strong>​</td><td>高（XML 解析复杂）</td><td>低（JSON 解析高效）</td></tr><tr><td>​<strong>​生态系统​</strong>​</td><td>企业工具链成熟（ADFS、Okta）</td><td>开发者友好（Auth0、Firebase）</td></tr></tbody></table>`,25)]))}const c=s(l,[["render",r]]);export{u as __pageData,c as default};
