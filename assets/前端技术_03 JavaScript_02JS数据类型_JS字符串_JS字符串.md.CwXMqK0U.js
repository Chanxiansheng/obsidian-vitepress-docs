import{_ as d,c as a,o as r,ag as e}from"./chunks/framework.-ewJmwvT.js";const b=JSON.parse('{"title":"JS 字符串","description":"","frontmatter":{},"headers":[],"relativePath":"前端技术/03 JavaScript/02JS数据类型/JS字符串/JS字符串.md","filePath":"前端技术/03 JavaScript/02JS数据类型/JS字符串/JS字符串.md"}'),i={name:"前端技术/03 JavaScript/02JS数据类型/JS字符串/JS字符串.md"};function s(o,t,l,n,h,c){return r(),a("div",null,t[0]||(t[0]=[e('<h1 id="js-字符串" tabindex="-1">JS 字符串 <a class="header-anchor" href="#js-字符串" aria-label="Permalink to &quot;JS 字符串&quot;">​</a></h1><h2 id="字符串的创建" tabindex="-1">字符串的创建 <a class="header-anchor" href="#字符串的创建" aria-label="Permalink to &quot;字符串的创建&quot;">​</a></h2><ol><li>字面量<br><code>let str = &quot;&quot;</code></li><li>对象<br><code>let strObj = new String(&quot;&quot;)</code></li></ol><p>字面量形式的返回类型就是 String，而对象创建返回的是 Object。</p><blockquote><p>非必要不要创建 String 对象。因为会拖慢执行速度，并可能产生其他副作用</p></blockquote><h2 id="字符串的属性" tabindex="-1">字符串的属性 <a class="header-anchor" href="#字符串的属性" aria-label="Permalink to &quot;字符串的属性&quot;">​</a></h2><p>length 返回字符串的长度</p><h2 id="字符串的方法" tabindex="-1">字符串的方法 <a class="header-anchor" href="#字符串的方法" aria-label="Permalink to &quot;字符串的方法&quot;">​</a></h2><table tabindex="0"><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>charAt()</td><td>返回指定索引位置的字符</td></tr><tr><td>charCodeAt()</td><td>返回指定索引位置字符的 Unicode 值</td></tr><tr><td>concat()</td><td>连接两个或多个字符串，返回连接后的字符串</td></tr><tr><td>fromCharCode()</td><td>将 Unicode 转换为字符串</td></tr><tr><td>indexOf()</td><td>返回字符串中检索指定字符第一次出现的位置</td></tr><tr><td>lastIndexOf()</td><td>返回字符串中检索指定字符最后一次出现的位置</td></tr><tr><td>localeCompare()</td><td>用本地特定的顺序来比较两个字符串</td></tr><tr><td>match()</td><td>找到一个或多个正则表达式的匹配</td></tr><tr><td>replace()</td><td>替换与正则表达式匹配的子串</td></tr><tr><td>search()</td><td>检索与正则表达式相匹配的值</td></tr><tr><td>slice()</td><td>提取字符串的片断，并在新的字符串中返回被提取的部分</td></tr><tr><td>split()</td><td>把字符串分割为子字符串数组</td></tr><tr><td>substr()</td><td>从起始索引号提取字符串中指定数目的字符</td></tr><tr><td>substring()</td><td>提取字符串中两个指定的索引号之间的字符</td></tr><tr><td>toLocaleLowerCase()</td><td>根据主机的语言环境把字符串转换为小写，只有几种语言（如土耳其语）具有地方特有的大小写映射</td></tr><tr><td>toLocaleUpperCase()</td><td>根据主机的语言环境把字符串转换为大写，只有几种语言（如土耳其语）具有地方特有的大小写映射</td></tr><tr><td>toLowerCase()</td><td>把字符串转换为小写</td></tr><tr><td>toString()</td><td>返回字符串对象值</td></tr><tr><td>toUpperCase()</td><td>把字符串转换为大写</td></tr><tr><td>trim()</td><td>移除字符串首尾空白</td></tr><tr><td>valueOf()</td><td>返回某个字符串对象的原始值</td></tr></tbody></table><h2 id="字符串模板" tabindex="-1">字符串模板 <a class="header-anchor" href="#字符串模板" aria-label="Permalink to &quot;字符串模板&quot;">​</a></h2><p>JavaScript 中的模板字符串是一种方便的字符串语法，允许你在字符串中嵌入表达式和变量。<br> 使用反引号`作为字符串的定界符分隔的字面量。<br> 使用 ${}包裹 js 表达式。<br> 语法：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `text ${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">表达式</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}`</span></span></code></pre></div>',12)]))}const k=d(i,[["render",s]]);export{b as __pageData,k as default};
