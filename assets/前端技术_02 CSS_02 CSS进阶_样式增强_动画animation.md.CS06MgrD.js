import{_ as s,c as a,o as n,ag as e}from"./chunks/framework.-ewJmwvT.js";const c=JSON.parse('{"title":"动画 animation","description":"","frontmatter":{},"headers":[],"relativePath":"前端技术/02 CSS/02 CSS进阶/样式增强/动画animation.md","filePath":"前端技术/02 CSS/02 CSS进阶/样式增强/动画animation.md"}'),l={name:"前端技术/02 CSS/02 CSS进阶/样式增强/动画animation.md"};function t(p,i,h,k,r,o){return n(),a("div",null,i[0]||(i[0]=[e(`<h1 id="动画-animation" tabindex="-1">动画 animation <a class="header-anchor" href="#动画-animation" aria-label="Permalink to &quot;动画 animation&quot;">​</a></h1><p>CSS 可实现 HTML 元素的动画效果，而不使用 JavaScript 或 Flash！</p><h2 id="什么是-css-动画" tabindex="-1">什么是 CSS 动画？ <a class="header-anchor" href="#什么是-css-动画" aria-label="Permalink to &quot;什么是 CSS 动画？&quot;">​</a></h2><p>动画使元素逐渐从一种样式变为另一种样式。<br> 您可以随意更改任意数量的 CSS 属性。<br> 如需使用 CSS 动画，您必须首先为动画指定一些关键帧。<br> 关键帧包含元素在特定时间所拥有的样式。</p><h2 id="keyframes-规则" tabindex="-1">@keyframes 规则 <a class="header-anchor" href="#keyframes-规则" aria-label="Permalink to &quot;@keyframes 规则&quot;">​</a></h2><p>@keyframes 规则是创建动画。<br> @keyframes 规则内指定一个 CSS 样式和动画将逐步从目前的样式更改为新的样式。<br> 语法：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@keyframes</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> animationname </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	keyframes-selector1 {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">css-styles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	keyframes-selector2 {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">css-styles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	keyframes-selector3 {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">css-styles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>animationname : 定义 animation 的名称。</li><li>keyframes-selector : 动画持续时间的百分比，合法值：<br> 0-100%<br> to (和 100% 相同)<br> from (和 0% 相同)</li><li>css-styles：一个或多个合法的 CSS 样式属性</li></ul><p>示例：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@keyframes</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> bgChange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	0%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;} </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	25%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">yellow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;} </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	50%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">blue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;} </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	100%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">green</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="animation-使用" tabindex="-1">animation 使用 <a class="header-anchor" href="#animation-使用" aria-label="Permalink to &quot;animation 使用&quot;">​</a></h2><p>当在 <strong>@keyframes</strong> 创建动画，把它绑定到一个选择器，否则动画不会有任何效果。<br> 指定至少这两个 CSS3 的动画属性绑定向一个选择器：</p><ul><li><p>规定动画的名称</p></li><li><p>规定动画的时长</p></li><li><p><code>animation</code> 简写属性，所有动画属性的简写属性。<br><code>animation: name duration timing-function delay iteration-count direction fill-mode play-state;</code></p></li><li><p><code>animation-name</code> @keyframes 动画指定名称。</p></li><li><p><code>animation-duration</code> 定义动画完成一个周期需要多少秒或毫秒。默认是 0。</p><ul><li>time: 单位为 s 或 ms</li></ul></li><li><p><code>animation-timing-function</code> 规定动画效果的时间曲线。默认是 &quot;ease&quot;。</p><ul><li>linear: 线性速度 （等于 cubic-bezier (0,0,1,1)）</li><li>ease: 慢 - 快 - 慢 （cubic-bezier (0.25,0.1,0.25,1)）</li><li>ease-in：以慢速开始（等于 cubic-bezier (0.42,0,1,1)）</li><li>ease-out：以慢速结束（等于 cubic-bezier (0,0,0.58,1)）</li><li>ease-in-out：以慢速开始和结束（等于 cubic-bezier (0.42,0,0.58,1)）</li><li>cubic-bezier (<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>) 函数<br> 三次贝塞尔曲线由 P0、P1、P2 和 P3 四个点进行定义。P0 和 P3 是曲线的起点和终点，在 CSS 中，这两个点是固定的，因为坐标是成比例。P0 为 (0, 0)，代表初始时间和初始状态，P3 为 (1, 1)，代表最终时间和最终状态。</li><li>steps(int,start|end)<br> 指定了时间函数中的间隔数量（步长），有两个参数。<br> 第一个参数指定函数的间隔数，该参数是一个正整数（大于 0）。<br> 第二个参数是可选的，表示动画是从时间段的开头连续还是末尾连续。start：表示直接开始。end：默认值，表示戛然而止。</li></ul></li><li><p><code>animation-delay</code> 设置动画在启动前的延迟间隔。默认是 0。</p><ul><li>time: 单位为 s 或 ms</li></ul></li><li><p><code>animation-iteration-count</code> 定义动画应该播放多少次。默认是 1。</p><ul><li>n: 一个数字，定义应该播放多少次动画</li><li>infinite：无限循环</li></ul></li><li><p><code>animation-direction</code> 定义是否循环交替反向播放动画。</p><ul><li>normal: 默认值。动画按正常播放。</li><li>reverse：动画反向播放。</li><li>alternate：动画在奇数次正向播放，在偶数次反向播放。</li><li>alternate-reverse：动画在奇数次反向播放，在偶数次正向播放。</li></ul></li><li><p><code>animation-fill-mode</code> 属性规定当动画不播放时（当动画完成时，或当动画有一个延迟未开始播放时），要应用到元素的样式。</p><ul><li>none: 默认值。动画在动画执行之前和之后不会应用任何样式到目标元素。</li><li>forwards：在动画结束后（由 animation-iteration-count 决定），动画将应用该属性值。</li><li>backwards：动画将应用在 animation-delay 定义期间启动动画的第一次迭代的关键帧中定义的属性值。这些都是 from 关键帧中的值（当 animation-direction 为 &quot;normal&quot; 或 &quot;alternate&quot; 时）或 to 关键帧中的值（当 animation-direction 为 &quot;reverse&quot; 或 &quot;alternate-reverse&quot; 时）。</li><li>both：动画遵循 forwards 和 backwards 的规则。也就是说，动画会在两个方向上扩展动画属性。</li></ul></li><li><p><code>animation-play-state</code> 指定动画是否正在运行或已暂停。配合 JS 使用</p><ul><li>paused: 指定暂停动画</li><li>running：指定正在运行的动画</li></ul></li></ul><p>示例：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	animation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: bgChange </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> infinite</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> alternate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,15)]))}const E=s(l,[["render",t]]);export{c as __pageData,E as default};
