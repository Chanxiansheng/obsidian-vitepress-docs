import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.-ewJmwvT.js";const E=JSON.parse('{"title":"05-os 模块","description":"","frontmatter":{},"headers":[],"relativePath":"服务端/NodeJS/NodeJS笔记/05-os模块.md","filePath":"服务端/NodeJS/NodeJS笔记/05-os模块.md"}'),e={name:"服务端/NodeJS/NodeJS笔记/05-os模块.md"};function h(t,s,p,k,r,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="_05-os-模块" tabindex="-1">05-os 模块 <a class="header-anchor" href="#_05-os-模块" aria-label="Permalink to &quot;05-os 模块&quot;">​</a></h1><blockquote><p><a href="https://nodejs.cn/api/os.html#os" target="_blank" rel="noreferrer">os 操作系统 | Node.js v22 文档</a></p></blockquote><p><code>node:os</code> 模块提供了与操作系统相关的实用方法和属性。可以使用以下方式访问它：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> os</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:os&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="常用-api" tabindex="-1">常用 API <a class="header-anchor" href="#常用-api" aria-label="Permalink to &quot;常用 API&quot;">​</a></h2><h3 id="os-arch" tabindex="-1"><code>os.arch()</code> <a class="header-anchor" href="#os-arch" aria-label="Permalink to &quot;\`os.arch()\`&quot;">​</a></h3><p>返回为其编译 Node.js 二进制文件的操作系统 CPU 架构。可能的值为 &#39;arm&#39;、&#39;arm64&#39;、&#39;ia32&#39;、&#39;loong64&#39;、&#39;mips&#39;、&#39;mipsel&#39;、&#39;ppc&#39;、&#39;ppc64&#39;、&#39;riscv64&#39;、&#39;s390&#39;、&#39;s390x&#39; 和 &#39;x64&#39;。</p><h3 id="os-platform" tabindex="-1"><code>os.platform()</code> <a class="header-anchor" href="#os-platform" aria-label="Permalink to &quot;\`os.platform()\`&quot;">​</a></h3><p>返回标识为其编译 Node.js 二进制文件的操作系统平台的字符串。该值在编译时设置。可能的值为 &#39;aix&#39;、&#39;darwin&#39;、&#39;freebsd&#39;、&#39;linux&#39;、&#39;openbsd&#39;、&#39;sunos&#39;、以及 &#39;win32&#39;。</p><h3 id="os-version" tabindex="-1"><code>os.version()</code> <a class="header-anchor" href="#os-version" aria-label="Permalink to &quot;\`os.version()\`&quot;">​</a></h3><p>返回标识内核版本的字符串。</p><h3 id="os-homedir" tabindex="-1"><code>os.homedir()</code> <a class="header-anchor" href="#os-homedir" aria-label="Permalink to &quot;\`os.homedir()\`&quot;">​</a></h3><p>返回当前用户的主目录的字符串路径。</p><p>在 POSIX 上，它使用 <code>$HOME</code> 环境变量（如果已定义）。否则它使用 <a href="https://en.wikipedia.org/wiki/User_identifier#Effective_user_ID" target="_blank" rel="noreferrer">有效的 UID</a> 来查找用户的主目录。</p><p>在 Windows 上，它使用 <code>USERPROFILE</code> 环境变量（如果已定义）。否则，它使用当前用户的配置文件目录的路径。</p><h3 id="os-cpus" tabindex="-1"><code>os.cpus()</code> <a class="header-anchor" href="#os-cpus" aria-label="Permalink to &quot;\`os.cpus()\`&quot;">​</a></h3><p>返回包含有关每个逻辑 CPU 内核的信息的对象数组。如果没有可用的 CPU 信息，例如 /proc 文件系统不可用，则该数组将为空。</p><ul><li>每个对象上包含的属性包括： <ul><li>model</li><li>speed （以兆赫为单位）</li><li>times <ul><li>user CPU 在用户模式下花费的毫秒数。</li><li>nice CPU 在良好模式下花费的毫秒数。</li><li>sys CPU 在系统模式下花费的毫秒数。</li><li>idle CPU 在空闲模式下花费的毫秒数。</li><li>irq CPU 在中断请求模式下花费的毫秒数。</li></ul></li></ul></li></ul><h3 id="os-networkinterfaces" tabindex="-1"><code>os.networkInterfaces()</code> <a class="header-anchor" href="#os-networkinterfaces" aria-label="Permalink to &quot;\`os.networkInterfaces()\`&quot;">​</a></h3><p>返回包含已分配网络地址的网络接口的对象。</p><p>返回对象上的每个键都标识一个网络接口。关联的值是每个对象描述一个分配的网络地址的对象数组。</p><ul><li>分配的网络地址对象上可用的属性包括： <ul><li>address 分配的 IPv4 或 IPv6 地址</li><li>netmask IPv4 或 IPv6 网络掩码</li><li>family IPv4 或 IPv6</li><li>mac 网络接口的 MAC 地址</li><li>internal true 如果网络接口是环回接口或不可远程访问的类似接口；否则 false</li><li>scopeid 数字的 IPv6 范围 ID（仅在 family 为 IPv6 时指定）</li><li>cidr 使用 CIDR 表示法的路由前缀分配的 IPv4 或 IPv6 地址。如果 netmask 无效，则此属性设置为 null。</li></ul></li></ul><h2 id="案例-打开网页" tabindex="-1">案例：打开网页 <a class="header-anchor" href="#案例-打开网页" aria-label="Permalink to &quot;案例：打开网页&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:os&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:child_process&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 打开浏览器</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - The target URL that needs to be opened in the default browser</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> openBrowser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Mac OS</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;darwin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;open &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Windows</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;win32&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;start &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // linux</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;linux&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xdg-open &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openBrowser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://www.baidu.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,24)]))}const c=i(e,[["render",h]]);export{E as __pageData,c as default};
