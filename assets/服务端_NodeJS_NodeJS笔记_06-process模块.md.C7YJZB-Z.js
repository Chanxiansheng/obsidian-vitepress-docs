import{_ as e,c as i,o as a,ae as n}from"./chunks/framework.CIivgcbp.js";const d=JSON.parse('{"title":"06-process 模块","description":"","frontmatter":{},"headers":[],"relativePath":"服务端/NodeJS/NodeJS笔记/06-process模块.md","filePath":"服务端/NodeJS/NodeJS笔记/06-process模块.md"}'),r={name:"服务端/NodeJS/NodeJS笔记/06-process模块.md"};function l(t,s,p,h,o,c){return a(),i("div",null,s[0]||(s[0]=[n(`<h1 id="_06-process-模块" tabindex="-1">06-process 模块 <a class="header-anchor" href="#_06-process-模块" aria-label="Permalink to &quot;06-process 模块&quot;">​</a></h1><blockquote><p><a href="https://nodejs.cn/api/process.html" target="_blank" rel="noreferrer">process 进程 | Node.js v22 文档</a></p></blockquote><p><code>process</code> 对象提供有关当前 Node.js 进程的信息并对其进行控制。<br> process 是 挂载到 globalThis 下面的全局 API。</p><h2 id="进程事件" tabindex="-1">进程事件 <a class="header-anchor" href="#进程事件" aria-label="Permalink to &quot;进程事件&quot;">​</a></h2><p><code>process</code> 对象是 <a href="https://nodejs.cn/api/events.html#class-eventemitter" target="_blank" rel="noreferrer"><code>EventEmitter</code></a> 的实例，有各种生命周期钩子，类似 addEventListener 的异步编程模式。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> process</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:process&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;beforeExit&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Process beforeExit event with code: &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, code);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;exit&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Process exit event with code: &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, code);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><ul><li><a href="https://nodejs.cn/api/process.html#%E4%BA%8B%E4%BB%B6beforeexit" target="_blank" rel="noreferrer">事件：<code>&#39;beforeExit&#39;</code></a></li><li><a href="https://nodejs.cn/api/process.html#%E4%BA%8B%E4%BB%B6disconnect" target="_blank" rel="noreferrer">事件：<code>&#39;disconnect&#39;</code></a></li><li><a href="https://nodejs.cn/api/process.html#%E4%BA%8B%E4%BB%B6exit" target="_blank" rel="noreferrer">事件：<code>&#39;exit&#39;</code></a></li><li><a href="https://nodejs.cn/api/process.html#%E4%BA%8B%E4%BB%B6message" target="_blank" rel="noreferrer">事件：<code>&#39;message&#39;</code></a></li><li><a href="https://nodejs.cn/api/process.html#%E4%BA%8B%E4%BB%B6multipleresolves" target="_blank" rel="noreferrer">事件：<code>&#39;multipleResolves&#39;</code></a></li><li><a href="https://nodejs.cn/api/process.html#%E4%BA%8B%E4%BB%B6rejectionhandled" target="_blank" rel="noreferrer">事件：<code>&#39;rejectionHandled&#39;</code></a></li><li><a href="https://nodejs.cn/api/process.html#%E4%BA%8B%E4%BB%B6workermessage" target="_blank" rel="noreferrer">事件：<code>&#39;workerMessage&#39;</code></a></li><li><a href="https://nodejs.cn/api/process.html#%E4%BA%8B%E4%BB%B6uncaughtexception" target="_blank" rel="noreferrer">事件：<code>&#39;uncaughtException&#39;</code></a></li><li><a href="https://nodejs.cn/api/process.html#%E4%BA%8B%E4%BB%B6uncaughtexceptionmonitor" target="_blank" rel="noreferrer">事件：<code>&#39;uncaughtExceptionMonitor&#39;</code></a></li><li><a href="https://nodejs.cn/api/process.html#%E4%BA%8B%E4%BB%B6unhandledrejection" target="_blank" rel="noreferrer">事件：<code>&#39;unhandledRejection&#39;</code></a></li><li><a href="https://nodejs.cn/api/process.html#%E4%BA%8B%E4%BB%B6warning" target="_blank" rel="noreferrer">事件：<code>&#39;warning&#39;</code></a></li><li><a href="https://nodejs.cn/api/process.html#%E4%BA%8B%E4%BB%B6worker" target="_blank" rel="noreferrer">事件：<code>&#39;worker&#39;</code></a></li></ul><h2 id="常用-api" tabindex="-1">常用 Api <a class="header-anchor" href="#常用-api" aria-label="Permalink to &quot;常用 Api&quot;">​</a></h2><h3 id="process-arch" tabindex="-1"><code>process.arch</code> <a class="header-anchor" href="#process-arch" aria-label="Permalink to &quot;\`process.arch\`&quot;">​</a></h3><p>为其编译 Node.js 二进制文件的操作系统 CPU 架构。<br> 可能的值是：&#39;arm&#39;、&#39;arm64&#39;、&#39;ia32&#39;、&#39;loong64&#39;、&#39;mips&#39;、&#39;mipsel&#39;、&#39;ppc&#39;、&#39;ppc64&#39;、&#39;riscv64&#39;、&#39;s390&#39;、&#39;s390x&#39; 和 &#39;x64&#39;。</p><h3 id="process-argv" tabindex="-1"><code>process.argv</code> <a class="header-anchor" href="#process-argv" aria-label="Permalink to &quot;\`process.argv\`&quot;">​</a></h3><p><code>process.argv</code> 属性返回数组，其中包含启动 Node.js 进程时传入的命令行参数。<br> 第一个元素将是 <a href="https://nodejs.cn/api/process.html#processexecpath" target="_blank" rel="noreferrer"><code>process.execPath</code></a>。如果需要访问 <code>argv[0]</code> 的原始值，请参阅 <code>process.argv0</code>。<br> 第二个元素将是正在执行的 JavaScript 文件的路径。<br> 其余元素将是任何其他命令行参数。</p><h3 id="process-cwd" tabindex="-1"><code>process.cwd()</code> <a class="header-anchor" href="#process-cwd" aria-label="Permalink to &quot;\`process.cwd()\`&quot;">​</a></h3><p>返回 Node.js 进程的当前工作目录。esm 模式下无法使用 <code>__dirname</code>，则可以用 cwd() 代替。</p><h3 id="process-memoryusage" tabindex="-1"><code>process.memoryUsage()</code> <a class="header-anchor" href="#process-memoryusage" aria-label="Permalink to &quot;\`process.memoryUsage()\`&quot;">​</a></h3><p>返回描述 Node.js 进程的内存使用量（以字节为单位）的对象。</p><ul><li>属性包含： <ul><li>rss ：常驻集大小，是进程在主内存设备（即总分配内存的子集）中占用的空间量，包括所有 C++ 和 JavaScript 对象和代码。</li><li>heapTotal ：堆区总大小</li><li>heapUsed ：已用堆大小</li><li>external ：外部内存使用量</li><li>arrayBuffers ：指为 ArrayBuffer 和 SharedArrayBuffer 分配的内存，包括所有 Node.js Buffer。这也包含在 external 值中。</li></ul></li></ul><h3 id="process-exit-code" tabindex="-1"><code>process.exit([code])</code> <a class="header-anchor" href="#process-exit-code" aria-label="Permalink to &quot;\`process.exit([code])\`&quot;">​</a></h3><p><code>process.exit()</code> 方法指示 Node.js 以 code 的退出状态同步终止进程。如果省略 code，则退出使用 &#39;success&#39; 代码 0 或 <code>process.exitCode</code> 的值（如果已设置）。直到所有 <a href="https://nodejs.cn/api/process.html#event-exit" target="_blank" rel="noreferrer"><code>&#39;exit&#39;</code></a> 事件监听器都被调用，Node.js 才会终止。</p><h3 id="process-kill-pid-signal" tabindex="-1"><code>process.kill(pid[, signal])</code> <a class="header-anchor" href="#process-kill-pid-signal" aria-label="Permalink to &quot;\`process.kill(pid[, signal])\`&quot;">​</a></h3><p>process.kill() 方法将 signal 发送到由 pid 标识的进程。</p><p>信号名称是字符串，例如 <code>&#39;SIGINT&#39;</code> 或 <code>&#39;SIGHUP&#39;</code>。有关详细信息，请参阅 <a href="https://nodejs.cn/api/process.html#signal-events" target="_blank" rel="noreferrer">信号事件</a> 和 <a href="http://man7.org/linux/man-pages/man2/kill.2.html" target="_blank" rel="noreferrer"><code>kill(2)</code></a>。</p><p>如果目标 pid 不存在，则此方法将抛出错误。作为特殊情况，可以使用信号 <code>0</code> 来测试进程是否存在。如果使用 pid 来杀死进程组，则 Windows 平台将抛出错误。</p><p>尽管此函数的名字是 <code>process.kill()</code>，但它实际上只是信号发送者，就像 kill 系统调用。发送的信号可能会做其他事情而不是杀死目标进程。</p><h3 id="process-env" tabindex="-1"><code>process.env</code> <a class="header-anchor" href="#process-env" aria-label="Permalink to &quot;\`process.env\`&quot;">​</a></h3><p>返回包含用户环境的对象。<br> 此对象的示例如下所示：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  TERM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xterm-256color&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  SHELL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/usr/local/bin/bash&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  USER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;maciej&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  PATH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;~/.bin/:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  PWD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/Users/maciej&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  EDITOR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;vim&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  SHLVL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  HOME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/Users/maciej&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  LOGNAME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;maciej&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  _</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/usr/local/bin/node&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>cross-env 库<br> cross-env 是一个运行跨平台设置和使用环境变量的脚本工具，它帮助开发人员在不同操作系统上设置和运行环境变量，确保代码的可移植性。<br> 开发人员可能会使用 NODE_ENV 环境变量来标识当前是否处于开发模式或生产模式。</li></ul>`,28)]))}const E=e(r,[["render",l]]);export{d as __pageData,E as default};
