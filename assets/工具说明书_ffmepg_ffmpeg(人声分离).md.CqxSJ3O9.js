import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.-ewJmwvT.js";const c=JSON.parse('{"title":"ffmpeg","description":"","frontmatter":{},"headers":[],"relativePath":"工具说明书/ffmepg/ffmpeg(人声分离).md","filePath":"工具说明书/ffmepg/ffmpeg(人声分离).md"}'),h={name:"工具说明书/ffmepg/ffmpeg(人声分离).md"};function p(l,s,n,d,o,k){return e(),a("div",null,s[0]||(s[0]=[t('<h1 id="ffmpeg" tabindex="-1">ffmpeg <a class="header-anchor" href="#ffmpeg" aria-label="Permalink to &quot;ffmpeg&quot;">​</a></h1><h2 id="下载视频" tabindex="-1">下载视频 <a class="header-anchor" href="#下载视频" aria-label="Permalink to &quot;下载视频&quot;">​</a></h2><h3 id="使用-you-get-下载视频" tabindex="-1">使用 you-get 下载视频 <a class="header-anchor" href="#使用-you-get-下载视频" aria-label="Permalink to &quot;使用 you-get 下载视频&quot;">​</a></h3><p><a href="https://github.com/soimort/you-get" target="_blank" rel="noreferrer">GitHub - soimort/you-get: :arrow_double_down: Dumb downloader that scrapes the web</a></p><ul><li>下载视频（默认的下载路径 在用户的文件夹下 ）<br><code>You-get &#39;视频链接&#39;</code></li><li>查看视频质量和信息<br><code>You-get -i &#39;视频链接&#39;</code></li><li>下载指定清晰度和视频（查到信息之后，下载指定视频，如果不指定，默认是第一个）<br><code>You-get –fomat=flv-360 &#39;视频链接&#39;</code></li><li>cookies 目前只支持 火狐和 netscape<br><code>You-get --cookies=cookies路径 &#39;视频链接&#39;</code></li></ul><h3 id="使用-lux-下载视频" tabindex="-1">使用 lux 下载视频 <a class="header-anchor" href="#使用-lux-下载视频" aria-label="Permalink to &quot;使用 lux 下载视频&quot;">​</a></h3><p><a href="https://github.com/iawia002/lux" target="_blank" rel="noreferrer">GitHub - iawia002/lux: Fast and simple video download library and CLI tool written in Go</a></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">lux.exe</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cookies.txt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://www.bilibili.com/video/BV17G4y1T7Tz/</span></span></code></pre></div><h2 id="人声分离" tabindex="-1">人声分离 <a class="header-anchor" href="#人声分离" aria-label="Permalink to &quot;人声分离&quot;">​</a></h2><p>使用 FFmpeg 去除 MP4 格式视频文件中的人声，可以通过以下步骤实现：</p><h3 id="_1-提取视频中的音频" tabindex="-1">1. <strong>提取视频中的音频</strong> <a class="header-anchor" href="#_1-提取视频中的音频" aria-label="Permalink to &quot;1. **提取视频中的音频**&quot;">​</a></h3><p>使用 FFmpeg 提取视频中的音频文件：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffmpeg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input.mp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -vn</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -codec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> copy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> audio.m4a</span></span></code></pre></div><p>然后将提取的音频转换为 MP3 格式（因为 Spleeter 示例中使用的是 MP3 文件）：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffmpeg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> audio.m4a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -acodec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libmp3lame</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -aq</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> audio.mp3</span></span></code></pre></div><h3 id="_2-使用-spleeter-分离音频" tabindex="-1">2. <strong>使用 Spleeter 分离音频</strong> <a class="header-anchor" href="#_2-使用-spleeter-分离音频" aria-label="Permalink to &quot;2. **使用 Spleeter 分离音频**&quot;">​</a></h3><p>安装 Spleeter：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spleeter</span></span></code></pre></div><p>使用 Spleeter 分离人声和背景音乐：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">spleeter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> separate</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spleeter:2stems</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> audio.mp3</span></span></code></pre></div><p>这会在 <code>output</code> 文件夹中生成两个文件：<code>accompaniment.wav</code>（背景音乐）和 <code>vocals.wav</code>（人声）。</p><h3 id="_3-将背景音乐与原视频合并" tabindex="-1">3. <strong>将背景音乐与原视频合并</strong> <a class="header-anchor" href="#_3-将背景音乐与原视频合并" aria-label="Permalink to &quot;3. **将背景音乐与原视频合并**&quot;">​</a></h3><p>首先，移除原视频中的音频：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffmpeg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input.mp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -an</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -codec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> copy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -q:v</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input-silent.mp4</span></span></code></pre></div><p>然后将背景音乐与无声视频合并：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffmpeg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input-silent.mp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output/audio/accompaniment.wav</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c:v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> copy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c:a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> aac</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -strict</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> experimental</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output.mp4</span></span></code></pre></div><h2 id="去除水印" tabindex="-1">去除水印 <a class="header-anchor" href="#去除水印" aria-label="Permalink to &quot;去除水印&quot;">​</a></h2><p>使用 FFmpeg 去除 B 站视频右上角水印的方法如下：</p><h3 id="_1-使用-delogo-滤镜" tabindex="-1">1. 使用 <code>delogo</code> 滤镜 <a class="header-anchor" href="#_1-使用-delogo-滤镜" aria-label="Permalink to &quot;1. 使用 `delogo` 滤镜&quot;">​</a></h3><p><code>delogo</code> 滤镜可以用于去除视频中的水印。你需要知道水印的具体位置和大小。假设水印的位置在视频的右上角，位置为 <code>(x, y)</code>，大小为 <code>(w, h)</code>，可以使用以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffmpeg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input.mp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -vf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;delogo=x=x:y=y:w=w:h=h&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c:a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> copy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output.mp4</span></span></code></pre></div><p>其中：</p><ul><li><p><code>x</code> 和 <code>y</code> 是水印的左上角坐标。</p></li><li><p><code>w</code> 和 <code>h</code> 是水印的宽度和高度。</p></li><li><p><code>show</code> 参数（可选）：如果设置为 1，将显示一个矩形，表示删除的区域。默认值是 0。</p></li></ul><p>例如，假设水印的位置为 <code>(x=100, y=100)</code>，大小为 <code>(w=200, h=50)</code>，可以使用以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffmpeg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input.mp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -vf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;delogo=x=100:y=100:w=200:h=50&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c:a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> copy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output.mp4</span></span></code></pre></div><h3 id="_2-使用-drawbox-滤镜" tabindex="-1">2. 使用 <code>drawbox</code> 滤镜 <a class="header-anchor" href="#_2-使用-drawbox-滤镜" aria-label="Permalink to &quot;2. 使用 `drawbox` 滤镜&quot;">​</a></h3><p>如果 <code>delogo</code> 滤镜的效果不理想，可以使用 <code>drawbox</code> 滤镜在水印区域绘制一个矩形来覆盖水印。这个方法适用于水印区域较小的情况。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffmpeg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input.mp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -vf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;drawbox=x=x:y=y:w=w:h=h:color=black:t=fill&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c:a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> copy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output.mp4</span></span></code></pre></div><p>其中：</p><ul><li><p><code>x</code> 和 <code>y</code> 是矩形的左上角坐标。</p></li><li><p><code>w</code> 和 <code>h</code> 是矩形的宽度和高度。</p></li><li><p><code>color</code> 是矩形的颜色，可以是颜色名称（如 <code>black</code>、<code>white</code>）或十六进制颜色代码（如 <code>#ff0000</code>）。</p></li><li><p><code>t=fill</code> 表示填充整个区域。</p></li></ul><p>例如，假设水印的位置为 <code>(x=100, y=100)</code>，大小为 <code>(w=200, h=50)</code>，可以使用以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffmpeg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input.mp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -vf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;drawbox=x=100:y=100:w=200:h=50:color=black:t=fill&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c:a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> copy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output.mp4</span></span></code></pre></div><h3 id="_3-调试水印位置" tabindex="-1">3. 调试水印位置 <a class="header-anchor" href="#_3-调试水印位置" aria-label="Permalink to &quot;3. 调试水印位置&quot;">​</a></h3><p>在去除水印之前，可以使用 <code>ffplay</code> 命令来预览水印位置，确保参数设置正确：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffplay</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input.mp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -vf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;delogo=x=100:y=100:w=200:h=50:show=1&quot;</span></span></code></pre></div><p>这将显示一个绿色的矩形，帮助你确定水印的位置是否正确。如果位置不正确，可以调整 <code>x</code>、<code>y</code>、<code>w</code>、<code>h</code> 参数。</p>',46)]))}const F=i(h,[["render",p]]);export{c as __pageData,F as default};
