import{_ as s,c as l,o as a,ag as t}from"./chunks/framework.-ewJmwvT.js";const r=JSON.parse('{"title":"03_JSX","description":"","frontmatter":{},"headers":[],"relativePath":"前端技术/08 React/03_JSX.md","filePath":"前端技术/08 React/03_JSX.md"}'),e={name:"前端技术/08 React/03_JSX.md"};function p(h,i,n,o,d,c){return a(),l("div",null,i[0]||(i[0]=[t('<h1 id="_03-jsx" tabindex="-1">03_JSX <a class="header-anchor" href="#_03-jsx" aria-label="Permalink to &quot;03_JSX&quot;">​</a></h1><p>Vue3 同样可以使用 <a href="./../07 Vue/Vue3/25 JSX与TSX.html">25 JSX与TSX</a></p><ul><li><p>JSX 全称 JavaScript XML，是 react 定义的一种类似于 XML 的 JS 扩展语法，JS + XML 本质是 <code>React.createElement(component, props, ...children)</code> 方法的语法糖。</p></li><li><p>作用: 用来简化创建虚拟 DOM</p></li><li><p>写法：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ele </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><ol><li>它不是字符串, 也不是 HTML/XML 标签</li><li>它最终产生的就是一个 JS 对象</li></ol></li><li><p>标签名任意: HTML 标签或其它标签</p></li><li><p>标签属性任意: HTML 标签属性或其它</p></li><li><p>基本语法规则</p><ol><li>遇到 <code>&lt;</code> 开头的代码, 以标签的语法解析: html 同名标签转换为 html 同名元素, 其它标签需要特别解析</li><li>遇到以 <code>{</code> 开头的代码，以 JS 语法解析: ==标签中的 js 表达式必须用 <code>{ }</code> 包含==</li><li>定义虚拟 DOM 不需要写引号</li><li>样式的类名不能使用 class，需要使用 className</li><li>内联样式需要使用</li></ol><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:value}}</span></span></code></pre></div><ol start="6"><li>只允许一个根标签</li><li>标签必须闭合</li><li>标签首字母 <ul><li>若小写字母开头，则转为 html 同名元素，无此同名元素则报错</li><li>若大写字母开头，react 会渲染对应的组件，无此组件则报错</li></ul></li></ol></li><li><p>babel.js 的作用</p><ol><li>浏览器不能直接解析 JSX 代码, 需要 babel 转译为纯 JS 的代码才能运行</li><li>只要用了 JSX，都要加上 <code>type=&quot;text/babel&quot;</code>, 声明需要 babel 来处理</li></ol></li></ul>',3)]))}const g=s(e,[["render",p]]);export{r as __pageData,g as default};
