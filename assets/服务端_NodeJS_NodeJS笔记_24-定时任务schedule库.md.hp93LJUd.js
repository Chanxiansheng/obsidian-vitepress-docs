import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.-ewJmwvT.js";const o=JSON.parse('{"title":"24- 定时任务 schedule 库","description":"","frontmatter":{},"headers":[],"relativePath":"服务端/NodeJS/NodeJS笔记/24-定时任务schedule库.md","filePath":"服务端/NodeJS/NodeJS笔记/24-定时任务schedule库.md"}'),t={name:"服务端/NodeJS/NodeJS笔记/24-定时任务schedule库.md"};function h(e,s,p,k,d,E){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="_24-定时任务-schedule-库" tabindex="-1">24- 定时任务 schedule 库 <a class="header-anchor" href="#_24-定时任务-schedule-库" aria-label="Permalink to &quot;24- 定时任务 schedule 库&quot;">​</a></h1><p>定时任务是指在预定的时间点或时间间隔内执行的任务或操作。它们是自动化执行特定逻辑的一种方式，可用于执行重复性的、周期性的或计划性的任务。</p><p>定时任务通常用于以下情况：</p><ol><li>执行后台任务：定时任务可用于自动执行后台任务，如数据备份、日志清理、缓存刷新等。通过设定适当的时间点或时间间隔，可以确保这些任务按计划进行，而无需手动干预。</li><li>执行定期操作：定时任务可用于执行定期操作，如发送电子邮件提醒、生成报告、更新数据等。通过设定适当的时间点，可以自动触发这些操作，提高效率并减少人工操作的需求。</li><li>调度任务和工作流：定时任务可以用于调度和协调复杂的任务和工作流程。</li></ol><h2 id="node-schedule-库" tabindex="-1">node-schedule 库 <a class="header-anchor" href="#node-schedule-库" aria-label="Permalink to &quot;node-schedule 库&quot;">​</a></h2><p>node-schedule 是一个 Node.js 库，用于在特定时间或按照特定频率执行任务。它提供了一个简单的接口来定义何时运行任务，类似于 Unix 的 cron 工具。node-schedule 允许你以一种非常直观和灵活的方式来安排任务，无论是一次性的，还是周期性的。</p><div class="note custom-block github-alert"><p class="custom-block-title">Title</p><p><a href="https://www.npmjs.com/package/node-schedule" target="_blank" rel="noreferrer">node-schedule - Node.js 定时任务调度器</a></p></div><p>安装</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node-schedule</span></span></code></pre></div><p>基本使用</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> schedule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node-schedule&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> job</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> schedule.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scheduleJob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*/5 * * * *&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;执行任务&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 取消任务 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">job.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cancel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 暂停任务 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">job.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pause</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 恢复任务 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">job.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>scheduleJob 第一个参数可以接受 Cron 风格的字符串，date 时间对象或者一个包含开始时间和重复间隔的对象。</p><h2 id="cron-表达式" tabindex="-1">Cron 表达式 <a class="header-anchor" href="#cron-表达式" aria-label="Permalink to &quot;Cron 表达式&quot;">​</a></h2><p>==Cron 表达式是一种用于指定定时任务执行时间的字符串表示形式。==它由 6 个或 7 个字段组成，每个字段表示任务执行的时间单位和范围。<br> Cron 表达式的典型格式如下：</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    *</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">┬    ┬    ┬    ┬    ┬    ┬</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│    │    │    │    │    │</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│    │    │    │    │    └── 星期（0 - 6，0表示星期日）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│    │    │    │    └───── 月份（1 - 12）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│    │    │    └────────── 日（1 - 31）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│    │    └─────────────── 小时（0 - 23）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│    └──────────────────── 分钟（0 - 59）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">└───────────────────────── 秒（0 - 59）</span></span></code></pre></div><table tabindex="0"><thead><tr><th>域</th><th>是否必需</th><th>取值范围</th><th>特殊字符</th></tr></thead><tbody><tr><td>秒 Seconds</td><td>是</td><td>[0, 59]</td><td>* , - /</td></tr><tr><td>分钟 Minutes</td><td>是</td><td>[0, 59]</td><td>* , - /</td></tr><tr><td>小时 Hours</td><td>是</td><td>[0, 23]</td><td>* , - /</td></tr><tr><td>日期 DayofMonth</td><td>是</td><td>[1, 31]</td><td>* , - / ? L W</td></tr><tr><td>月份 Month</td><td>是</td><td>[1, 12] 或 [JAN, DEC]</td><td>* , - /</td></tr><tr><td>星期 DayofWeek</td><td>是</td><td>[1, 7] 或 [MON, SUN]。若使用 [1, 7] 表达方式，1 代表星期一，7 代表星期日。</td><td>* , - / ? L #</td></tr><tr><td>年 Year</td><td>否</td><td>1970+</td><td>- * /</td></tr></tbody></table><p>每个字段可以接受特定的数值、范围、通配符和特殊字符来指定任务的执行时间：</p><ul><li>数值：表示具体的时间单位，如 1、2、10 等。</li><li>范围：使用 <code>-</code> 连接起始和结束的数值，表示一个范围内的所有值，如 1-5 表示 1 到 5 的所有数值。</li><li>通配符：使用 <code>*</code> 表示匹配该字段的所有可能值，如 <code>*</code> 表示每分钟、每小时、每天等。</li><li>逗号分隔：使用逗号分隔多个数值或范围，表示匹配其中任意一个值，如 1,3 表示 1 或 3。</li><li>步长：使用 <code>/</code> 表示步长，用于指定间隔的数值，如 <code>*/5</code> 表示每隔 5 个单位执行一次。</li><li>特殊字符：Cron 表达式还支持一些特殊字符来表示特定的含义，如 <code>?</code> 用于替代日和星期字段中的任意值，<code>L</code> 表示最后一天，<code>W</code> 表示最近的工作日等。</li></ul><p>以下是一些常见的 Cron 表达式示例：</p><ul><li><code>* * * * * *</code>：每秒执行一次任务。</li><li><code>0 * * * * *</code>：每分钟的整点执行一次任务。</li><li><code>0 0 * * * *</code>：每小时的整点执行一次任务。</li><li><code>0 0 * * 1 *</code>：每周一的午夜执行一次任务。</li><li><code>0 0 1 * * *</code>：每月的 1 号午夜执行一次任务。</li><li><code>0 0 1 1 * *</code>：每年的 1 月 1 日午夜执行一次任务。</li></ul><h2 id="使用案例" tabindex="-1">使用案例 <a class="header-anchor" href="#使用案例" aria-label="Permalink to &quot;使用案例&quot;">​</a></h2><p>自动签到服务</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> schedule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node-schedule&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;request&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./config.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">schedule.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scheduleJob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0 30 0 * * *&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config.check_url, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;post&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        headers: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Referer: config.url,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Cookie: config.cookie</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">error </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.statusCode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(body)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cookie: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sessionid=你的cookie&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://juejin.cn/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    check_url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://api.juejin.cn/growth_api/v1/check_in?aid=你的aid&amp;uid=你的uid&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,24)]))}const c=i(t,[["render",h]]);export{o as __pageData,c as default};
