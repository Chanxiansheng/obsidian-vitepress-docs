import{_ as a,c as t,o,ag as e}from"./chunks/framework.-ewJmwvT.js";const y=JSON.parse('{"title":"Python 安装与环境","description":"","frontmatter":{},"headers":[],"relativePath":"语言学习/Python/01_Python安装与环境.md","filePath":"语言学习/Python/01_Python安装与环境.md"}'),s={name:"语言学习/Python/01_Python安装与环境.md"};function r(h,n,p,l,i,d){return o(),t("div",null,n[0]||(n[0]=[e(`<h1 id="python-安装与环境" tabindex="-1">Python 安装与环境 <a class="header-anchor" href="#python-安装与环境" aria-label="Permalink to &quot;Python 安装与环境&quot;">​</a></h1><blockquote><p>官方文档：<a href="https://docs.python.org/zh-cn/3.13/tutorial/index.html" target="_blank" rel="noreferrer">Python 教程 — Python 3.13.0 文档</a><br> 教程：<a href="https://liaoxuefeng.com/books/python/introduction/index.html" target="_blank" rel="noreferrer">简介 - Python教程 - 廖雪峰的官方网站</a></p></blockquote><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>Python 是著名的“龟叔”Guido van Rossum 在 1989 年圣诞节期间，为了打发无聊的圣诞节而编写的一个编程语言。</p><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p>目前，Python 有两个版本，一个是 2.x 版，一个是 3.x 版，这两个版本是不兼容的。<br> 根据你的 Windows 版本（64 位还是 32 位）从 Python 的官方网站下载 Python 3 对应的 <a href="https://www.python.org/downloads/windows/" target="_blank" rel="noreferrer">安装程序</a>，然后，运行下载的 exe 安装包</p><h2 id="ide" tabindex="-1">IDE <a class="header-anchor" href="#ide" aria-label="Permalink to &quot;IDE&quot;">​</a></h2><p><em><strong>PyCharm</strong></em> <a href="https://www.jetbrains.com/pycharm/download/" target="_blank" rel="noreferrer">Download PyCharm: The Python IDE for data science and web development by JetBrains</a><br> Sublime Text</p><h2 id="解释器" tabindex="-1">解释器 <a class="header-anchor" href="#解释器" aria-label="Permalink to &quot;解释器&quot;">​</a></h2><ol><li><p>当我们从 <a href="https://www.python.org/" target="_blank" rel="noreferrer">Python官方网站</a> 下载并安装好 Python 3.x 后，我们就直接获得了一个官方版本的解释器：CPython。这个解释器是用 C 语言开发的，所以叫 CPython。在命令行下运行 python 就是启动 CPython 解释器。CPython 是使用最广的 Python 解释器。</p></li><li><p>IPython 是基于 CPython 之上的一个交互式解释器，也就是说，IPython 只是在交互方式上有所增强，但是执行 Python 代码的功能和 CPython 是完全一样的。CPython 用 <code>&gt;&gt;&gt;</code> 作为提示符，而 IPython 用 <code>In [序号]:</code> 作为提示符。</p></li><li><p>PyPy 是另一个 Python 解释器，它的目标是执行速度。PyPy 采用 <a href="http://en.wikipedia.org/wiki/Just-in-time_compilation" target="_blank" rel="noreferrer">JIT技术</a>，对 Python 代码进行动态编译（注意不是解释），所以可以显著提高 Python 代码的执行速度。</p></li><li><p>Jython 是运行在 Java 平台上的 Python 解释器，可以直接把 Python 代码编译成 Java 字节码执行。</p></li><li><p>IronPython 和 Jython 类似，只不过 IronPython 是运行在微软.Net 平台上的 Python 解释器，可以直接把 Python 代码编译成.Net 的字节码。</p></li></ol><h2 id="交互式编程" tabindex="-1">交互式编程 <a class="header-anchor" href="#交互式编程" aria-label="Permalink to &quot;交互式编程&quot;">​</a></h2><p>在命令行模式下敲命令 <code>python</code>，就看到类似如下的一堆文本输出，然后就进入到 Python 交互模式，它的提示符是 <code>&gt;&gt;&gt;</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>────────────────────────────────────────────────────────┐</span></span>
<span class="line"><span>│Command Prompt - python                           - □ x │</span></span>
<span class="line"><span>├────────────────────────────────────────────────────────┤</span></span>
<span class="line"><span>│Microsoft Windows [Version 10.0.0]                      │</span></span>
<span class="line"><span>│(c) 2015 Microsoft Corporation. All rights reserved.    │</span></span>
<span class="line"><span>│                                                        │</span></span>
<span class="line"><span>│C:\\&gt; python                                             │</span></span>
<span class="line"><span>│Python 3.x ... on win32                                 │</span></span>
<span class="line"><span>│Type &quot;help&quot;, ... for more information.                  │</span></span>
<span class="line"><span>│&gt;&gt;&gt; _                                                   │</span></span>
<span class="line"><span>│                                                        │</span></span>
<span class="line"><span>└────────────────────────────────────────────────────────┘</span></span></code></pre></div><p>在 Python 交互模式下输入 <code>exit()</code> 并回车，就退出了 Python 交互模式。</p><h2 id="脚本式编程" tabindex="-1">脚本式编程 <a class="header-anchor" href="#脚本式编程" aria-label="Permalink to &quot;脚本式编程&quot;">​</a></h2><p>通过脚本参数调用解释器开始执行脚本，直到脚本执行完毕。当脚本执行完成后，解释器不再有效。</p><p>让我们写一个简单的 Python 脚本程序。所有 Python 文件将以 .py 为扩展名。将以下的源代码拷贝至 test.py 文件中。</p><p><code>print (&quot;Hello, Python!&quot;)</code></p>`,18)]))}const P=a(s,[["render",r]]);export{y as __pageData,P as default};
