import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.-ewJmwvT.js";const l="/obsidian-vitepress-docs/assets/CSS%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%96%E7%95%8C-1.qkp3aFrw.png",h="/obsidian-vitepress-docs/assets/CSS%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%96%E7%95%8C-2.D9trHPU9.png",g=JSON.parse('{"title":"CSS 选择器世界","description":"","frontmatter":{},"headers":[],"relativePath":"前端技术/02 CSS/笔记：CSS选择器世界/CSS选择器世界.md","filePath":"前端技术/02 CSS/笔记：CSS选择器世界/CSS选择器世界.md"}'),p={name:"前端技术/02 CSS/笔记：CSS选择器世界/CSS选择器世界.md"};function k(e,s,d,E,r,o){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="css-选择器世界" tabindex="-1">CSS 选择器世界 <a class="header-anchor" href="#css-选择器世界" aria-label="Permalink to &quot;CSS 选择器世界&quot;">​</a></h1><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>参考书：<a href="../../00%20%E4%B9%A6%E7%B1%8D/CSS/CSS%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%96%E7%95%8C.pdf">CSS选择器世界</a></p></div><h2 id="一、概述" tabindex="-1">一、概述 <a class="header-anchor" href="#一、概述" aria-label="Permalink to &quot;一、概述&quot;">​</a></h2><h3 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h3><ol><li><p>选择器<br> 选择器指的就是平常使用的 CSS 声明块前面的标签、类名等。例如：<br> 类型选择器 <code>body{font:menu;}</code><br> 类选择器 <code>.container { background-color: olive;}</code></p></li><li><p>选择符<br> 目前选择符有 5 个，即表示后代关系的空格（ ），表示父<br> 子关系的尖括号（&gt;)，表示相邻兄弟关系的加号（+)，表示兄弟关系的弯弯（～），以及表示列<br> 关系的双管道（||)。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*后代关系*/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.Container</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> img</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">object-fit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cover</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*父子关系*/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">margin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:em </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*相邻兄弟关系*/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">margin-left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*兄弟关系*/</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ～ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">margin-left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*列*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">col</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 丨</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">l</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> td</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">skyblue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;}</span></span></code></pre></div></li><li><p>伪类<br> 伪类的特征是其前面会有一个冒号（:），通常与浏览器行为和用户行为相关联，可以看成<br> 是 CSS 世界的 JavaScript。伪类和选择符相互配合可以实现非常多的纯 CSS 交互效果。<br> 例如： <code>a:hover { color: darkblue;}</code></p></li><li><p>伪元素<br> 伪元素的特征是其前面会有两个冒号（::），常见的有 <code>::before</code>，<code>::after</code>，<code>::first-letter</code> 和 <code>::first-line</code> 等。</p></li></ol><h3 id="作用域" tabindex="-1">作用域 <a class="header-anchor" href="#作用域" aria-label="Permalink to &quot;作用域&quot;">​</a></h3><p>以前 CSS 选择器只有一个全局作用域，也就是在网页任意地方的 CSS 都共用一个文档上下文。<br> 如今 CSS 选择器是有局部作用域的概念的。伪类 <code>:Scope</code> 的设计初衷就是匹配局部作用域下的元素。</p><h3 id="命名空间" tabindex="-1">命名空间 <a class="header-anchor" href="#命名空间" aria-label="Permalink to &quot;命名空间&quot;">​</a></h3><p>CSS 选择器中还有一个命名空间（namespace）的概念。<br> 命名空间可以让来自多个 XML 词汇表的元素的属性或样式彼此之间没有冲突。<br> 在 CSS 选择器世界中命名空间的作用也是避免冲突。例如，在 HTML 和 SVG 中都会用到 <code>&lt;a&gt;</code> 链接，此时就可能发生冲突，我们可以借助命名空间进行规避，具体方法是，使用 <code>@namespace</code> 规则声明命名空间：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@namespace</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">http://www.w3.org/1999/xhtml</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> svg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">http://www.w3.org/2000/svg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*XHTML中的&lt;a&gt;元素*/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*SVG中&lt;a&gt;元素*/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">svg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*同时匹配XHTML和SVG的&lt;a&gt;元素*/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}</span></span></code></pre></div><p><code>svg|a</code> 中有一个管道符|，管道符前面的字符表示命名空间的代称，管道符后面的内容则是选择器。</p><p>CSS 选择器命名空间的兼容性很好，至少 10 年前浏览器就已支持，但是，却很少见人在项目中使用它，这是为什么呢？<br> 原因有二：其一，在 HTML 中直接内联 SVG 的应用场景并不多，它更多的是作为独立的 SVG 资源使用，即使内联，也很少有需要对特性 SVG 标签进行样式控制的需求；其二，有其他更简单的替代方案，例如，如果我们希望 SVG 中所有的 <code>&lt;a&gt;</code> 元素的颜色都是 black，可以直接用：<code>svg a ( color: black;}</code> 无须掌握复杂的命名空间语法就能实现我们想要的效果，这样做的唯一缺点就是增加了 SVG 中 a 元素的优先级，但是在大多数场景下，这对我们的实际开发没有任何影响。综合来看，这是一种性价比高很多的实现方式，几乎找不到需要使用命名空间的理由。<br> 因此，对于 CSS 选择器的命名空间，建议就是<strong>了解即可</strong>，做到在遇到大规模冲突场景时，能想到还有这样一种解决方法就可以了。</p><h3 id="无效选择器特性" tabindex="-1">无效选择器特性 <a class="header-anchor" href="#无效选择器特性" aria-label="Permalink to &quot;无效选择器特性&quot;">​</a></h3><p>很多 CSS 伪类选择器是最近几年才出现的，浏览器并不支持，浏览器会把这些选择器当作无效选择器，这是没有任何问题的。但是当这些无效的 CSS 选择器和浏览器支持的 CSS 选择器写在一起的时候，会导致整个选择器无效，举个例子，有如下 CSS 代码：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.example:hover</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.example:active</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.example:focus-within</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>:hover</code> 和 <code>:active</code> 是浏览器很早就支持的两个伪类，按道理讲，所有浏览器都能识别这两个伪类，但是，由于 IE 浏览器并不支持 <code>:focus-within</code> 伪类，会导致 IE 浏览器无法识别整个语句，这就是<strong>无效 CSS 选择器特性</strong>。<br> 因此，我们在使用一些新的 CSS 选择器时，出于渐进增强的目的，需要将它们分开书写：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*IE 浏览器可识别*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.example:hover</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.example:active</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*IE 浏览器不可识别*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.example:focus-within</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="私有前缀" tabindex="-1">私有前缀 <a class="header-anchor" href="#私有前缀" aria-label="Permalink to &quot;私有前缀&quot;">​</a></h3><p>CSS 中的 <code>-webkit-</code> 是 WebKit 内核浏览器（如 Safari、旧版 Chrome 等）的私有前缀，用于支持实验性或尚未标准化的 CSS 属性。<br> 例如，<code>border-radius</code> 在标准化前需写成 <code>-webkit-border-radius</code>，以确保 WebKit 内核浏览器能正确解析<br> 新版 Chrome、Edge（基于 Chromium）虽改用 Blink 引擎，但仍部分支持 <code>-webkit-</code> 前缀以实现向后兼容</p><hr><h2 id="二、选择器的优先级" tabindex="-1">二、选择器的优先级 <a class="header-anchor" href="#二、选择器的优先级" aria-label="Permalink to &quot;二、选择器的优先级&quot;">​</a></h2><p>CSS 优先级有着明显的不可逾越的等级制度，可以将其划分为 0～5 这 6 个等级，其中前 4 个等级由 CSS 选择器决定，后 2 个等级由书写形式和特定语法决定。</p><ol><li><p><strong>0 级：通配选择器、选择符和逻辑组合伪类</strong>。<br> 其中，通配选择器写作星号（<code>*</code>）。 <code>*{color:#ooo；}</code><br> 选择符指 （<code>+</code>）、（<code>&gt;</code>）、（<code>～</code>）、空格和 （<code>||</code>）。<br> 逻辑组合伪类有 <code>:not()</code>、<code>:is()</code> 和 <code>:where()</code> 等，这些伪类本身并不影响 CSS 优先级，影响优先级的是括号里面的选择器。<br> 需要注意的是，只有逻辑组合伪类的优先级是 0，其他伪类的优先级并不是这样的。</p></li><li><p><strong>1 级：标签选择器</strong>。<br><code>body { color: #333;}</code></p></li><li><p><strong>2 级：类选择器、属性选择器和伪类</strong>。<br><code>.foo { color:#666;}</code><br><code>[foo]{color:#666；}</code><br><code>:hover {color: #333;}</code></p></li><li><p><strong>3 级：ID 选择器</strong>。<br><code>#foo{ color: #999;}</code></p></li><li><p><strong>4 级：style 属性内联</strong>。<br><code>&lt;spanstyle=&quot;color：#ccc;&quot;&gt;优先级&lt;/span&gt;</code></p></li><li><p><strong>5 级：！important</strong>。<br><code>.foo{ color: #fff !important;}</code><br><code>!important</code> 是顶级优先级，可以重置 JavaScript 设置的样式，唯一推荐使用的场景就是使 JavaScript 设置无效。<br> 对于其他场景，没有任何使用它的理由，切勿滥用。</p></li></ol><p>不难看出，CSS 选择器的优先级（0 级至 3 级）属于 CSS 优先级的一部分，也是最重要、最复杂的部分，学会 CSS 选择器的优先级等同于学会了完整的 CSS 优先级规则。</p><p>对于 CSS 选择器优先级的计算，业界流传甚广的是数值计数法。具体如下：每一段 CSS 语句的选择器都可以对应一个具体的数值，数值越大优先级越高，其中的 CSS 语句将被优先渲 染。其中，出现一个 0 级选择器，优先级数值 +0；出现一个 1 级选择器，优先级数值 +1；出现 一个 2 级选择器，优先级数值 +10；出现一个 3 级选择器，优先级数值 +100。</p><table tabindex="0"><thead><tr><th>选择器示例</th><th>组成说明</th><th>计算规则</th><th>优先级数值</th></tr></thead><tbody><tr><td><code>*</code></td><td>0 个 id, 0 个类, 1 个标签</td><td><code>0, 0, 0, 1 → 0-0-1</code></td><td>0</td></tr><tr><td><code>dialog</code></td><td>0 个 id, 0 个类, 1 个标签</td><td><code>0, 0, 0, 1 → 0-0-1</code></td><td>1</td></tr><tr><td><code>ul &gt; li</code></td><td>0 个 id, 0 个类, 2 个标签, 1 个组合符</td><td><code>(0+0+1) + (0+0+1) + 0 → 0-0-2</code></td><td>2</td></tr><tr><td><code>li &gt; ol + ol</code></td><td>0 个 id, 0 个类, 3 个标签, 2 个组合符</td><td><code>(0+0+1)*3 + 0 * 2 → 0-0-3</code></td><td>3</td></tr><tr><td><code>.foo</code></td><td>0 个 id, 1 个类, 0 个标签</td><td><code>0, 1, 0, 0 → 0-1-0</code></td><td>10</td></tr><tr><td><code>#nav</code></td><td>1 个 id, 0 个类, 0 个标签</td><td><code>1, 0, 0, 0 → 1-0-0</code></td><td>100</td></tr><tr><td><code>#nav .item.active</code></td><td>1 个 id, 2 个类, 0 个标签</td><td><code>1 + (0+2+0) → 1-2-0</code></td><td>120</td></tr></tbody></table><hr><h2 id="三、选择器的命名" tabindex="-1">三、选择器的命名 <a class="header-anchor" href="#三、选择器的命名" aria-label="Permalink to &quot;三、选择器的命名&quot;">​</a></h2><ul><li><h6 id="是否区分大小写" tabindex="-1">是否区分大小写 <a class="header-anchor" href="#是否区分大小写" aria-label="Permalink to &quot;是否区分大小写&quot;">​</a></h6></li></ul><table tabindex="0"><thead><tr><th>选择器类型</th><th>示例</th><th>是否对大小写敏感</th><th>说明</th></tr></thead><tbody><tr><td>标签选择器</td><td><code>div { }</code></td><td>❌ 不敏感</td><td>匹配 HTML 标签，忽略大小写差异</td></tr><tr><td>属性选择器（纯属性）</td><td><code>[attr]</code></td><td>❌ 不敏感</td><td>仅检查属性名，不检查值</td></tr><tr><td>属性选择器（带值）</td><td><code>[attr=val]</code></td><td>✅ ​<strong>​属性值敏感​</strong>​</td><td>属性名不敏感，但属性值需精确匹配</td></tr><tr><td>类选择器</td><td><code>.container { }</code></td><td>✅ 敏感</td><td>类名需完全匹配（包括大小写）</td></tr><tr><td>ID 选择器</td><td><code>#container { }</code></td><td>✅ 敏感</td><td>ID 需完全匹配（包括大小写）</td></tr></tbody></table><ul><li><h6 id="命名的合法性" tabindex="-1">命名的合法性 <a class="header-anchor" href="#命名的合法性" aria-label="Permalink to &quot;命名的合法性&quot;">​</a></h6></li></ul><p>类名选择器和 ID 选择器不能以数字开头</p><p><img src="`+l+`" alt="700"><br> 以上图所示，命名结构明显分左右两半，其中左边是选择器首字符，右边是选择器后面的字符。<br> 首字符支持的字符类型是 a～z、A～Z、下划线（<code>_</code>）以及非 ASCII 字符（中文、 全角字符等) 。<br> 后面的字符支持的字符类型是 a～z、A～Z、0～9、下划线（<code>_</code>）、短横线（<code>-</code>) 以及非 ASCII 字符。</p><p>同时，以下类型的首字符也是支持的：</p><ol><li>不合法的 ASCII 字符，可以通过转码或者转义进行表达。如加号（+）的 Unicode 是 2b，因此选择器需要写成 <code>.\\b </code>(带有空格) 或 <code>.\\00002b</code> 或 <code>.\\+</code></li><li>中文字符 <code>.我是foo {}</code></li><li>中文标点 <code>.。foo {}</code></li><li>emoji 表情 <code>.💩 {}</code></li></ol><ul><li><h6 id="长命名还是短命名" tabindex="-1">长命名还是短命名 <a class="header-anchor" href="#长命名还是短命名" aria-label="Permalink to &quot;长命名还是短命名&quot;">​</a></h6></li></ul><p><strong>使用短命名</strong></p><ul><li><h6 id="单命名还是组合命名" tabindex="-1">单命名还是组合命名 <a class="header-anchor" href="#单命名还是组合命名" aria-label="Permalink to &quot;单命名还是组合命名&quot;">​</a></h6></li></ul><p>单命名的优点是字符少、书写快，缺点是容易出现命名冲突的问题；组合命名的优点是不容易出现命名冲突，但写起来较烦琐。样式冲突的性质比书写速度慢严重得多，因此，理论上推荐<strong>使用组合命名</strong>。</p><ul><li><h6 id="面向属性的命名和面向语义的命名" tabindex="-1">面向属性的命名和面向语义的命名 <a class="header-anchor" href="#面向属性的命名和面向语义的命名" aria-label="Permalink to &quot;面向属性的命名和面向语义的命名&quot;">​</a></h6></li></ul><table tabindex="0"><thead><tr><th></th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>面向属性</td><td>重用性高，方便快捷</td><td>适用场景有限</td></tr><tr><td>面向语义</td><td>灵活丰富，应用场景广泛</td><td>代码笨重，效率一般</td></tr></tbody></table><p>如果是小项目，则直接采用面向语义的命名方式；<br> 如果是多人合作的大项目，则两种方式都采用，因为项目越大，面向属性的命名的价值越能得到体现。</p><ul><li><h6 id="最佳实践" tabindex="-1">最佳实践 <a class="header-anchor" href="#最佳实践" aria-label="Permalink to &quot;最佳实践&quot;">​</a></h6></li></ul><p>不要使用 ID 选择器<br> 不要嵌套选择器<br> 不要歧视面向属性的命名<br> 正确使用状态类名</p><hr><h2 id="四、css-选择符" tabindex="-1">四、CSS 选择符 <a class="header-anchor" href="#四、css-选择符" aria-label="Permalink to &quot;四、CSS 选择符&quot;">​</a></h2><h4 id="后代选择符空格" tabindex="-1">后代选择符空格（<code></code>） <a class="header-anchor" href="#后代选择符空格" aria-label="Permalink to &quot;后代选择符空格（\` \`）&quot;">​</a></h4><h4 id="子选择符箭头" tabindex="-1">子选择符箭头（<code>&gt;</code>） <a class="header-anchor" href="#子选择符箭头" aria-label="Permalink to &quot;子选择符箭头（\`&gt;\`）&quot;">​</a></h4><p>子选择符只会匹配第一代子元素，而后代选择符会匹配所有子元素。</p><p>能不用子选择符就后然它的性能优干后代选择符。因为一旦使用了子选择符，元素的层级关系就被强制绑定了，日后需要维护或者需求发生变化的时候一旦调整了层级关系，整个样式就失效了，这时还要对 CSS 代码进行同步调整，增加了维护成本。</p><p>记住：<strong>使用子选择符的主要目的是避免冲突。</strong></p><p>适合使用子选择符的场景通常有以下几个。<br> （1）状态类名控制。<br> （2）标签受限。<br> （3）层级位置与动态判断。</p><h4 id="相邻兄弟选择符加号" tabindex="-1">相邻兄弟选择符加号（<code>+</code>） <a class="header-anchor" href="#相邻兄弟选择符加号" aria-label="Permalink to &quot;相邻兄弟选择符加号（\`+\`）&quot;">​</a></h4><p>它可以用于选择相邻的兄弟元素，但只能选择后面一个兄弟。</p><p>相邻兄弟选择符忽略了文本节点。<br> 相邻兄弟选择符忽略了注释节点。</p><p>相邻兄弟选择符最硬核的应用还是配合诸多伪类低成本实现很多实用的交互效果，是众多高级选择器技术的核心。</p><h4 id="随后兄弟选择符弯弯" tabindex="-1">随后兄弟选择符弯弯（<code>～</code>） <a class="header-anchor" href="#随后兄弟选择符弯弯" aria-label="Permalink to &quot;随后兄弟选择符弯弯（\`～\`）&quot;">​</a></h4><p>相邻兄弟选择符只会匹配它后面的第一个兄弟元素，而随后兄弟选择符会匹配后面的所有兄弟元素。</p><h4 id="列选择符双管道" tabindex="-1">列选择符双管道（<code>||</code>） <a class="header-anchor" href="#列选择符双管道" aria-label="Permalink to &quot;列选择符双管道（\`||\`）&quot;">​</a></h4><p>列选择符是规范中刚出现不久的新选择符，目前浏览器的兼容性还不足以让它在实际项目中得到应用。</p><p>Table 布局和 Grid 布局中都有列的概念，有时候我们希望控制整列的样式，有两种方法：一种是借助 <code>:nth-col()</code> 或者 <code>:nth-last-col()</code> 伪类，不过目前浏览器尚未支持这两个伪类；还有一种是借助原生 Table 布局中的 <code>&lt;colgroup&gt;</code> 和 <code>&lt;col&gt;</code> 元素实现，这个方法的兼容性非常好。</p><p>列选择符写作双管道 JavaScript 语言中逻辑或的写法一致，但是，在 CSS 中却不是“或”的意思，用“属于”来解释要更恰当。</p><hr><h2 id="五、css-选择器" tabindex="-1">五、CSS 选择器 <a class="header-anchor" href="#五、css-选择器" aria-label="Permalink to &quot;五、CSS 选择器&quot;">​</a></h2><h3 id="元素选择器" tabindex="-1">元素选择器 <a class="header-anchor" href="#元素选择器" aria-label="Permalink to &quot;元素选择器&quot;">​</a></h3><p>1.元素选择器不能重复自身</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*无效*/</span></span></code></pre></div><p>2.元素选择器必须写在最前</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;radio&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]{} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*有效*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;radio&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*无效*/</span></span></code></pre></div><p>3.通配选择器是一个特殊的标签选择器，它可以指代所有类型的标签元素，包括自定义元素，以及 <code>&lt;script&gt;</code>、<code>&lt;style&gt;</code>、<code>&lt;title&gt;</code> 等元素，但是不包括伪元素。<br> 它的用法是使用字符星号（<code>*</code>，即 U+002A)，例如：<br><code>{box-sizing:border-box; }</code><br> 当通配选择器和其他选择器级联使用的时候，星号都是可以省略的。</p><h3 id="属性选择器" tabindex="-1">属性选择器 <a class="header-anchor" href="#属性选择器" aria-label="Permalink to &quot;属性选择器&quot;">​</a></h3><h4 id="id-选择器" tabindex="-1">ID 选择器 <a class="header-anchor" href="#id-选择器" aria-label="Permalink to &quot;ID 选择器&quot;">​</a></h4><p>ID 选择器前面的字符是井号 <code>#</code>（U+0023）</p><p>ID 选择器的优先级比类选择器的优先级高一个等级</p><p>ID 具有唯一性</p><h4 id="类选择器" tabindex="-1">类选择器 <a class="header-anchor" href="#类选择器" aria-label="Permalink to &quot;类选择器&quot;">​</a></h4><p>类选择器前面的字符是点号 <code>.</code>（U+002E）：</p><h4 id="属性值直接匹配选择器" tabindex="-1">属性值直接匹配选择器 <a class="header-anchor" href="#属性值直接匹配选择器" aria-label="Permalink to &quot;属性值直接匹配选择器&quot;">​</a></h4><p>属性值直接匹配选择器包括下面 4 种：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;val&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;val&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;val&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><ol><li><p><code>[attr]</code><br><code>[attr]</code> 表示只要包含指定的属性就匹配，尤其适用于一些 HTMIL 布尔属性，这些布尔属性只要有属性值，无论值的内容是什么，都认为这些属性的值是 true。</p></li><li><p><code>[attr=&quot;val&quot;]</code><br><code>[attr=&quot;val&quot;]</code> 是属性值完全匹配选择器</p></li><li><p><code>[attr~=&quot;val&quot;]</code><br><code>[attr~=&quot;val&quot;]</code> 是属性值单词完全匹配选择器，专门用来匹配属性中的单词。匹配的属性值不能是空字符串。如果匹配的属性值只是部分字符串，那么也是无效的，必须有空格进行分割。</p></li><li><p><code>[attr|=&quot;val&quot;]</code><br><code>[attr|=&quot;val&quot;]</code> 是属性值起始片段完全匹配选择器，表示具有 attr 属性的元素，其值要么正好是 val，要么以 val 外加短横线 <code>-</code>（U+002D）开头，<code>|=</code> 用于连接需要匹配的属性和属性内容。</p></li></ol><div class="info custom-block github-alert"><p class="custom-block-title">AMCSS 开发模式</p><p></p><p>AMCSS 是 AttributeModulesforCSS 的缩写，表示借助 HTML 属性来进行 CSS 相关开发。</p><p>目前主流的开发模式是多个模块由多个类名控制，例如：<br><code>&lt;button class=&quot;cs-button cs-button-large cs-button-blue&quot;&gt;按钮&lt;/button&gt;</code><br> 而 AMCSS 则是基于属性控制的，例如：<br><code>&lt;button button=&quot;large blue&quot;&gt;按钮&lt;/button&gt;</code></p><p>为了避免属性名称冲突，可以给属性添加一个统一的前缀，如 am-，于是有：<br><code>&lt;button am-button=&quot;large blue&quot;&gt;按钮&lt;/button&gt;</code><br> 然后借助 <code>［attr~=&quot;val&quot;]</code> 这个属性值单词匹配选择器进行匹配。</p><p>这种开发模式的优点是：每个属性有效地声明了一个单独的命名空间，用于封装样式信息，从而产生更易于阅读和维护的 HTML 和 CSS。 但是，AMCSS 开发模式也并不是完美的，完全舍弃类选择器是不现实的，建议使用混合模式。</p></div><h4 id="属性值正则匹配选择器" tabindex="-1">属性值正则匹配选择器 <a class="header-anchor" href="#属性值正则匹配选择器" aria-label="Permalink to &quot;属性值正则匹配选择器&quot;">​</a></h4><p>属性值正则匹配选择器包括下面 3 种：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;val&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;val&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;val&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>这 3 种属性选择器就完全是字符匹配了，而非单词匹配。其中，尖角符号 <code>～</code>、美元符号 <code>$</code> 以及星号 <code>*</code> 都是正则表达式中的特殊标识符，分别表示前匹配、后匹配和任意匹配。</p><ol><li><p><code>[attr^=&quot;val&quot;]</code><br><code>[attr^=&quot;val]&quot;</code> 表示匹配 attr 属性值以字符 val 开头的元素。</p></li><li><p><code>[attr$=&quot;val&quot;]</code><br><code>[attr$=&quot;val&quot;]</code> 表示匹配 attr 属性值以字符 val 结尾的元素。</p></li><li><p><code>[attr*=&quot;val&quot;]</code><br><code>[attr*=&quot;val&quot;]</code> 表示匹配 attr 属性值包含字符 val 的元素。</p></li></ol><p>我们可以借助属性选择器来辅助我们实现搜索过滤效果。</p><div class="note custom-block github-alert"><p class="custom-block-title">忽略属性值大小写的正则匹配运算符</p><p>正则匹配运算符是属性选择器新增的运算符，它可以忽略属性值大小写，使用字符 i 或者 I 作为运算符值</p></div><hr><h2 id="六、css-伪类" tabindex="-1">六、CSS 伪类 <a class="header-anchor" href="#六、css-伪类" aria-label="Permalink to &quot;六、CSS 伪类&quot;">​</a></h2><h3 id="用户行为伪类" tabindex="-1">用户行为伪类 <a class="header-anchor" href="#用户行为伪类" aria-label="Permalink to &quot;用户行为伪类&quot;">​</a></h3><h4 id="hover-手型经过伪类" tabindex="-1"><code>:hover</code> 手型经过伪类 <a class="header-anchor" href="#hover-手型经过伪类" aria-label="Permalink to &quot;\`:hover\` 手型经过伪类&quot;">​</a></h4><ul><li><h6 id="延时优化" tabindex="-1">延时优化 <a class="header-anchor" href="#延时优化" aria-label="Permalink to &quot;延时优化&quot;">​</a></h6></li></ul><p>用 <code>:hover</code> 实现一些浮层类效果并不难，但是很多人在实现的时候没有注意到可以通过增加：hover 延迟效果来增强交互体验。<br> 可以通过增加延时来优化这种体验，方法就是使用 visibility 属性实现元素的显隐，然后借助 CSStransition 设置延迟显示即可。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.icon-delete::before</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.icon-delete::after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	transition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: visibility </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> .2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	visibility</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.icon-delete:hover::before</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.icon-delete:hover::after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  visibility</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">visible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><h6 id="非子元素的-hover-显示" tabindex="-1">非子元素的 <code>:hover</code> 显示 <a class="header-anchor" href="#非子元素的-hover-显示" aria-label="Permalink to &quot;非子元素的 \`:hover\` 显示&quot;">​</a></h6></li></ul><p>实现一个鼠标经过链接来预览图片的交互效果。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">absolute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:hover</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> img</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:hover</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/*鼠标经过链接或鼠标经过图片，图片自身都保持显示*/</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><h6 id="纯-hover-显示浮层的体验问题" tabindex="-1">纯 <code>:hover</code> 显示浮层的体验问题 <a class="header-anchor" href="#纯-hover-显示浮层的体验问题" aria-label="Permalink to &quot;纯 \`:hover\` 显示浮层的体验问题&quot;">​</a></h6></li></ul><p>纯 <code>:hover</code> 显示浮层的体验问题是很多开发人员都没意识到的。例如，某开发使用 <code>:hover</code> 伪类实现一个下拉菜单功能，纯 CSS 实现，他觉得自己的技术很厉害，并洋洋得意，殊不知己经埋下了巨大的隐患。<br><code>:hover</code> 交互在有鼠标的时候确实很方便，但是如果用户的鼠标坏了，或者设备本身没有鼠标（如触屏设备、智能电视)，则纯：hover 实现的下拉列表功能就完全瘫痪了，根本没法使用，这是绝对会让用户抓狂的非常糟糕的体验。</p><p>对于带交互的行为，一定不能只使用 <code>:hover</code> 伪类，还需要其他的处理，例如 <code>:focus</code>、<code>:focus-within</code> 。</p><hr><h4 id="active-激活状态伪类" tabindex="-1"><code>:active</code> 激活状态伪类 <a class="header-anchor" href="#active-激活状态伪类" aria-label="Permalink to &quot;\`:active\` 激活状态伪类&quot;">​</a></h4><p><code>:active</code> 伪类可以用于设置元素激活状态的样式，可以通过点击鼠标主键，也可以通过手指或者触控笔点击触摸屏触发激活状态。<br> 具体表现如下，点击按下触发 <code>:active</code> 伪类样式，点击抬起取消 <code>:active</code> 伪类样式的应用。<code>:active</code> 伪类支持任意的 HTML 元素，例如 <code>&lt;div&gt;</code>、 <code>&lt;span&gt;</code> 等非控件元素，甚至是自定义元素。</p><ul><li><h6 id="active-通用样式" tabindex="-1"><code>:active</code> 通用样式 <a class="header-anchor" href="#active-通用样式" aria-label="Permalink to &quot;\`:active\` 通用样式&quot;">​</a></h6></li></ul><p>本技巧更适用的场景是移动端开发，因为桌面端可以通过 <code>:hover</code> 反馈状态变化，而移动端只能通过 <code>:active</code> 反馈。要知道一个移动端项目会有非常多需要点击反馈的链接和按钮，如果对每一个元素都去设置 <code>:active</code> 样式，成本还是挺高的。这里介绍几个通用处理技巧，可以节约开发时间。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*1. 使用box-shadow内阴影（兼容性较好，但对非对称闭合元素无能为力）*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:active</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:active</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  box-shadow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 999</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rgba</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.05</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*2. 使用1inear-gradient线性渐变（兼容性较差，适用非对称闭合元素）**/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:active</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:active</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">reset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:active</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:active</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">submit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:active</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background-image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">inear-gradient(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rgba</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.05</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rgba</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.05</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*3. outline 反馈浮层 (不适合复杂元素页面)*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:only-child:active</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	outline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">999</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rgba</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.05</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	outline-offset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-999</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	-webkit-clip-path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	clip-path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><h6 id="css-数据上报" tabindex="-1">CSS 数据上报 <a class="header-anchor" href="#css-数据上报" aria-label="Permalink to &quot;CSS 数据上报&quot;">​</a></h6></li></ul><p>如果想要知道两个按钮的点击率，CSS 开发者可以自己动手，无须劳烦 JavaScript 开发者去埋点：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.button-l:active::after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">./pixel.gif?action=click&amp;id=buttonl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.button-2:active::after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">./pixel.gif?action=click&amp;id=button2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此时，当点击按钮的时候，相关行为数据就会上报给服务器，这种上报，就算把 JavaScript 禁用掉也无法阻止，方便快捷，特别适合 A/B 测试。</p><hr><h4 id="focus-焦点伪类" tabindex="-1"><code>:focus</code> 焦点伪类 <a class="header-anchor" href="#focus-焦点伪类" aria-label="Permalink to &quot;\`:focus\` 焦点伪类&quot;">​</a></h4><p><code>:focus</code> 是一个从 IE8 浏览器开始支持的伪类，它可以匹配当前处于聚焦状态的元素。例如，高亮显示处于聚焦状态的 <code>&lt;textarea&gt;</code> 输入框的边框。</p><ul><li><h6 id="focus-伪类匹配机制" tabindex="-1"><code>:focus</code> 伪类匹配机制 <a class="header-anchor" href="#focus-伪类匹配机制" aria-label="Permalink to &quot;\`:focus\` 伪类匹配机制&quot;">​</a></h6></li></ul><p>与 <code>:active</code> 伪类不同，<code>:focus</code> 伪类默认只能匹配特定的元素，包括：</p><ul><li>非 disabled 状态的表单元素，如 <code>&lt;input&gt;</code> 输入框、<code>&lt;select&gt;</code> 下拉框、<code>&lt;button&gt;</code> 按钮等；</li><li>包含 href 属性的 <code>&lt;a&gt;</code> 元素；</li><li><code>&lt;area&gt;</code> 元素，不过可以生效的 CSS 属性有限；</li><li>HTML5 中的 <code>&lt;summary&gt;</code> 元素。</li></ul><p>如何让普通元素也能响应 <code>:focus</code> 伪类呢？</p><ol><li><p>设置了 HTML contenteditable 属性的普通元素可以应用 <code>:focus</code> 伪类。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> contenteditable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> contenteditable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;plaintext-only&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p>设置了 HTML tabindex 属性的普通元素也可以应用 <code>:focus</code> 伪类。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tabindex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;内容&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tabindex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;内容&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tabindex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;内容&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>HTML 的 tabindex 属性用于控制元素的 ​<strong>​键盘导航顺序​</strong>​ 和 ​<strong>​焦点获取能力​</strong>​。</p><ol><li>​<strong>​<code>tabindex=&quot;0&quot;</code>​</strong>​ <ul><li>元素可被 Tab 键聚焦，​<strong>​顺序由其在 DOM 中的位置决定​</strong>​。</li><li>适用于将默认不可聚焦的元素（如 <code>&lt;div&gt;</code>, <code>&lt;span&gt;</code>）变为可交互，如制作自定义按钮。</li></ul></li><li>​**​\`tabindex=&quot; 正整数 &quot; <ul><li>元素按 ​<strong>​数值从小到大​</strong>​ 优先聚焦；同值则按 DOM 顺序。</li><li>如果使用正值，可能导致自然顺序被打乱，需谨慎使用。</li></ul></li><li>​<strong>​<code>tabindex=&quot;-1&quot;</code>​</strong>​ <ul><li>元素​ <strong>​不可通过 Tab 键聚焦​</strong>​，但可通过 JavaScript 编程聚焦（如 <code>element.focus()</code>）。</li><li>常用于临时禁止焦点或模态框的焦点管理。</li></ul></li></ol></li></ol><hr><h4 id="focus-within-整体焦点伪类" tabindex="-1"><code>:focus-within</code> 整体焦点伪类 <a class="header-anchor" href="#focus-within-整体焦点伪类" aria-label="Permalink to &quot;\`:focus-within\` 整体焦点伪类&quot;">​</a></h4><p><code>:focus-within</code> 伪类和 <code>:focus</code> 伪类有很多相似之处，那就是伪类样式的匹配离不开元素聚焦行为的触发。<br> 区别在于 <code>:focus</code> 伪类样式只有在当前元素处于聚焦状态的时候才匹配，而 <code>:focus-within</code> 伪类样式在当前元素或者是当前元素的任意子元素处于聚焦状态的时候都会匹配。</p><ul><li><h6 id="实现无障碍访问的下拉列表" tabindex="-1">实现无障碍访问的下拉列表 <a class="header-anchor" href="#实现无障碍访问的下拉列表" aria-label="Permalink to &quot;实现无障碍访问的下拉列表&quot;">​</a></h6></li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*下拉展开*/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.cs-details:focus-within</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .cs-datalist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h4 id="focus-visible-键盘焦点伪类" tabindex="-1"><code>:focus-visible</code> 键盘焦点伪类 <a class="header-anchor" href="#focus-visible-键盘焦点伪类" aria-label="Permalink to &quot;\`:focus-visible\` 键盘焦点伪类&quot;">​</a></h4><p><code>:focus-visible</code> 伪类是一个非常年轻的伪类，匹配的场景是：元素聚焦，同时浏览器认为聚焦轮廓应该显示。</p><p>为了兼顾视觉体验和键盘无障碍访问，我之前的做法是使用 JavaScript 进行判断，如果元素的 <code>:focus</code> 触发是键盘访问触发，就给元素添加自定义的 outline 轮廓，否则，去除 outline，这样做成本颇高。<br> 现在有了 <code>:focus-visible</code> 伪类，所有问题迎刃而解，在目前版本的 Chrome 浏览器下，浏览器认为使用键盘访问时触发的元素聚焦才是 <code>:focus-visible</code> 所表示的聚焦。换句话说，<code>:focus-visible</code> 可以让我们知道元素的聚焦行为到底是鼠标触发还是键盘触发。因此，如果希望去除鼠标点击时候的 outline，而保留键盘访问时候的 outline，只要一条短短的 CSS 规则就可以了：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:focus:not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:focus-visible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">）{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  outline: 0;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这样，Chrome 浏览器下让人头疼的轮廓问题就得到了解决。</p><hr><h3 id="url-定位伪类" tabindex="-1">URL 定位伪类 <a class="header-anchor" href="#url-定位伪类" aria-label="Permalink to &quot;URL 定位伪类&quot;">​</a></h3><h4 id="link-和-visited-链接历史伪类" tabindex="-1"><code>:link</code> 和 <code>:visited</code> 链接历史伪类 <a class="header-anchor" href="#link-和-visited-链接历史伪类" aria-label="Permalink to &quot;\`:link\` 和 \`:visited\` 链接历史伪类&quot;">​</a></h4><p><code>:link</code> 伪类用来匹配页面上 href 链接没有访问过的 <code>&lt;a&gt;</code> 元素。<br><code>:visited</code> 伪用来匹配页面上 href 链接访问过的 <code>&lt;a&gt;</code> 元素。</p><div class="info custom-block github-alert"><p class="custom-block-title">LVHA 顺序</p><p>著名的“love-hate 顺序”，<code>:link</code>→<code>:visited</code>→<code>:hover</code>→<code>:active</code>，首字母连起来是 LVHA，取自 love-hate，爱恨情仇，很好记忆。</p></div><ul><li><h6 id="visited-的使用怪癖" tabindex="-1"><code>:visited</code> 的使用怪癖 <a class="header-anchor" href="#visited-的使用怪癖" aria-label="Permalink to &quot;\`:visited\` 的使用怪癖&quot;">​</a></h6></li></ul><ol><li><p>支持的 CSS 很有限。<br> 目前仅支持下面这些 CSS：<code>color</code>，<code>background-color</code>， <code>border-color</code>，<code>border-bottom-color</code>， <code>border-left-color</code>, <code>border-right-color</code>，<code>border-top-color</code>，<code>column-rule-color</code> 和 <code>outline-color</code>。</p></li><li><p>没有半透明<br> 使用 <code>:visited</code> 伪类选择器控制颜色时，虽然在语法上它支持半透明色，但是在表现上，则要么纯色，要么全透明。</p></li><li><p>只能重置，不能凭空设置新样式</p></li><li><p>无法获取 <code>:visited</code> 设置和呈现的色值</p></li></ol><hr><h4 id="any-link-超链接伪类" tabindex="-1"><code>:any-link</code> 超链接伪类 <a class="header-anchor" href="#any-link-超链接伪类" aria-label="Permalink to &quot;\`:any-link\` 超链接伪类&quot;">​</a></h4><p>大家应该还记得，前面说过的 <code>:link</code> 伪类的两大缺点：一是能设置未访问过的元素的样式，对已经访问过的元素完全无效，已经访问过的元素还需要额外的 CSS 设置；二是只能作用于 <code>&lt;a&gt;</code> 元素，和标签选择器 a 看起来没差别，完全竞争不过更简单有效的标签选择器 a，因而沦为鸡肋伪类。</p><p>正是因为 <code>:link</code> 伪类存在这些不足，所以 W3C 官方才推出了新的 <code>:any-link</code> 伪类，<code>:any-link</code> 伪类的实用性就完全发生了变化。</p><p><code>:any-link</code> 伪类有如下两大特性。<br> 匹配所有设置了 href 属性的链接元素，包括 <code>&lt;a&gt;</code>、<code>&lt;link&gt;</code> 和 <code>&lt;area&gt;</code> 这 3 种元素；<br> 匹配所有匹配 <code>:link</code> 伪类或者 <code>:visited</code> 伪类的元素。<br><strong>可称之为“真·链接伪类”。</strong></p><p>IE 浏览器并不支持 <code>:any-link</code> 伪类，但其他浏览器的支持良好，因此，移动端或者其他不需要兼容 IE 浏览器的项目都可以放心使用 <code>:any-link</code> 伪类。</p><hr><h4 id="target-目标伪类" tabindex="-1"><code>:target</code> 目标伪类 <a class="header-anchor" href="#target-目标伪类" aria-label="Permalink to &quot;\`:target\` 目标伪类&quot;">​</a></h4><p><code>:target</code> 是一个与 URL 地址中的锚点定位强关联的伪类，可以用来实现很多原本需要 JavaScript 才能实现的交互效果。</p><p>假设浏览器地址栏中的地址如下：<br><code>https://www.cssworld.cn/#cs-anchor</code><br> 则#cs-anchor 就是“锚点”，术语名称是哈希（hash 的音译），即 JavaScript 中 location.hash 的返回值。<br> URL 锚点可以和页面中 id 匹配的元素进行锚定，浏览器的默认行为是触发滚动定位，同时进行 <code>:target</code> 伪类匹配。<br> 举个例子，假设页面有如下 HTML：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cs-first&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;第1行，id是cs-first&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cs-anchor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;第2行，id是cs-anchor&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cs-last&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;第3行，id是cs-last&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>当锚点为#cs-anchor 时，此时第二行会匹配。<br> 这就是 <code>:target</code> 伪类的作用一匹配 URL 锚点对应的元素。</p><ul><li><h6 id="选项卡效果" tabindex="-1">选项卡效果 <a class="header-anchor" href="#选项卡效果" aria-label="Permalink to &quot;选项卡效果&quot;">​</a></h6></li></ul><p>可以与 Vue 的单页面路由进行类比学习</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cs-tab-x&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	&lt;!--锚链元素--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">i</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tabPanel2&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cs-tab-anchor-2&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">i</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tabPanel3&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cs-tab-anchor-3&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	&lt;!--以下HTML为标准选项卡DOM结构--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cs-tab&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#tabPanel1&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cs-tab-li&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;选项卡1&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#tabPanel2&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cs-tab-li&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;选项卡2&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#tabPanel3&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cs-tab-li&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;选项卡3&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cs-panel&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cs-panel-li&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;面板内容1&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cs-panel-li&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;面板内容2&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cs-panel-li&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;面板内容3&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/*默认选项卡按钮样式*/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	.cs-tab-li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inline-block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#f0f0f0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#333</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		/★选中后的选项卡按钮样式</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	.cs-tab-anchor-2:not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">） </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">） </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .cs-tab</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .cs-tab-li:first-child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	.cs-tab-anchor-2:target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ~</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .cs-tab</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .cs-tab-li:nth-of-type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	.cs-tab-anchor-3:target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ~</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .cs-tab</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .cs-tab-li:nth-of-type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">		background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: deepskyblue;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		color: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">#fff;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/*默认选项面板样式*/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	.cs-panel-li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		display: none;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		padding: 20px;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		border: 1px solid </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">#ccc;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	/★选中的选项面板显示</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	.cs-tab-anchor-2:not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .cs-panel</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .cs-panel-li:first-child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	.cs-tab-anchor-2:target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ~</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .cs-panel</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .cs-panel-li:nth-of-type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	.cs-tab-anchor-3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:targett～</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.cs-panel.cs-panel-li:nth-of-type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	  display: block;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><div class="note custom-block github-alert"><p class="custom-block-title">\`:target-within\` 目标容器伪类</p><p></p><p><code>:target</code> 伪类交互技术的一个不足就是目前只能借助兄弟关系实现，对 DOM 结构有要求。但现在有了 <code>:target-within</code> 伪类，DOM 结构要从容多了。<br><code>:target-within</code> 伪类可以匹配 <code>:target</code> 伪类匹配的元素，或者匹配存在后代元素（包括文本节点）匹配 <code>:target</code> 伪类的元素。</p><p>目前尚未有浏览器支持这一伪类。</p></div><hr><h3 id="输入伪类" tabindex="-1">输入伪类 <a class="header-anchor" href="#输入伪类" aria-label="Permalink to &quot;输入伪类&quot;">​</a></h3><h4 id="enabled-和-disabled-可用状态与禁用状态伪类" tabindex="-1"><code>:enabled</code> 和 <code>:disabled</code> 可用状态与禁用状态伪类 <a class="header-anchor" href="#enabled-和-disabled-可用状态与禁用状态伪类" aria-label="Permalink to &quot;\`:enabled\` 和 \`:disabled\` 可用状态与禁用状态伪类&quot;">​</a></h4><p><code>:enabled</code> 伪类与 <code>:disabled</code> 伪类确实是完全对立的，也就是说，如果这两个伪类样式同时设置，总会有一个伪类样式匹配。</p><p>设置 <code>contenteditable=&quot;true&quot;</code> 的元素虽然也有输入特征，但是并不能匹配 <code>:enabled</code> 伪类，所有浏览器都不匹配。同样，设置 tabindex 属性的元素也不能匹配 <code>:enabled</code> 伪类。<br> 元素设置 <code>visibility:hidden</code> 或者 <code>display:none</code> 依然能够匹配 <code>:enabled</code> 伪类和 <code>:disabled</code> 伪类。</p><p><code>:enabled</code> 伪类在 JavaScript 中的作用要比在 CSS 中大。例如，我们可以使用 <code>document.querySelectorAll（&#39;form:enabled&#39;）</code> 查询所有可用表单元素，以实现自定义的表单序列化方法。</p><p>至于 <code>:disabled</code> 伪类，最常用的应该就是按钮了。<br> 以按钮禁用为例，点击按钮发送 Ajax 请求是一个异步过程，为了防止重复点击请求，通常的做法是设置标志量。实际上，如果按钮是原生的按钮（无论是 <code>&lt;button&gt;</code> 按钮还是 <code>&lt;input&gt;</code> 按钮)，此时，只要设置按钮 <code>disabled = true</code>，点击事件自然就会失效，无须用额外的 JavaScript 代码进行判断，同时语义更好，还可以使用 <code>:disabled</code> 伪类精确控制样式。</p><hr><h4 id="read-only-和-read-write-读写特性伪类" tabindex="-1"><code>:read-only</code> 和 <code>:read-write</code> 读写特性伪类 <a class="header-anchor" href="#read-only-和-read-write-读写特性伪类" aria-label="Permalink to &quot;\`:read-only\` 和 \`:read-write\` 读写特性伪类&quot;">​</a></h4><p><code>:read-only</code> 和 <code>:read-write</code> 它们用于匹配输入框元素是否只读，还是可读可写。</p><p>这两个伪类中间都有短横线，由于“只读”的 HTML 属性是 readonly，中间没有短横线，因此很多人会记混。</p><div class="note custom-block github-alert"><p class="custom-block-title">readonly 和 disabled 的区别</p><p>设置 readonly 的输入框不能输入内容，但它可以被表单提交；<br> 设置 disabled 的输入框不能输入内容，也不能被表单提交。<br> readonly 输入框和普通输入框的样式类似，但是浏览器会将设置了 disabled 的输入框中的文字置灰来加以区分。</p></div><hr><h4 id="placeholder-shown-占位符显示伪类" tabindex="-1"><code>:placeholder-shown</code> 占位符显示伪类 <a class="header-anchor" href="#placeholder-shown-占位符显示伪类" aria-label="Permalink to &quot;\`:placeholder-shown\` 占位符显示伪类&quot;">​</a></h4><p><code>:placeholder-shown</code> 伪类的匹配和 placeholder 属性密切相关，顾名思义就是“占位符显示伪类”，表示当输入框的 placeholder 内容显示的时候，匹配该输入框。</p><ul><li><h6 id="实现-material-design-风格占位符交互效果" tabindex="-1">实现 Material Design 风格占位符交互效果 <a class="header-anchor" href="#实现-material-design-风格占位符交互效果" aria-label="Permalink to &quot;实现 Material Design 风格占位符交互效果&quot;">​</a></h6></li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;input-fill-x&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;input-fill&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> placeholder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;邮箱&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">label</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;input-label&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;邮箱&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /*默认placeholder颜色透明不可见</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	.input-fill:placeholder-shown::placeholder{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		color: transparent;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  .input-fill-x1 {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    position: relative;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  .input-label{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		position: absolute;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		left: 16px; top: 14px;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		pointer-events: none;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	.input-fill:not(:placeholder-shown).input-label, .input-fill:focus.input-label {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	  transform: scale(0.75)translate(0, -32px);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;/style&gt;</span></span></code></pre></div><ul><li><h6 id="placeholder-shown-与空值判断" tabindex="-1"><code>:placeholder-shown</code> 与空值判断 <a class="header-anchor" href="#placeholder-shown-与空值判断" aria-label="Permalink to &quot;\`:placeholder-shown\` 与空值判断&quot;">​</a></h6></li></ul><p>由于 placeholder 内容只在空值状态的时候才显示，因此我们可以借助 <code>:placeholder-shown</code> 伪类来判断一个输入框中是否有值，如何添加提示信息。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">	textarea</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">placeholder-shown</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> small</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">::before</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">	input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">placeholder-shown</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> small</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">::before</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	  content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">：&#39;尚未输入内容&#39;；</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">87.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> placeholder=&quot; &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">small</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">small</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">textarea</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> placeholder=&quot; &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">textarea</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">small</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">small</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><hr><h4 id="default-默认选项伪类" tabindex="-1"><code>:default</code> 默认选项伪类 <a class="header-anchor" href="#default-默认选项伪类" aria-label="Permalink to &quot;\`:default\` 默认选项伪类&quot;">​</a></h4><p><code>:default</code> 伪类选择器只能作用在表单元素上，表示处于默认状态的表单元素。</p><p>举个例子，一个下拉框可能有多个选项，我们会默认让某个 <code>&lt;option&gt;</code> 处于 selected 状态，此时这个 <code>&lt;option&gt;</code> 可以看成是处于默认状态的表单元素，理论上可以匹配 <code>:default</code> 伪类选择器。</p><p>如果 <code>&lt;option&gt;</code> 没有设置 selected 属性，浏览器会默认呈现第一个 <code>&lt;option&gt;</code>，此时第一个 <code>&lt;option&gt;</code> 不会匹配 <code>:default</code> 伪类。<br> 因此，要想匹配 <code>:default</code> 伪类，Selected 必须为 true。同样，对于单复选框，checked 属性值也必须为 true。</p><p>虽然说 <code>:default</code> 伪类是用来标记默认状态，以避免选择混淆的，但实际上在我看来，它更有实用价值的应用应该是“推荐标记”。它可以让代码变得更加简洁，也更容易维护。</p><p><img src="`+h+`" alt="200"></p><hr><h4 id="checked-选中选项伪类" tabindex="-1"><code>:checked</code> 选中选项伪类 <a class="header-anchor" href="#checked-选中选项伪类" aria-label="Permalink to &quot;\`:checked\` 选中选项伪类&quot;">​</a></h4><div class="important custom-block github-alert"><p class="custom-block-title">为何不直接使用 \`[checked]\` 属性选择器</p><p>同样的：既然 <code>[disabled]</code> 也能匹配，那么：disabled 伪类的意义是什么？<br> 既然 <code>［readonly］</code> 也能匹配，那么：read-only 伪类的意义是什么？</p><ol><li><p><code>:checked</code> 只能匹配标准表单控件元素，不能匹配其他普通元素，即使这个普通元素没置了 checked 属性。但是 <code>[checked]</code> 属性选择器却可以与任意元素匹配。</p></li><li><p><code>[checked]</code> 属性的变化并非实时的。这就意味着，使用 <code>[checked]</code> 属性选择器控制单复选框的样式会出现匹配不准确的情况，而：checked 伪类匹配就不存在这个问题。</p></li><li><p>伪类可以正确匹配从祖先元素那里继承过来的状态，但是属性选择器却不可以。</p></li></ol></div><p>使用场景：</p><ul><li>自定义单复选框</li><li>开关效果</li><li>标签/列表/素材的选择</li></ul><hr><h4 id="indeterminate-不确定值伪类" tabindex="-1"><code>:indeterminate</code> 不确定值伪类 <a class="header-anchor" href="#indeterminate-不确定值伪类" aria-label="Permalink to &quot;\`:indeterminate\` 不确定值伪类&quot;">​</a></h4><p>复选框元素除了选中和没选中的状态外，还有半选状态，半选状态多用在包含全选功能的列表中。没有原生的 HTML 属性可以设置半选状态，半选状态只能通过 JavaScript 进行设置，这一点和全选不一样（全选有 checked 属性）。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//设置checkbox元素为半选状态</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">checkbox.indeterminate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><code>:indeterminate</code> 伪类顾名思义就是“不确定伪类”，由于平常只在复选框中有应用，因此很多人会误认为 <code>:indeterminate</code> 伪类只可以匹配复选框，但实际上还可以匹配单选框和进度条元素 <code>&lt;progress&gt;</code>。</p><hr><h4 id="valid-和-invalid-有效性验证伪类" tabindex="-1"><code>:valid</code> 和 <code>:invalid</code> 有效性验证伪类 <a class="header-anchor" href="#valid-和-invalid-有效性验证伪类" aria-label="Permalink to &quot;\`:valid\` 和 \`:invalid\` 有效性验证伪类&quot;">​</a></h4><p>输入值验证这类伪类是随着 HTML5 表单新特性一起产生的，HTML5 表单新特性有很多，包括新增的 required 和 pattern 等验证相关属性，以及 min 和 max 等范围相关属性。<br> HTML5 表单新特性从 IE10 浏览器才开始支持，因此这些输入值验证伪类的兼容性都要在 IE10 及以上版本的浏览器中才受支持，目前只能应用于在兼容性要求不高的项目中。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">	input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:valid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">green</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#fff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">	input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:invalid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	  border</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">验证码：&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> requiredpattern=&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\w</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{4,6}&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>对于上诉代码 ，默认状态下，由于输入框中没有值，这与 required 必填验证不符，将触发 <code>:invalid</code> 伪类匹配，输入框表现为 2px 大小的红色边框。<br> 如果我们在输入框中输入任意 4 个数字，匹配 pattern 属性值中的正则表达式，则会触发 <code>:valid</code> 伪类匹配，输入框的背景色表现为绿色。</p><p>以上就是 <code>:valid</code> 伪类和 <code>:invalid</code> 伪类的作用，乍一看它们好像还挺实用的，但实际上这两个特性并没有想象中那么好用，因为 <code>:valid</code> 伪类的匹配页面一加载就会被触发，这对用户而言其实是不友好的。举个例子，用户刚进入一个登录界面，还没进行任何操作，就显示大大的红色警告，你输入不合法，是会吓着用户的。<br> 鉴于以上原因，现在新出了一个 <code>:user-invalid</code> 伪类，它需要用户的交互才触发匹配，不过目前 <code>:user-invalid</code> 伪类的规范还没有完全成熟，浏览器尚未支持，无法使用。但没关系，我们可以辅助 JavaScript 优化 <code>:invalid</code> 伪类的验证体验。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .cs-input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  	border</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> gray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	/★验证不合法时边框为红色＊/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	.valid</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .cs-input:invalid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		border-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/*验证全部通过标记*/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	.valid.cs-input:valid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.cs-valid-tips::before</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;√&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">green</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/*验证不合法提示＊/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	.valid .cs-input:invalid + .cs-valid-tips::before {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		content：&quot;不符合要求&quot;;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		color: red;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/★空值提示*/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	.valid.cs-input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">placeholder-shown</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.cs-valid-tips::before</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">：&quot;尚未输入值&quot;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;csForm&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> novalidate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		验证码:&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cs-input&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> placeholder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> required</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\\w{4,6}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cs-valid-tips&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;submit&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;提交&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	csForm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;submit&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.classList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;valid&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">／判断表单全部验证通过</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.checkValidity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">checkValidity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			console.log（</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;表单验证通过&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">）；</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">／这里可以执行表单ajax提交了</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			event.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preventDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	csForm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	  event.target.classList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;valid&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="note custom-block github-alert"><p class="custom-block-title">如何触发 IE 浏览器的重绘</p><p>IE 浏览器有一个严重的渲染 bug，对于输入框元素，<code>:invalid</code> 等伪类只会实时匹配输入框元素自身，而输入框后面的兄弟元素样式不会重绘，于是我们会发现，明明输入的值已经合法了，输入框的红色边框也消失了，但是输入框后面的错误提示文字却一直存在。<br> IE 浏览器下这类重绘 bug 屡见不鲜，但修复方法很简单，触发重绘即可。可以改变父元素的样式，或者设置无关紧要的类名，下面是我写的补丁，将它放在页面的任意位置即可：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//IE触发重绘的补丁</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.msHidden </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;undefined&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">history.pushState){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	document.addEventListener（</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">）{</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp;  /^</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">textarea$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">tagName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)){</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">			event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">parentElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.target.parentElement.className;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}）;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div><hr><h4 id="in-range-和-out-of-range-范围验证伪类" tabindex="-1"><code>:in-range</code> 和 <code>:out-of-range</code> 范围验证伪类 <a class="header-anchor" href="#in-range-和-out-of-range-范围验证伪类" aria-label="Permalink to &quot;\`:in-range\` 和 \`:out-of-range\` 范围验证伪类&quot;">​</a></h4><p><code>:in-range</code> 和 <code>:out-of-range</code> 伪类与 min 属性和 max 属性密切相关，因此这两个伪类常用来匹配 &#39;number&#39; 类型的输入框或 &#39;range&#39; 类型的输入框。例如：<br><code>&lt;input type=&quot;number&quot; min=&quot;1&quot; max=&quot;100&quot;&gt;</code><br><code>&lt;input type=&quot;range&quot; min=&quot;1&quot; max=&quot;100&quot;&gt;</code><br> 即输入框的最小值是 1，最大值是 100。此时，如果输入框的值不在这个范围，则会匹配 <code>:out-of-range</code> 伪类；如果输入框的值在这个范围内，则匹配 <code>:in-range</code> 伪类，测试 CSS 如下：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:in-range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">outline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dashed</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> green</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:out-of-range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">outline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;}</span></span></code></pre></div><hr><h4 id="required-和-optional-可选性伪类" tabindex="-1"><code>:required</code> 和 <code>:optional</code> 可选性伪类 <a class="header-anchor" href="#required-和-optional-可选性伪类" aria-label="Permalink to &quot;\`:required\` 和 \`:optional\` 可选性伪类&quot;">​</a></h4><p><code>:required</code> 伪类用来匹配设置了 required 属性的表单元素，表示这个表单元素必填或者必写。</p><p><code>:optional</code> 伪类可以看成是 <code>:required</code> 伪类的对立面，只要表单元素没有设置 required 属性，都可以匹配 <code>:optional</code> 伪类，甚至 <code>&lt;button&gt;</code> 按钮也可以匹配。</p><hr><div class="note custom-block github-alert"><p class="custom-block-title">\`:user-invalid\` 用户交互伪类和 \`:blank\` 空值伪类</p><p><code>:user-invalid</code> 伪类用于匹配用户输入不正确的元素，但只有在用户与它进行了显著交互之后才进行匹配。<code>:user-invalid</code> 伪类必须在用户尝试提交表单和用户再次与表单元素交互之前匹配。目前浏览器实现存疑，实际开发请使用 <code>:valid</code> 伪类和 JavaScript 代码配合实现。</p><p><code>:blank</code> 伪类的规范也是多变的，一开始是可以匹配空标签元素（可以有空格），现在变成匹配没有输入值的表单元素。等这个伪类成熟后，我将再对其进行介绍。如果想要匹配空值表单元素，请使用 <code>:placeholder-shown</code> 伪类代替（设置 placeholder 属性值为空格）。</p></div><hr><h3 id="树结构伪类" tabindex="-1">树结构伪类 <a class="header-anchor" href="#树结构伪类" aria-label="Permalink to &quot;树结构伪类&quot;">​</a></h3><h4 id="root-伪类" tabindex="-1"><code>:root</code> 伪类 <a class="header-anchor" href="#root-伪类" aria-label="Permalink to &quot;\`:root\` 伪类&quot;">​</a></h4><p><code>:root</code> 伪类表示文档根元素，IE9 及以上版本的浏览器支持该伪类。<br> 在 XHTML 或者 HTML 页面中，<code>:root</code> 伪类表示的就是 <code>&lt;html&gt;</code> 元素。</p><div class="note custom-block github-alert"><p class="custom-block-title">html 标签选择器与 \`:root\` 伪类</p><p></p><p>html 标签选择器也匹配 <code>&lt;html&gt;</code> 元素，那这两个选择器有什么区别吗？</p><ol><li><code>:root</code> 伪类的优先级更高，毕竟伪类的优先级比标签选择器的优先级要高一个层级；</li><li>对于 <code>:root</code>，IE9 及以上版本的浏览器才支持，它的兼容性要逊于 html 标签选择器；</li><li><code>:root</code> 指所有 XML 格式文档的根元素，XHTML 文档只是其中一种。</li></ol></div><p>应用场景</p><ol><li><p>滚动条出现页面不跳动<br> 则页面加载或者交互变化导致页面高度超过一屏的时候，页面就会有一个从无滚动条到有滚动条的变化过程。而在 Windows 系统下，所有浏览器的默认滚动条都占据 17px 宽度，滚动条的出现必然导致页面的可用宽度变小，需要重新计算主体模块的居中定位，导致内容发生偏移，页面会突然跳动，体验很不好。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 常见做法(缺点：让高度不足一屏的页面的右侧也显示滚动条的轨道) */</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  overflow-y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scroll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 使用:root */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* IE8 */</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  overflow-y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scroll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* IE9+ */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	overflow-x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:root</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">absolute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">vw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>CSS 变量<br> 现代浏览器都已经支持了 CSS 自定义属性（也就是 CSS 变量)，其中有一些变量是全局的，如整站的颜色、主体布局的尺寸等。对于这些变量，业界约定俗成，都将它们写在：root 伪类中，虽然将它们写在 html 标签选择器中也一样。之所以写在 <code>:root</code> 伪类中，是因为这样做代码的可读性更好。同样是根元素，html 选择器负责样式，<code>:root</code> 伪类负责变量，这一点是约定俗成的，它们互相分离，各司其职。</p></li></ol><hr><h4 id="empty-伪类" tabindex="-1"><code>:empty</code> 伪类 <a class="header-anchor" href="#empty-伪类" aria-label="Permalink to &quot;\`:empty\` 伪类&quot;">​</a></h4><p><code>:empty</code> 伪类的基本匹配特性：</p><ol><li>匹配空标签元素。</li><li>匹配前后闭合的替换元素，如 <code>&lt;button&gt;</code> 元素和 <code>&lt;textarea&gt;</code> 元素</li><li>匹配非闭合元素，如 <code>&lt;input&gt;</code> 元素、<code>&lt;img&gt;</code> 元素和 <code>&lt;hr&gt;</code> 元素等。</li><li>若元素内有注释，无法匹配</li><li>若元素里面有一个空格或者标签有换行，无法匹配</li><li><code>::before</code> 和 <code>::after</code> 伪元素可以给标签插入内容、图形，但这会不会影响 <code>:empty</code> 伪类的匹配</li></ol><p>应用场景：</p><ol><li><p>隐藏空元素<br> 例如，某个模块里面的内容是动态的，可能是列表，也可能是按钮，这些模块容器常包含影响布局的 CSS 属性，如 margin、padding 属性等。当然，这些模块里面有内容的时候，布局显示效果是非常好的，然而一旦这些模块里面的内容为空，页面上就会有一块很大的明显的空白，效果就不好，这种情况下使用 <code>:empty</code> 伪类控制一下就再好不过了。</p></li><li><p>字段缺失智能提示<br> 用户的某些信息字段是缺失的，此时并发人员应该使用其他占位字符示意这里没有内容，如短横线（<code>-</code>）或者直接使用文字提示。但多年的开发经验告诉我，开发人员非常容易忘记这里的特殊处理，最终导致布局混乱，信息难懂。<br> 除此之外，还有一类典型场景需要用到 <code>:empty</code> 伪类，那就是动态 Ajax 加载数据为空的情况。当一个新用户进入一个产品的时候，很多模块内容是没有的。要是在过去，我们需要在 JavaScript 代码中做 if 判断，如果没有值，我们要吐出“没有结果”或者“没有数据”的信息。但是现在，有了 <code>:empty</code> 伪类，直接把这个工作交给 CSS 就可以了。例如：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.cs-search-module:empty::before</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">：&#39;没有搜索结果&#39;；</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	line-height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	text-align</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><hr><p><strong>子索引伪类</strong>都是用来匹配子元素的，必须是独立标签的元素，文本节点、注释节点是无法匹配的。</p><h4 id="first-child-伪类和-last-child-伪类" tabindex="-1"><code>:first-child</code> 伪类和 <code>:last-child</code> 伪类 <a class="header-anchor" href="#first-child-伪类和-last-child-伪类" aria-label="Permalink to &quot;\`:first-child\` 伪类和 \`:last-child\` 伪类&quot;">​</a></h4><p><code>:first-child</code> 伪类可以匹配第一个子元素。<br><code>:last-child</code> 伪类可以匹配最后一个子元素。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :first-child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	font-weight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">deepskyblue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :last-child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	font-style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">italic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="only-child-伪类" tabindex="-1"><code>:only-child</code> 伪类 <a class="header-anchor" href="#only-child-伪类" aria-label="Permalink to &quot;\`:only-child\` 伪类&quot;">​</a></h4><p><code>:only-child</code>，顾名思义，就是匹配没有任何兄弟元素的元素。</p><p>尤其需要使用 <code>:only-child</code> 的场景是动态场景，也就是某个固定小模块，根据场景的不同，里面可能是一个子元素，也可能是多个子元素，元素个数不同，布局方式也不同，此时就是 <code>:only-child</code> 伪类大放异彩的时候。例如，某个加载（loading）模块里面可能就只有一张加载图片，也可能仅仅就是一段加载描述文字，也可能是加载图片和加载文字同时出现，此时 <code>:only-child</code> 伪类就非常好用。</p><h4 id="nth-child-伪类和-nth-last-child-伪类" tabindex="-1"><code>:nth-child()</code> 伪类和 <code>:nth-last-child()</code> 伪类 <a class="header-anchor" href="#nth-child-伪类和-nth-last-child-伪类" aria-label="Permalink to &quot;\`:nth-child()\` 伪类和 \`:nth-last-child()\` 伪类&quot;">​</a></h4><p><code>:nth-last-child()</code> 伪类和 <code>:nth-child()</code> 伪类的区别在于，<code>:nth-last-child()</code> 伪类是从后面开始按指定序号匹配，而 <code>:nth-child()</code> 伪类是从前面开始匹配。除此之外，两者没有其他区别，无论是在兼容性还是语法方面。</p><p><code>:nth-child()</code> 伪类虽然功能很强大，但只适用于内容动态、无法确定的匹配场景。如果数据是纯静态的，哪怕是列表，都请使用类名或者属性选择器进行匹配。</p><p><code>:nth-child()</code> 伪类可以匹配指定索引序号的元素，支持一个参数，且参数必须有，参数可以是关键字值或者函数符号这两种类型。</p><ol><li><p>关键字值的形式如下。</p><ul><li>odd：匹配第奇数个元素，如第 1 个元素，第 3 个元素，第 5 个元素...</li><li>even：匹配第偶数个元素，如第 2 个元素，第 4 个元素，第 6 个元素...</li></ul></li><li><p>函数符号的形式如下。</p><ul><li>$An+B$：其中 $A$ 和 $B$ 都是固定的数值，且必须是整数；$n$ 可以理解为从 1 开始的自然序列（0,1,2,3...），$n$ 前面可以有负号。第一个子元素的匹配序号是 1，小于 1 的计算序号都会被忽略。</li></ul></li></ol><p>快速了解一下各种类型的参数的含义：</p><ul><li><code>tr:nth-child(odd)</code>：匹配表格的第 1,3,5 行，等同于 <code>tr:nth-child(2n+1)</code>。</li><li><code>tr:nth-child(even)</code>：匹配表格的第 2,4,6 行，等同于 <code>tr:nth-child(2n)</code>。</li><li><code>:nth-child(3)</code>：匹配第 3 个元素。</li><li><code>:nth-child(5n)</code>：匹配第 5,10,15,…个元素。</li><li><code>:nth-child(3n+4)</code>：匹配第 4,7,10,...个元素。</li><li><code>:nth-child(-n+3)</code>：匹配前 3 个元素。</li><li><code>li:nth-child(n)</code>：匹配所有的 <code>&lt;li&gt;</code> 元素，就匹配的元素而言和 li 标签选择器一模一样，区别就是优先级更高了。实际开发总是避免过高的优先级，因此没有任何理由这么使用。</li><li><code>li:nth-child(1)</code>：匹配第一个 <code>&lt;li&gt;</code> 元素，和 <code>li:first-child</code> 匹配的作用一样， 区别就是后者的兼容性更好，因此，也没有任何这么使用的理由。</li><li><code>li:nth-child(n+4):nth-child(-n+10)</code>：匹配第 4～10 个 <code>&lt;li&gt;</code> 元素，这个就属于比较高级的用法了。例如，考试成绩是前 3 名的有徽章，第 4 名到第 10 名高亮显 示，此时，这种正负值组合的伪类就非常好用。</li></ul><p>使用场景：</p><ol><li>斑马线条纹。<br> 此效果多用在密集型大数量的列表或者表格中，不容易看错行，通常设置偶数位数的列表为深色背景。</li><li>列表边缘对齐。</li><li>固定区间的列表高亮。</li><li>动态列表数量匹配技术</li></ol><hr><p><strong>匹配类型的子索引伪类</strong>类似于子索引伪类，区别在于匹配类型的子索引伪类是在同级列表中相同标签元素之间进行索引与解析的。</p><h4 id="first-of-type-伪类和-last-of-type-伪类" tabindex="-1"><code>:first-of-type</code> 伪类和 <code>:last-of-type</code> 伪类 <a class="header-anchor" href="#first-of-type-伪类和-last-of-type-伪类" aria-label="Permalink to &quot;\`:first-of-type\` 伪类和 \`:last-of-type\` 伪类&quot;">​</a></h4><p><code>:first-of-type</code> 表示当前标签类型元素的第一个。<br><code>:first-of-type</code> 表示当前标签类型元素的最后一个。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :first-of-type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">deepskyblue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  font-style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">italic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="only-of-type-伪类" tabindex="-1"><code>:only-of-type</code> 伪类 <a class="header-anchor" href="#only-of-type-伪类" aria-label="Permalink to &quot;\`:only-of-type\` 伪类&quot;">​</a></h4><p><code>:only-of-type</code> 表示匹配唯一的标签类型的元素。</p><h4 id="nth-of-type-伪类和-nth-last-of-type-伪类" tabindex="-1"><code>:nth-of-type()</code> 伪类和 <code>:nth-last-of-type()</code> 伪类 <a class="header-anchor" href="#nth-of-type-伪类和-nth-last-of-type-伪类" aria-label="Permalink to &quot;\`:nth-of-type()\` 伪类和 \`:nth-last-of-type()\` 伪类&quot;">​</a></h4><p><code>:nth-of-type()</code> 伪类匹配指定索引的当前标签类型元素，<code>:nth-last-of-type()</code> 伪类是从前面开始匹配，而 <code>:nth-last-of-type()</code> 伪类是从后面开始匹配。</p><p>匹配规则同 <code>:nth-child()</code></p><p><code>:nth-of-type()</code> 伪类适用于特定标签组合且这些组合会不断重复的场合。在整个 HTML 中，这样的组合元素并不多见，说得出来的也就是“dt + dd”组合和以及“details &gt; summary”组合</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;标题1&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;内容1&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;标题2&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;内容2&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">details</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">summary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;订单中心&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">summary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;我的订单&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;我的活动&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;评价晒单&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;购物助手&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">details</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><hr><h3 id="逻辑组合伪类" tabindex="-1">逻辑组合伪类 <a class="header-anchor" href="#逻辑组合伪类" aria-label="Permalink to &quot;逻辑组合伪类&quot;">​</a></h3><h4 id="not-否定伪类" tabindex="-1"><code>:not()</code> 否定伪类 <a class="header-anchor" href="#not-否定伪类" aria-label="Permalink to &quot;\`:not()\` 否定伪类&quot;">​</a></h4><p><code>:not()</code> 是否定伪类，如果当前元素与括号里面的选择器不匹配，则该伪类会进行匹配。<br> 例如 <code>:not(p){}</code> 会匹配所有标签不是 p 的元素，包括 <code>&lt;html&gt;</code> 元素和 <code>&lt;body&gt;</code> 元素。</p><p>注意点：</p><ol><li><p><code>:not()</code> 伪类的优先级是 0，即它本身没有任何优先级，最终选择器的优先级是由括号里面的表达式决定的。<br> 例如 <code>:not(p){}</code> 的优先级就是 p 选择器的优先级。</p></li><li><p><code>:not()</code> 伪类可以不断级联。<br> 例如 <code>:input:not(:disabled):not(:read-only){}</code> 表示匹配所有不处于禁用状态，也不处于只读状态的 <code>&lt;input&gt;</code> 元素。</p></li><li><p><code>:not()</code> 伪类目前尚未支持多个表达式，也不支持出现选择符。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*尚未支持*/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.cs-li:not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*可以使用下面的写法代替：*/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.cs-li:not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){}</span></span></code></pre></div></li></ol><ul><li><h6 id="告别重置-全部交给-not" tabindex="-1">告别重置，全部交给 <code>:not()</code> <a class="header-anchor" href="#告别重置-全部交给-not" aria-label="Permalink to &quot;告别重置，全部交给 \`:not()\`&quot;">​</a></h6></li></ul><p><code>:not()</code> 伪类最大的作用就是可以优化过去我们重置 CSS 样式的策略。由于重置样式在 Web 开发中非常常见，因此 <code>:not()</code> 伪类的适用场景非常广泛。<br> 举个例子，我们在实现选项卡切换效果的时候会默认隐藏部分选项卡面板，点击选项卡按钮后通过添加激活状态类名让隐藏的面板再显示，CSS 如下：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.cs-panel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.cs-panel.active</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>实际上，这种效果有更好的实现方式，那就是使用 <code>:not()</code> 伪类，推荐使用下面的 CSS 代码：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.cs-panel:not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.active）</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	display: none;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>使用 <code>:not()</code> 伪类有如下优点。</p><ol><li>使代码更简洁。</li><li>更好理解。</li><li>保护了原类名的优先级，扩展性更强，更利于维护，这是最重要的一点。<br> 总之，大家一定要培养这样的意识：一旦遇到需要重置 CSS 样式的场景，第一反应就是使用使用 <code>:not()</code> 伪类。</li></ol><hr><h4 id="is-任意匹配伪类" tabindex="-1"><code>:is()</code> 任意匹配伪类 <a class="header-anchor" href="#is-任意匹配伪类" aria-label="Permalink to &quot;\`:is()\` 任意匹配伪类&quot;">​</a></h4><p><code>:is()</code> 伪类可以把括号中的选择器依次分配出去，对于那种复杂的有很多逗号分隔的选择器非常有用。</p><p><code>:is()</code> 伪类本身的优先级为 0，整个选择器的优先级是由 <code>:is()</code> 伪类里面器决定的。例如：<br><code>:is(.article, section） p {}</code><br> 优先级等同于 <code>.articla p</code>，又如:<br><code>:is(#article,.section) p {}</code><br> 优先级等同于 <code>#articla p</code>。这是由参数中优先级最高的选择器决定的。</p><p><code>:is()</code> 伪类由于是新伪类，没有历史包袱，因此浏览器厂商直接按照最新的标准实现，参数可以是复杂选择器或复杂选择器列表，这一点和 <code>:not()</code> 伪类不同，<code>:not()</code> 伪类目前只支持简单选择器参数。</p><p><code>:is()</code> 伪类的作用就是简化选择器。例如，平时开发经常会遇到类似下面的 CSS 代码：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.cs-avatar-a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> img</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.cs-avatar-b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> img</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.cs-avatar-c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> img</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.cs-avatar-d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> img</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	border-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*此时就可以使用:is()伪类进行简化：*/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.cs-avatar-a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.cs-avatar-b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.cs-avatar-c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.cs-avatar-d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> img</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	border-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这种简化只是一维的，<code>:is()</code> 伪类的优势并不明显，但如果选择器是交叉组合的，那 <code>:is()</code> 伪类就大放异彩了。例如，有序列表和无序列表可以相互嵌套，假设有两层嵌套关系，则最里面的 <code>&lt;li&gt;</code> 元素就存在下面 4 种可能场景：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ol</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> ol</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ol</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> ul</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> ul</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> ol</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  margin-left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">em</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/使用</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()伪类进行强化</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ol， </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  margin-left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">em</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h4 id="where-任意匹配伪类" tabindex="-1"><code>:where()</code> 任意匹配伪类 <a class="header-anchor" href="#where-任意匹配伪类" aria-label="Permalink to &quot;\`:where()\` 任意匹配伪类&quot;">​</a></h4><p><code>:where()</code> 伪类是和 <code>:is()</code> 伪类一同出现的，它们的含义、语法、作用一模一样。唯一的区别就是优先级不一样，<code>:where()</code> 伪类的优先级永远是 0。</p><hr><h4 id="has-关联伪类" tabindex="-1"><code>:has()</code> 关联伪类 <a class="header-anchor" href="#has-关联伪类" aria-label="Permalink to &quot;\`:has()\` 关联伪类&quot;">​</a></h4><p><code>:has()</code> 伪类是一个规范制定得很早但浏览器却迟迟没有支持的伪类。如果浏览器能够支持，其功能会非常强大，因为它可以实现类似“父选择器”和“前面兄弟选择器”的功能，对 CSS 的开发会有颠覆性的影响。<br> 例如：<br><code>a:has(&lt; svg) {}</code><br> 表示匹配包含有 <code>&lt;svg&gt;</code> 元素的 <code>&lt;a&gt;</code> 元素，实现的就是“父选择器”的效果，即根据子元素选择父元素。<br> 又如：<br><code>hl:has(+ p){}</code><br> 表示匹配后面跟随 <code>&lt;p&gt;</code> 元素的 <code>&lt;h1&gt;</code> 元素，实现的就是“前面兄弟选择器”的效果，即根据后面的兄弟元素选择前面的元素。</p><hr><h3 id="其他伪类" tabindex="-1">其他伪类 <a class="header-anchor" href="#其他伪类" aria-label="Permalink to &quot;其他伪类&quot;">​</a></h3><h4 id="scope-参考元素伪类" tabindex="-1"><code>:scope</code> 参考元素伪类 <a class="header-anchor" href="#scope-参考元素伪类" aria-label="Permalink to &quot;\`:scope\` 参考元素伪类&quot;">​</a></h4><p>曾经有一段时间，部分浏览器曾经支持过“在一个网页文档中支持多个 CSS 作用域”，语法是在 <code>&lt;style&gt;</code> 元素上设置 scoped 属性，如下：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> scoped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .your-css</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>在一番争论之后，这个特性被舍弃了，原本支持它的浏览器也不支持了，scoped 属性也被彻底移除了，如昙花一现。<br> 然而，<code>:scope</code> 伪类却被保留了下来，而且除了 IE/Edge，其他浏览器都支持。但是，不要兴奋，虽然浏览器都支持 <code>:scope</code>，但已经完全变味了。在 CSS 世界中，<code>:scope</code> 伪类更像是一个摆设。因为如今的网页只有一个 CSS 作用域，所以 <code>:scope</code> 伪类等同于 <code>:root</code> 伪类。</p><p>当然，存在即合理。：scope 也不是一无是处，它是一个非常安全的用来区分 IE/Edge 和其他浏览器的利器，区分方法为:</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* IE/Edge */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.cs-class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Chrome/Firefox/Safari等其他浏览器 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.cs-class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span></code></pre></div><p>另外，虽然 <code>:scope</code> 伪类在 CSS 世界中的作用有限，但是它在一些 DOM API 中却表现出了真正的语义，这些 API 包括 querySelector()、querySelectorAll()、matches() 和 Element.closest()。此时 <code>:scope</code> 伪类匹配的是正在调用这些 API 的 DOM 元素。</p><hr><h4 id="host-shadow-树根元素伪类" tabindex="-1"><code>:host</code> Shadow 树根元素伪类 <a class="header-anchor" href="#host-shadow-树根元素伪类" aria-label="Permalink to &quot;\`:host\` Shadow 树根元素伪类&quot;">​</a></h4><p>要想让 CSS 不受全局 CSS 的影响，目前只有一个方法，就是创建 Shadow DOM，把样式写在其中，此时该 Shadow DOM 的根元素（Shadow Root）就是使用 <code>:host</code> 伪类进行匹配的。</p><hr><h4 id="host-shadow-树根元素匹配伪类" tabindex="-1"><code>:host()</code>Shadow 树根元素匹配伪类 <a class="header-anchor" href="#host-shadow-树根元素匹配伪类" aria-label="Permalink to &quot;\`:host()\`Shadow 树根元素匹配伪类&quot;">​</a></h4><p><code>:host()</code> 伪类对于浏览器原生 Web Components 开发非常重要，是务必要掌握的伪类。<br><code>:host()</code> 伪类也是用来匹配 Shadow DOM 根元素的，区别在于 <code>:host()</code> 可以根据根元素的 ID、类名或者属性进行有区别的匹配。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">square-img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./1.jpg&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;20o&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;直角头像&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">square-img</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">square-img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./1.jpg&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;20o&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;圆角头像&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> data-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">square-img</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]）{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	border-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>另外，<code>:host()</code> 伪类只能在 Shadow DOM 内部使用，在外部使用是没有效果的。</p><hr><h4 id="host-context-shadow-树根元素上下文匹配伪类" tabindex="-1"><code>:host-context()</code>Shadow 树根元素上下文匹配伪类 <a class="header-anchor" href="#host-context-shadow-树根元素上下文匹配伪类" aria-label="Permalink to &quot;\`:host-context()\`Shadow 树根元素上下文匹配伪类&quot;">​</a></h4><p><code>:host-context()</code> 伪类也是用来匹配 Shadow DOM 根元素的，与 <code>:host()</code> 伪类的区别在于，<code>:host-context()</code> 伪类可以借助 Shadow DOM 根元素的上下文元素（也就是父元素）来匹配。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cs-radius&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">square-img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./1.jpg&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;圆角头像&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">square-img</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:host-context(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.cs-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	border-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>同样，<code>:host-context()</code> 伪类只能在 Shadow DOM 内部使用，在外部使用是没有效果的。</p><hr><h4 id="fullscreen-与全屏相关的伪类" tabindex="-1"><code>:fullscreen</code> 与全屏相关的伪类 <a class="header-anchor" href="#fullscreen-与全屏相关的伪类" aria-label="Permalink to &quot;\`:fullscreen\` 与全屏相关的伪类&quot;">​</a></h4><p><code>:fullscreen</code> 伪类用来匹配全屏元素。<br> 桌面浏览器以及部分移动端浏览器是支持原生全屏效果的，通过 <code>dom.requestFullScreen()</code> 方法可让元素全屏显示，通过 <code>document.cancelFullScreen()</code> 方法可取消全屏。<br><code>:fullscreen</code> 伪类是用来匹配处于全屏状态的 dom 元素的，<code>::backdrop</code> 伪元素是用来匹配浏览器默认的黑色全屏背景元素的。</p><p>举个简单的例子，如果希望一个普通的 <code>&lt;img&gt;</code> 元素全屏时绝对定位居中显示，就可以使用 <code>:fullscreen</code> 进行设置：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;img&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cs-img-x&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cs-img&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/images/common/l/l.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	:fullscreen</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .cs-img</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">absolute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">translate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	img.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;click&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (document.fullscreen）{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		  document.cancelFullScreen();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}else{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		  this.requestFullScreen();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}	</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	});</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><hr><h4 id="dir-方向伪类" tabindex="-1"><code>:dir()</code> 方向伪类 <a class="header-anchor" href="#dir-方向伪类" aria-label="Permalink to &quot;\`:dir()\` 方向伪类&quot;">​</a></h4><p>在实际开发时，我们有时候希望布局的元素是从右往左排列的。例如，实现微信或者 QQ 这样的左右对话效果，右侧的对话布局就可以直接添加 HTMLdir 属性控制实现。</p><p>用传统的实现方法，我们会使用属性选择器进行匹配。例如：<br><code>[dir=&quot;rtl&quot;] .cs-avatar {}</code><br> 但是，<code>［dir=&quot;rtl&quot;]</code> 选择器有一个比较明显的缺点，即它无法直接匹配没有设置 dir 属性的元素，也无法准确知道没有设置 dir 属性元素的准确的方向，因为 dir 带来的文档流方向变化是具有继承性的。例如，在 <code>&lt;body&gt;</code> 元素上设置 <code>[dir=&quot;rtl&quot;]</code>，只靠属性选择器是无法知道某个具体的图片的方向是 &quot;ltr&quot; 还是 &quot;rtl&quot; 的。<br><code>:dir()</code> 伪类就是为弥补这个缺点而设计的，无论元素有没有设置 dir 属性，抑或有没有直接使用 CSS 的 direction 属性从而改变了文档流方向，<code>:dir()</code> 伪类都可以准确匹配。<br> 例如：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.cs-content:dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rtl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">）{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/*处于从右往左的文档流中，内容背景色高亮为深天蓝色＊/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	background-color: deepskyblue;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">}</span></span></code></pre></div><p><code>:dir()</code> 伪类的语法如下：<br><code>:dir( ltr | rtl )</code><br> 其中 ltr 是 left-to-right 的缩写，表示图文从左往右排列；rtl 是 right-to-left 的缩写，表示图文从右往左排列。</p><hr><h4 id="lang-语言伪类" tabindex="-1"><code>:lang()</code> 语言伪类 <a class="header-anchor" href="#lang-语言伪类" aria-label="Permalink to &quot;\`:lang()\` 语言伪类&quot;">​</a></h4><p><code>:lang()</code> 伪类用来匹配指定语言环境下的元素。<br> 一个标准的 XHTML 文档结构会在 <code>&lt;html&gt;</code> 元素上通过 HTML1ang 属性标记语言类型，</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-- 对于简体中文站点，建议使用 zh-cmn-Hans:--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;zh-cmn-Hans&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-- 对于英文站点或者海外服务器，常使用en--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;en&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>此时，页面上的任意标准 HTML 元素都可以使用 <code>:lang()</code> 伪类进行匹配。其中，括号内的参数是语言代码，如 en、fr、zh 等。例如：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*匹配英文语言*/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.cs-content:lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">en</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*匹配中文语言*/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.cs-content:lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">zh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){}</span></span></code></pre></div><p><code>:lang()</code> 伪类的典型示例是 CSS quotes 属性的引号匹配。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(en）&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">q</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { quotes: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\201C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\201D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\2018</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\2019</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">；}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:lang(fr） &gt;q { quotes:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;&lt;&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&gt;&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">；}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:lang(de） &gt;q { quotes:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;&lt;&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&gt;&gt;&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\2039</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\203A</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">；}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;p lang=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">en</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;q&gt;英语，外面有引号，&lt;q&gt;引号内嵌套的引号&lt;/q&gt;。&lt;/q&gt;&lt;/p&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;p lang=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;q&gt;法语，外面有引号，&lt;q&gt;引号内嵌套的引号&lt;/q&gt;。&lt;/q&gt;&lt;/p&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;p lang=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">de</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;q&gt;德语，外面有引号，&lt;q&gt;引号内嵌套的引号&lt;/q&gt;。&lt;/q&gt;&lt;/p&gt;</span></span></code></pre></div><p>但是，如果着眼于实际开发，我们是不会遇到上面这个使用引号的场景的，更常见的反而是使用 <code>:lang()</code> 伪类来实现资源控制。例如，如果是使用国内的 IP 访问，则页面输出的时候可以在 <code>&lt;html&gt;</code> 元素上设置 <code>lang=&quot;zh-cmn-Hans&quot;</code>；如果是使用国外的 IP 访问，则可以设置<br><code>lang=&quot;en&quot;</code>。<br> 此时，我们就可以根据 <code>:lang()</code> 的不同使用不同的资源或者呈现不一样的布局了。<br> 例如，国内的主要社交平台是微信、微博，国外的主要社交平台是脸书、推特。此时，我们可以借助 <code>:lang()</code> 伪类呈现不同的分享内容：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.cs-share-zh:not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">zh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.cs-share-en:not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">en</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)）{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  display: none;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>从上面这个案例可以看出，<code>:lang()</code> 伪类相对于 <code>[lang］</code> 属性选择器有以下两个优点。</p><ol><li>即使当前元素没有设置 HTMLlang 属性，也能够准确匹配。</li><li>伪类参数中使用的语言代码无须和 HTMLlang 属性值一样，例如，lang=&quot;zh&quot;、lang=&quot;zh-CN&quot;、lang=&quot;zh-SG&quot;、lang=&quot;zh-cmn-Hans&quot; 都可以使用 <code>:lang(zh)</code> 这个选择器进行匹配。</li><li>兼容性非常好，<code>:lang()</code> 伪类是一个非常古老的伪类，IE8 浏览器就已经开始支持，如果遇到合适的使用场景，可以放心使用。</li></ol><hr><h4 id="playing-和-paused-video-audio-播放状态伪类" tabindex="-1"><code>:playing</code> 和 <code>:paused</code> Video/Audio 播放状态伪类 <a class="header-anchor" href="#playing-和-paused-video-audio-播放状态伪类" aria-label="Permalink to &quot;\`:playing\` 和 \`:paused\` Video/Audio 播放状态伪类&quot;">​</a></h4><p><code>:playing</code> 伪类可以匹配正在播放的音视频元素，如果音视频因为缓存的原因而发生暂停，同样也是可以匹配 <code>:playing</code> 伪类的。<br><code>:paused</code> 伪类可以匹配处于停止状态的音视频元素，包括处于明确的停止状态或者资源已加载但尚未激活的元素。</p><p>有了这两个伪类，自定义播放器的皮肤按钮的时候，开发成本会小很多，因为播放以及暂停的状态已经全部交给浏览器原生解决，我们需要做的就是通过 CSS 匹配对应的按钮显示即可。<br> 例如：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.cs-button-playing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.cs-button-paused</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:playing </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .cs-button-playing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:paused </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .cs-button-paused</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>这两个伪类目前还没有得到浏览器的支持。</strong></p><hr>`,331)]))}const y=i(p,[["render",k]]);export{g as __pageData,y as default};
