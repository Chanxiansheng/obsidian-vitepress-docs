import{_ as t,c as o,o as p,ae as c}from"./chunks/framework.CIivgcbp.js";const _=JSON.parse('{"title":"SFC语法规范","description":"","frontmatter":{},"headers":[],"relativePath":"前端技术/07 Vue/Vue3/04 SFC语法规范.md","filePath":"前端技术/07 Vue/Vue3/04 SFC语法规范.md"}'),l={name:"前端技术/07 Vue/Vue3/04 SFC语法规范.md"};function r(d,e,s,a,i,u){return p(),o("div",null,e[0]||(e[0]=[c('<h1 id="sfc语法规范" tabindex="-1">SFC语法规范 <a class="header-anchor" href="#sfc语法规范" aria-label="Permalink to &quot;SFC语法规范&quot;">​</a></h1><blockquote><p>📌SFC全称Single File Component，单文件组件。</p><p><code>*.vue</code> 文件都由三种类型的顶层语法块所组成：<code>&lt;template&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;style&gt;</code></p></blockquote><ul><li><p><code>&lt;template&gt;</code><br> 每个 <code>*.vue</code> 文件最多可同时包含<strong>一个</strong>顶层 &lt;template&gt; 块。</p><p>其中的内容会被提取出来并传递给 @vue/compiler-dom，预编译为 JavaScript 的渲染函数，并附属到导出的组件上作为其 render 选项。</p></li><li><p><code>&lt;script&gt;</code><br> 每一个 <code>*.vue</code> 文件可以有<strong>多个</strong> &lt;script&gt; 块 (不包括&lt;script setup&gt;)。</p><p>该脚本将作为 ES Module 来执行。</p><p>其默认导出的内容应该是 Vue 组件选项对象，它要么是一个普通的对象，要么是 defineComponent 的返回值。</p></li><li><p><code>&lt;script setup&gt;</code><br> 每个 <code>*.vue</code> 文件最多只能有一个 &lt;script setup&gt; 块 (不包括常规的 &lt;script&gt;)</p><p>该脚本会被预处理并作为组件的 setup() 函数使用，也就是说它会在每个组件实例中执行。&lt;script setup&gt; 的顶层绑定会自动暴露给模板。</p><p>更多详情请查看 &lt;script setup&gt; 文档。</p></li><li><p><code>&lt;style&gt;</code><br> 一个 <code>*.vue</code> 文件可以包含多个 &lt;style&gt; 标签。</p><p>&lt;style&gt; 标签可以通过 scoped 或 module attribute (更多详情请查看 SFC 样式特性<a href="./32 Scoped与CSS新特性.html">32 Scoped与CSS新特性</a>) 将样式封装在当前组件内。多个不同封装模式的 &lt;style&gt; 标签可以在同一个组件中混</p></li></ul>',3)]))}const g=t(l,[["render",r]]);export{_ as __pageData,g as default};
