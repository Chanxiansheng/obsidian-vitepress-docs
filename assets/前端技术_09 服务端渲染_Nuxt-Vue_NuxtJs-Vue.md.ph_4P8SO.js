import{_ as t,c as a,o,ag as u}from"./chunks/framework.-ewJmwvT.js";const x=JSON.parse('{"title":"NuxtJs","description":"","frontmatter":{},"headers":[],"relativePath":"前端技术/09 服务端渲染/Nuxt-Vue/NuxtJs-Vue.md","filePath":"前端技术/09 服务端渲染/Nuxt-Vue/NuxtJs-Vue.md"}'),s={name:"前端技术/09 服务端渲染/Nuxt-Vue/NuxtJs-Vue.md"};function r(n,e,l,i,p,c){return o(),a("div",null,e[0]||(e[0]=[u('<h1 id="nuxtjs" tabindex="-1">NuxtJs <a class="header-anchor" href="#nuxtjs" aria-label="Permalink to &quot;NuxtJs&quot;">​</a></h1><p>#待补（程度：中）</p><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>Nuxt.js 是一个基于 Vue.js 的通用应用框架。</p><p>通过对客户端/服务端基础架构的抽象组织，Nuxt.js 主要关注的是应用的 <strong>UI 渲染</strong>。</p><p>我们的目标是创建一个灵活的应用框架，你可以基于它初始化新项目的基础结构代码，或者在已有 Node.js 项目中使用 Nuxt.js。</p><p>Nuxt.js 预设了利用 Vue.js 开发<strong>服务端渲染</strong>的应用所需要的各种配置。</p><p>除此之外，我们还提供了一种命令叫：nuxt generate ，为基于 Vue.js 的应用提供生成对应的静态站点的功能。</p><p>我们相信这个命令所提供的功能，是向开发集成各种微服务（Microservices）的 Web 应用迈开的新一步。</p><p>作为框架，Nuxt.js 为 <code>客户端/服务端</code> 这种典型的应用架构模式提供了许多有用的特性，例如异步数据加载、中间件支持、布局支持等。</p><blockquote><p>服务端渲染和客户端渲染的区别</p></blockquote><ul><li>安装 <ul><li>脚手架搭建：<code>npx nuxi@latest init &lt;project-name&gt;</code></li><li><code>pnpm dlx nuxi@latest init &lt;project-name&gt;</code></li><li>运行：<code>npm run dev -- -o</code></li></ul></li></ul><blockquote><p>Nuxt 安装报错与处理</p></blockquote><h2 id="_2" tabindex="-1">2 <a class="header-anchor" href="#_2" aria-label="Permalink to &quot;2&quot;">​</a></h2>',14)]))}const _=t(s,[["render",r]]);export{x as __pageData,_ as default};
