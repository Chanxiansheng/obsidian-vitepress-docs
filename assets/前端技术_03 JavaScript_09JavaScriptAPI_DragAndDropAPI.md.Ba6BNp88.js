import{_ as i,C as n,c as s,o as p,ae as d,j as a,a as l,G as r,w as o}from"./chunks/framework.CIivgcbp.js";const f="/obsidian-vitepress-docs/assets/DragAPI-1.Cq4QVsc7.png",A=JSON.parse('{"title":"Drag and Drop API","description":"","frontmatter":{},"headers":[],"relativePath":"前端技术/03 JavaScript/09JavaScriptAPI/DragAndDropAPI.md","filePath":"前端技术/03 JavaScript/09JavaScriptAPI/DragAndDropAPI.md"}'),u={name:"前端技术/03 JavaScript/09JavaScriptAPI/DragAndDropAPI.md"},g={tabindex:"0"};function m(b,e,D,c,v,P){const t=n("font");return p(),s("div",null,[e[36]||(e[36]=d('<h1 id="drag-and-drop-api" tabindex="-1">Drag and Drop API <a class="header-anchor" href="#drag-and-drop-api" aria-label="Permalink to &quot;Drag and Drop API&quot;">​</a></h1><blockquote><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DragEvent" target="_blank" rel="noreferrer">DragEvent - Web API | MDN</a></li><li><a href="https://juejin.cn/post/7014414669221724190" target="_blank" rel="noreferrer">HTML Drag &amp; Drop API 指南本文已参与「掘力星计划」，赢取创作大礼包，挑战创作激励金。 拖放功能在 W - 掘金</a></li></ol></blockquote><p><strong><code>DragEvent</code></strong> 是一个表示拖、放交互的一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event" title="DOM event" target="_blank" rel="noreferrer"><code>DOM event</code></a> 接口。用户通过将指针设备（例如鼠标）放置在触摸表面上并且然后将指针拖动到新位置（诸如另一个 DOM 元素）来发起拖动。应用程序可以按应用程序特定的方式自由解释拖放交互。</p><p>元素要支持可拖拽，需要做三件事：</p><ol><li>DOM 属性上设置 <code>draggable=true</code></li><li>添加 dragstart 事件监听</li><li>在监听事件中使用 <code>dataTransfer</code> 设置拖拽数据</li></ol><p>另一个元素要支持可放置：</p><ol><li>监听 dragover 事件，事件中调用阻止默认行为 <code>e.preventDefault()</code></li><li>监听 drop 事件，拿到 <code>dataTransfer</code> 对应的数据，处理对应的逻辑</li></ol><h2 id="draggable-属性" tabindex="-1">draggable 属性 <a class="header-anchor" href="#draggable-属性" aria-label="Permalink to &quot;draggable 属性&quot;">​</a></h2><p>当我们想让元素变成可拖拽时，我们就需要设置 draggable 属性。</p><p>属性值未设置的情况下，默认是 auto，此时拖拽行为为浏览器默认行为，只有选中的文字，链接，图片可以拖动。</p><p>draggable 属性值不是 Boolean 类型，需要显式设置为 true 或者 false，true 为可拖动，false 为不可拖动</p><h2 id="拖拽事件" tabindex="-1">拖拽事件 <a class="header-anchor" href="#拖拽事件" aria-label="Permalink to &quot;拖拽事件&quot;">​</a></h2>',12)),a("table",g,[e[35]||(e[35]=a("thead",null,[a("tr",null,[a("th",null,"event"),a("th",null,"description"),a("th",null,"常用处理")])],-1)),a("tbody",null,[a("tr",null,[e[3]||(e[3]=a("td",null,"dragstart",-1)),a("td",null,[e[1]||(e[1]=l("开始拖拽一个可拖拽元素时，在 ")),r(t,{color:"#ff0000"},{default:o(()=>e[0]||(e[0]=[l("可拖拽元素")])),_:1,__:[0]}),e[2]||(e[2]=l(" 身上触发"))]),e[4]||(e[4]=a("td",null,"设置拖拽数据，调整拖拽元素样式等",-1))]),a("tr",null,[e[8]||(e[8]=a("td",null,"dragend",-1)),a("td",null,[e[6]||(e[6]=l("结束拖拽一个可拖拽元素时，在 ")),r(t,{color:"#ff0000"},{default:o(()=>e[5]||(e[5]=[l("可拖拽元素")])),_:1,__:[5]}),e[7]||(e[7]=l(" 身上触发"))]),e[9]||(e[9]=a("td",null,"断拖拽操作是否成功，恢复拖拽元素样式等",-1))]),a("tr",null,[e[13]||(e[13]=a("td",null,"drag",-1)),a("td",null,[e[11]||(e[11]=l("拖拽一个可拖拽元素时，在 ")),r(t,{color:"#ff0000"},{default:o(()=>e[10]||(e[10]=[l("可拖拽元素")])),_:1,__:[10]}),e[12]||(e[12]=l(" 身上间隔几百毫秒触发一次"))]),e[14]||(e[14]=a("td",null,"拖拽的移动跟踪",-1))]),a("tr",null,[e[18]||(e[18]=a("td",null,"dragenter",-1)),a("td",null,[e[16]||(e[16]=l("可拖拽元素进入可放置元素时，在 ")),r(t,{color:"#245bdb"},{default:o(()=>e[15]||(e[15]=[l("可放置元素")])),_:1,__:[15]}),e[17]||(e[17]=l(" 身上触发"))]),e[19]||(e[19]=a("td",null,"设置样式，设置 dropEffect 等等",-1))]),a("tr",null,[e[23]||(e[23]=a("td",null,"dragover",-1)),a("td",null,[e[21]||(e[21]=l("当一个可拖拽元素被拖进一个可放置元素上时，在 ")),r(t,{color:"#245bdb"},{default:o(()=>e[20]||(e[20]=[l("可放置元素")])),_:1,__:[20]}),e[22]||(e[22]=l(" 身上间隔几百毫秒触发一次"))]),e[24]||(e[24]=a("td",null,"设置为可放置区，设置 dropEffect 等等",-1))]),a("tr",null,[e[28]||(e[28]=a("td",null,"dragleave",-1)),a("td",null,[e[26]||(e[26]=l("可拖拽元素离开可放置元素时，在 ")),r(t,{color:"#245bdb"},{default:o(()=>e[25]||(e[25]=[l("可放置元素")])),_:1,__:[25]}),e[27]||(e[27]=l(" 身上触发"))]),e[29]||(e[29]=a("td",null,"恢复样式",-1))]),a("tr",null,[e[33]||(e[33]=a("td",null,"drop",-1)),a("td",null,[e[31]||(e[31]=l("放置一个元素时，在 ")),r(t,{color:"#245bdb"},{default:o(()=>e[30]||(e[30]=[l("可放置元素")])),_:1,__:[30]}),e[32]||(e[32]=l(" 身上触发"))]),e[34]||(e[34]=a("td",null,"处理放置事件",-1))])])]),e[37]||(e[37]=d('<p>事件分类：</p><ul><li>可拖拽元素：dragstart，drag，dragend</li><li>可放置的元素：dragenter，dragover，drop，dragleave</li></ul><h2 id="拖拽数据对象" tabindex="-1">拖拽数据对象 <a class="header-anchor" href="#拖拽数据对象" aria-label="Permalink to &quot;拖拽数据对象&quot;">​</a></h2><p>拖拽数据对象涉及到三个类：<code>DataTransfer</code>, <code>DataTransferItemList</code>, <code>DataTransferItem</code></p><h3 id="datatransfer" tabindex="-1">DataTransfer <a class="header-anchor" href="#datatransfer" aria-label="Permalink to &quot;DataTransfer&quot;">​</a></h3><p>DataTransfer 对象用于保存在拖放操作期间拖动的数据，同时还可以设置拖拽样式，读取拖拽文件等等。它可以包含一个或多个数据项，每个数据项包含一个或多个数据类型。</p><p>所有拖拽事件中我们都可以通过 event.dataTransfer 访问到它。</p><p>属性：</p><ul><li><code>dropEffect</code> ：当前选定的拖放操作类型，一般在可放置元素的相关事件中设置</li><li><code>effectAllowed</code> ：提供可用的操作类型，一般在拖拽元素的相关事件中设置</li><li><code>files</code> ：包含数据传输中可用的所有本地文件的列表。如果拖动操作不涉及拖动文件，则此属性为空列表</li><li><code>items</code> ：提供一个包含所有拖动数据列表的 <code>DataTransferItemList</code> 对象 ，只读属性。</li><li><code>types</code> ：所有数据项类型的数组</li></ul><p>方法：</p><ul><li><code>clearData()</code> ：删除与给定类型关联的数据。类型参数是可选的。如果类型为空或未指定，则删除与所有类型关联的数据</li><li><code>setData()</code> ：设置给定类型的数据。如果该类型的数据不存在，则将其添加到末尾，类型列表中的最后一项将是新的类型。如果该类型的数据已经存在，则在相同位置替换现有数据</li><li><code>getData()</code> ：获取给定类型的数据，如果该类型的数据不存在或 dataTransfer 不包含数据，则返回空字符串</li><li><code>setDragImage()</code> ：用于设置自定义的拖动图像。</li></ul><h4 id="dropeffect-effectallowed" tabindex="-1">dropEffect / effectAllowed <a class="header-anchor" href="#dropeffect-effectallowed" aria-label="Permalink to &quot;dropEffect / effectAllowed&quot;">​</a></h4><p><code>dropEffect</code> 用于表示放置区接受什么行为的拖放，一般在 dragenter 和 dragover 中设置；对应的 <code>effectAllowed</code> 表示这次拖拽的行为是什么行为，要在 dragstart 中设置。</p><p><code>effectAllowed</code> 支持的值:</p><ul><li><code>none</code>: 所有拖拽行为都允许</li><li><code>copy</code>: 支持复制行为</li><li><code>move</code>: 支持移动行为</li><li><code>link</code>: 支持链接关联行为</li><li><code>copyMove</code>: 支持 copy 和 move</li><li><code>copyLink</code>: 支持 copy 和 link</li><li><code>linkMove</code>: 支持 link 和 move</li><li><code>all</code>: 支持 copy, move 和 link</li><li><code>uninitialized</code>: 未设置值，默认和 all 效果一样</li></ul><p><code>dropEffect</code> 支持的值:</p><ul><li><code>none</code>: 不允许放置</li><li><code>copy</code>: 支持复制行为</li><li><code>move</code>: 支持移动行为</li><li><code>link</code>: 支持链接关联行为</li></ul><h4 id="files" tabindex="-1">files <a class="header-anchor" href="#files" aria-label="Permalink to &quot;files&quot;">​</a></h4><p>这个属性就如定义一样，如果拖拽的文件，这个数组就对应的就有 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FAPI%2FFile" title="https://developer.mozilla.org/en-US/docs/Web/API/File" target="_blank" rel="noreferrer">File</a> 对象的数组项</p><h4 id="items" tabindex="-1">items <a class="header-anchor" href="#items" aria-label="Permalink to &quot;items&quot;">​</a></h4><p>这个属性保存了所有拖拽数据，我们在下面 DataTransferItemList 中介绍它。</p><h4 id="types" tabindex="-1">types <a class="header-anchor" href="#types" aria-label="Permalink to &quot;types&quot;">​</a></h4><p>这个数组保存了当前拖拽数据所有的数据类型值</p><h4 id="cleardata" tabindex="-1">clearData() <a class="header-anchor" href="#cleardata" aria-label="Permalink to &quot;clearData()&quot;">​</a></h4><p>这个方法就是清除拖拽数据项的方法，不传参数清除所有数据，有传就清除对应类型的数据。</p><h4 id="setdata" tabindex="-1">setData() <a class="header-anchor" href="#setdata" aria-label="Permalink to &quot;setData()&quot;">​</a></h4><p>设置拖拽数据的方法，format 可以使用一些通用的值，如 text/plain，或者自定义值。data 为字符串，如果你数据是对象的话，需要序列化处理下。</p><p>同时设置数据默认会加到 dataTransfer.items 数组最后位置，但是如果数据的类型已存在，就会更新之前那条数据项的值。</p><h4 id="getdata" tabindex="-1">getData() <a class="header-anchor" href="#getdata" aria-label="Permalink to &quot;getData()&quot;">​</a></h4><p>获取拖拽项数据的方法，传入数据类型获取。</p><h4 id="setdragimage" tabindex="-1">setDragImage() <a class="header-anchor" href="#setdragimage" aria-label="Permalink to &quot;setDragImage()&quot;">​</a></h4><p>拖拽元素，浏览器默认会有一个图像。通过此方法可以自定义拖拽图像。</p><h3 id="datatransferitemlist" tabindex="-1">DataTransferItemList <a class="header-anchor" href="#datatransferitemlist" aria-label="Permalink to &quot;DataTransferItemList&quot;">​</a></h3><p>一个 DataTransferItem 数组，DataTransferItem 代表的是一个拖拽数据项。event.dataTransfer.items 即是此类型</p><p>属性:</p><ul><li><code>length</code>: 数组长度</li></ul><p>方法:</p><ul><li><code>add(data, type)</code> 添加一个拖拽数据项，这个方法和 dataTransfer 的 getData 类似，不过在添加相同的类型数据的时候，这个方法会返回一个错误</li><li><code>remove(index)</code> 移除一个数据项</li><li><code>clear()</code> 清除数据项</li></ul><h3 id="datatransferitem" tabindex="-1">DataTransferItem <a class="header-anchor" href="#datatransferitem" aria-label="Permalink to &quot;DataTransferItem&quot;">​</a></h3><p>拖拽时是数据项，event.dataTransfer.items 中的每一项即是此类型</p><p>属性：</p><ul><li><code>kind</code>: 指明数据是文件还是字符串，string | file</li><li><code>type</code>: 数据的类型</li></ul><p>方法：</p><ul><li><code>getAsFile(callback)</code> 返回 File，拖拽不是文件就返回 null</li><li><code>getAsFileSystemHandle(callback)</code> 返回文件或者文件夹 handle，拖拽不是文件就返回 null</li><li><code>getAsString(callback)</code> 返回字符串</li></ul><p>注意 DataTransferItem 获取数据方法是异步的，dataTransfer 的 getData 的获取数据是同步的。通常我们直接是使用 dataTransfer 的方法即可。</p><h2 id="兼容性" tabindex="-1">兼容性 <a class="header-anchor" href="#兼容性" aria-label="Permalink to &quot;兼容性&quot;">​</a></h2><p><img src="'+f+'" alt="D-学习笔记/前端技术/03 JavaScript/06浏览器环境/attachments/DragAPI-1.png"></p>',47))])}const k=i(u,[["render",m]]);export{A as __pageData,k as default};
