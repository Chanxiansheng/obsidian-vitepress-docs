import{_ as i,c as a,o as l,ae as t}from"./chunks/framework.CIivgcbp.js";const c=JSON.parse('{"title":"watch 侦听器","description":"","frontmatter":{},"headers":[],"relativePath":"前端技术/07 Vue/Vue3/12 watch侦听器.md","filePath":"前端技术/07 Vue/Vue3/12 watch侦听器.md"}'),n={name:"前端技术/07 Vue/Vue3/12 watch侦听器.md"};function h(p,s,e,k,E,r){return l(),a("div",null,s[0]||(s[0]=[t(`<h1 id="watch-侦听器" tabindex="-1">watch 侦听器 <a class="header-anchor" href="#watch-侦听器" aria-label="Permalink to &quot;watch 侦听器&quot;">​</a></h1><p>侦听一个或多个响应式数据源，并在数据源变化时调用所给的回调函数。</p><p><code>watch( sources, callback, options):StopHandle</code></p><ul><li><p>watch 第一个参数监听源，有 4 种模式。</p><ol><li>ref 对象</li><li>reactive 对象</li><li>数组</li><li>函数</li></ol></li><li><p>watch 第二个参数回调函数 cb，有两个参数 newVal 和 oldVal。</p></li><li><p>watch 第三个参数一个 options 配置项是一个对象，有三个选项:</p><ul><li><code>immediate</code> 是否立即调用一次。</li><li><code>deep</code> 是否开启深度监听，reactive 对象默认开启深度监听。</li><li><code>flush</code> 执行时机，pre 组件更新之前调用；sync 同步执行；post 组件更新之后执行。</li></ul></li><li><p>返回一个 StopHandle 函数，调用即可停止侦听器。</p></li></ul><p>案例：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; 你好！&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; 再见！&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 用数组侦听多个数据源</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([message1, message2], (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">oldVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newVal, oldVal);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	deep: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 深度监听</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	immediate: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//立刻执行一次</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	flush: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pre&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //pre 组件更新之前调用；sync 同步执行；post 组件更新之后执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><ul><li>源码分析</li></ul>`,7)]))}const g=i(n,[["render",h]]);export{c as __pageData,g as default};
