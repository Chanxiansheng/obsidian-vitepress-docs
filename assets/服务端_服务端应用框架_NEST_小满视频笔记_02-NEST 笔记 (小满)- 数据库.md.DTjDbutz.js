import{_ as i,c as t,o as a,ag as n}from"./chunks/framework.-ewJmwvT.js";const o=JSON.parse('{"title":"02-NEST 笔记 (小满)- 数据库","description":"","frontmatter":{},"headers":[],"relativePath":"服务端/服务端应用框架/NEST/小满视频笔记/02-NEST 笔记 (小满)- 数据库.md","filePath":"服务端/服务端应用框架/NEST/小满视频笔记/02-NEST 笔记 (小满)- 数据库.md"}'),l={name:"服务端/服务端应用框架/NEST/小满视频笔记/02-NEST 笔记 (小满)- 数据库.md"};function e(p,s,h,k,d,r){return a(),t("div",null,s[0]||(s[0]=[n(`<h1 id="_02-nest-笔记-小满-数据库" tabindex="-1">02-NEST 笔记 (小满)- 数据库 <a class="header-anchor" href="#_02-nest-笔记-小满-数据库" aria-label="Permalink to &quot;02-NEST 笔记 (小满)- 数据库&quot;">​</a></h1><h2 id="typeorm" tabindex="-1">typeOrm <a class="header-anchor" href="#typeorm" aria-label="Permalink to &quot;typeOrm&quot;">​</a></h2><div class="info custom-block github-alert"><p class="custom-block-title">+ typeOrm</p><p>typeOrm 是 TypeScript 中最成熟的对象关系映射器 ( ORM )。因为它是用 TypeScript 编写的，所以可以很好地与 Nest 框架集成。同类型的还有 prisma。<br> 官网：<a href="https://typeorm.io/" target="_blank" rel="noreferrer">TypeORM</a></p></div><p>安装：<code>npm install --save @nestjs/typeorm typeorm mysql2</code></p><p>在 <code>app.module.ts</code> 注册</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { TypeOrmModule } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@nestjs/typeorm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  imports: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    TypeOrmModule.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forRoot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mysql&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      host: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;localhost&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3306</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      username: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;root&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      password: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;abc0769&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      database: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;nestjs_typeorm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      entities: [__dirname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/**/*.entity{.ts,.js}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//实体文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      synchronize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//synchronize字段代表是否自动将实体类同步到数据库</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      retryDelay: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//重试连接数据库间隔</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      retryAttempts: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//重试连接数据库的次数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      autoLoadEntities: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//如果为true,将自动加载实体 forFeature()方法注册的每个实体都将自动添加到配置对象的实体数组中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  controllers: [AppController],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AppModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }</span></span></code></pre></div><h2 id="实体" tabindex="-1">实体 <a class="header-anchor" href="#实体" aria-label="Permalink to &quot;实体&quot;">​</a></h2><p>实体是一个映射到数据库表的类。 你可以通过定义一个新类来创建一个实体，并用 <code>@Entity()</code> 来标记：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">///**/*.entity{.ts,.js}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {Entity,Column,PrimaryGeneratedColumn} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;typeorm&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Entity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //自增列</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PrimaryGeneratedColumn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">   id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //普通列</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">   name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>主列<br> 自动递增的主键</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PrimaryGeneratedColumn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;uuid&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:number</span></span></code></pre></div><ul><li>列类型</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({type:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;varchar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,length:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;int&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: number</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CreateDateColumn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({type:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;timestamp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create_time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:Date</span></span></code></pre></div><p>mysql 所有类型</p><p><code>int, tinyint, smallint, mediumint, bigint, float, double, dec, decimal, numeric, date, datetime, timestamp, time, year, char, varchar, nvarchar, text, tinytext, mediumtext, blob, longtext, tinyblob, mediumblob, longblob, enum, json, binary, geometry, point, linestring, polygon, multipoint, multilinestring, multipolygon, geometrycollection</code></p><ul><li>自动生成列</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Generated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;uuid&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uuid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:string</span></span></code></pre></div><ul><li>枚举列</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    type:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;enum&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    enum:[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    default:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  UserType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:string</span></span></code></pre></div><ul><li>列选项</li></ul><table tabindex="0"><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><strong>type</strong></td><td>ColumnType</td><td>列类型。</td></tr><tr><td><strong>name</strong></td><td>string</td><td>数据库表中的列名。默认情况下，列名称是从属性的名称生成的。你也可以通过指定自己的名称来更改它。</td></tr><tr><td><strong>length</strong></td><td>number</td><td>列类型的长度。例如，如果要创建 <code>varchar(150)</code> 类型，请指定列类型和长度选项。</td></tr><tr><td><strong>width</strong></td><td>number</td><td>列类型的显示范围。仅用于 MySQL 整数类型。</td></tr><tr><td><strong>onUpdate</strong></td><td>string</td><td>ON UPDATE 触发器。仅用于 MySQL。</td></tr><tr><td><strong>nullable</strong></td><td>boolean</td><td>在数据库中使列 NULL 或 NOT NULL。默认情况下，列是 <code>nullable: false</code>。</td></tr><tr><td><strong>update</strong></td><td>boolean</td><td>指示 &quot;save&quot; 操作是否更新列值。如果为 <code>false</code>，则只能在第一次插入对象时编写该值。默认值为 <code>true</code>。</td></tr><tr><td><strong>select</strong></td><td>boolean</td><td>定义在进行查询时是否默认隐藏此列。设置为 <code>false</code> 时，列数据不会显示在标准查询中。默认情况下，列是 <code>select: true</code>。</td></tr><tr><td><strong>default</strong></td><td>string</td><td>添加数据库级列的 DEFAULT 值。</td></tr><tr><td><strong>primary</strong></td><td>boolean</td><td>将列标记为主要列。</td></tr><tr><td><strong>unique</strong></td><td>boolean</td><td>将列标记为唯一列（创建唯一约束）。</td></tr><tr><td><strong>comment</strong></td><td>string</td><td>数据库列备注，并非所有数据库类型都支持。</td></tr><tr><td><strong>precision</strong></td><td>number</td><td>十进制（精确数字）列的精度（仅适用于十进制列），这是为值存储的最大位数。</td></tr><tr><td><strong>scale</strong></td><td>number</td><td>十进制（精确数字）列的比例（仅适用于十进制列），表示小数点右侧的位数，且不得大于精度。</td></tr><tr><td><strong>zerofill</strong></td><td>boolean</td><td>将 ZEROFILL 属性设置为数字列。仅在 MySQL 中使用。</td></tr><tr><td><strong>unsigned</strong></td><td>boolean</td><td>将 UNSIGNED 属性设置为数字列。仅在 MySQL 中使用。</td></tr><tr><td><strong>charset</strong></td><td>string</td><td>定义列字符集。并非所有数据库类型都支持。</td></tr><tr><td><strong>collation</strong></td><td>string</td><td>定义列排序规则。</td></tr><tr><td><strong>enum</strong></td><td><code>string[] | AnyEnum</code></td><td>在 enum 列类型中使用，以指定允许的枚举值列表。</td></tr><tr><td><strong>asExpression</strong></td><td>string</td><td>生成的列表达式。仅在 MySQL 中使用。</td></tr><tr><td><strong>generatedType</strong></td><td><code>&quot;VIRTUAL&quot; |&quot;STORED&quot;</code></td><td>生成的列类型。仅在 MySQL 中使用。</td></tr><tr><td><strong>hstoreType</strong></td><td><code>&quot;object&quot; |&quot;string&quot;</code></td><td>返回 HSTORE 列类型。以字符串或对象的形式返回值。仅在 Postgres 中使用。</td></tr><tr><td><strong>array</strong></td><td>boolean</td><td>用于可以是数组的 Postgres 列类型（例如 <code>int[]</code>）。</td></tr><tr><td><strong>transformer</strong></td><td><code>{ from(value: DatabaseType): EntityType, to(value: EntityType): DatabaseType }</code></td><td>用于将任意类型 <code>EntityType</code> 的属性编组为数据库支持的类型 <code>DatabaseType</code>。</td></tr></tbody></table><ul><li>simple-array 列类型<br> 有一种称为 simple-array 的特殊列类型，它可以将原始数组值存储在单个字符串列中。 所有值都以逗号分隔。</li><li>simple-json 列类型<br> 还有一个名为 simple-json 的特殊列类型，它可以存储任何可以通过 JSON.stringify 存储在数据库中的值。 当你的数据库中没有 json 类型而你又想存储和加载对象，该类型就很有用了。</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;simple-array&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">names</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string[];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;simple-json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nickname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string };</span></span></code></pre></div><h2 id="curd" tabindex="-1">CURD <a class="header-anchor" href="#curd" aria-label="Permalink to &quot;CURD&quot;">​</a></h2>`,24)]))}const g=i(l,[["render",e]]);export{o as __pageData,g as default};
