import{_ as e,c as s,o,ag as t}from"./chunks/framework.-ewJmwvT.js";const S=JSON.parse('{"title":"Sass","description":"","frontmatter":{},"headers":[],"relativePath":"前端技术/02 CSS/03 扩展语言/Sass/Sass.md","filePath":"前端技术/02 CSS/03 扩展语言/Sass/Sass.md"}'),r={name:"前端技术/02 CSS/03 扩展语言/Sass/Sass.md"};function l(i,a,c,d,n,h){return o(),s("div",null,a[0]||(a[0]=[t('<h1 id="sass" tabindex="-1">Sass <a class="header-anchor" href="#sass" aria-label="Permalink to &quot;Sass&quot;">​</a></h1><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p><a href="https://www.sass.hk/" target="_blank" rel="noreferrer">Sass世界上最成熟、稳定和强大的CSS扩展语言 | Sass中文网</a></p></div><p>#待补（程度：中）</p><h2 id="一、引入" tabindex="-1">一、引入 <a class="header-anchor" href="#一、引入" aria-label="Permalink to &quot;一、引入&quot;">​</a></h2><h2 id="二、嵌套规则" tabindex="-1">二、嵌套规则 <a class="header-anchor" href="#二、嵌套规则" aria-label="Permalink to &quot;二、嵌套规则&quot;">​</a></h2><ul><li>子元素样式可以直接嵌套在父元素中。</li><li>父选择器标识符 <code>&amp;</code></li></ul><h2 id="三、sassscript" tabindex="-1">三、SassScript <a class="header-anchor" href="#三、sassscript" aria-label="Permalink to &quot;三、SassScript&quot;">​</a></h2><ul><li><p>变量 <code>$</code><br> sass 使用 <code>$</code> 符号来标识变量。将局部变量转换为全局变量可以添加 <code>!global</code> 声明<br><code>$width: 5em !global;</code></p></li><li><p>插值语句 <code>#{}</code><br> 通过 <code>#{}</code> 插值语句可以在选择器或属性名中使用变量。</p></li></ul><h2 id="四、指令" tabindex="-1">四、指令 <a class="header-anchor" href="#四、指令" aria-label="Permalink to &quot;四、指令&quot;">​</a></h2><ul><li><p>跳出嵌套指令 <code>@at-root</code><br> 跳出嵌套</p></li><li><p>混合指令 <code>@mixin</code> <code>@include</code></p></li></ul>',10)]))}const u=e(r,[["render",l]]);export{S as __pageData,u as default};
