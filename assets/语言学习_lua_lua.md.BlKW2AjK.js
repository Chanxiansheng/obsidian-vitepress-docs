import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.-ewJmwvT.js";const g=JSON.parse('{"title":"lua","description":"","frontmatter":{},"headers":[],"relativePath":"语言学习/lua/lua.md","filePath":"语言学习/lua/lua.md"}'),l={name:"语言学习/lua/lua.md"};function e(h,s,p,d,k,r){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="lua" tabindex="-1">lua <a class="header-anchor" href="#lua" aria-label="Permalink to &quot;lua&quot;">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>Lua 是一门扩展式程序设计语言，被设计成支持通用过程式编程，并有相关数据描述设施。 同时对面向对象编程、函数式编程和数据驱动式编程也提供了良好的支持。 它作为一个强大、轻量的嵌入式脚本语言，可供任何需要的程序使用。 Lua 由 <em>clean C（标准 C 和 C++ 间共通的子集）</em> 实现成一个库。</p><p>作为一门扩展式语言，Lua 没有 &quot;main&quot; 程序的概念： 它只能 <em>嵌入</em> 一个宿主程序中工作， 该宿主程序被称为 <em>被嵌入程序</em> 或者简称 <em>宿主</em> 。 宿主程序可以调用函数执行一小段 Lua 代码，可以读写 Lua 变量，可以注册 C 函数让 Lua 代码调用。 依靠 C 函数，Lua 可以共享相同的语法框架来定制编程语言，从而适用不同的领域。 Lua 的官方发布版包含一个叫做 <code>lua</code> 的宿主程序示例， 它是一个利用 Lua 库实现的完整独立的 Lua 解释器，可用于交互式应用或批处理。</p><p>==Lua 具有简洁的语法和灵活的语义，被广泛应用于嵌入式系统、游戏开发、Web 应用、脚本编写等领域。==它的设计目标之一是作为扩展和嵌入式脚本语言，可以与其他编程语言无缝集成。Lua 的核心只有很小的代码库，但通过使用模块和库可以轻松地扩展其功能。</p><p>以下是一些关键特点和用途介绍：</p><ol><li>简洁高效：Lua 的语法简单清晰，语义灵活高效。它使用动态类型和自动内存管理，支持面向过程和函数式编程风格，并提供了强大的协程支持。</li><li>嵌入式脚本语言：Lua 被设计为一种可嵌入的脚本语言，可以轻松地与其他编程语言集成。它提供了 C API，允许开发者将 Lua 嵌入到 C/C++ 程序中，或者通过扩展库将 Lua 嵌入到其他应用程序中。</li><li>游戏开发：Lua 在游戏开发中广泛应用。许多游戏引擎（如 Unity 和 Corona SDK）都支持 Lua 作为脚本语言，开发者可以使用 Lua 编写游戏逻辑、场景管理和 AI 等。</li><li>脚本编写：由于其简洁性和易学性，Lua 经常被用作脚本编写语言。它可以用于编写各种系统工具、自动化任务和快速原型开发。</li><li>配置文件：Lua 的语法非常适合用作配置文件的格式。许多应用程序和框架使用 Lua 作为配置文件语言，因为它易于阅读、编写和修改。</li></ol><p>==为了增强性能和扩展性，可以将 Lua 与 Redis 和 Nginx 结合使用。这种组合可以用于构建高性能的 Web 应用程序或 API 服务。==</p><blockquote><p>Redis：<a href="./../../服务端/数据库/Redis/Redis.html">Redis</a><br> Redis 是一个快速、高效的内存数据存储系统，它支持各种数据结构，如字符串、哈希、列表、集合和有序集合。与 Lua 结合使用，可以利用 Redis 的高速缓存功能和 Lua 的灵活性来处理一些复杂的计算或数据查询。</p><ul><li>缓存数据：使用 Redis 作为缓存存储，可以将频繁访问的数据存储在 Redis 中，以减轻后端数据库的负载。Lua 可以编写与 Redis 交互的脚本，通过读取和写入 Redis 数据来提高数据访问速度。</li><li>分布式锁：通过 Redis 的原子性操作和 Lua 的脚本编写能力，可以实现分布式锁机制，用于解决并发访问和资源竞争的问题。</li></ul></blockquote><blockquote><p>Nginx：<a href="./../../服务端/Nginx/Nginx.html">Nginx</a><br> Nginx 是一个高性能的 Web 服务器和反向代理服务器。它支持使用 Lua 嵌入式模块来扩展其功能。</p><ul><li>请求处理：使用 Nginx 的 Lua 模块，可以编写 Lua 脚本来处理 HTTP 请求。这使得可以在请求到达应用程序服务器之前进行一些预处理、身份验证、请求路由等操作，从而减轻后端服务器的负载。</li><li>动态响应：通过结合 Lua 和 Nginx 的 subrequest 机制，可以实现动态生成响应。这对于根据请求参数或其他条件生成动态内容非常有用。</li><li>访问控制：使用 Lua 脚本，可以在 Nginx 层面对访问进行细粒度的控制，例如 IP 白名单、黑名单、请求频率限制等。</li></ul></blockquote><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p><a href="https://www.lua.org/" target="_blank" rel="noreferrer">The Programming Language Lua</a></p><p>下载最新二进制编译工具版本<br> 配置环境变量<br> vscode 插件： lua 高亮工具</p><h2 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-label="Permalink to &quot;基本使用&quot;">​</a></h2><blockquote><p><a href="https://wiki.luatos.com/_static/lua53doc/manual.html" target="_blank" rel="noreferrer">Lua 5.3 参考手册</a></p></blockquote><h3 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h3><p>Lua 是动态类型语言，变量不要类型定义,只需要为变量赋值。 值可以存储在变量中，作为参数传递或结果返回。</p><ol><li><code>nil</code>：<strong>表示无效值或缺失值</strong>。</li><li><code>boolean</code>：<strong>表示布尔值，可以是 <code>true</code> 或 <code>false</code></strong>。</li><li><code>number</code>：<strong>表示数字，包括整数和浮点数</strong>。</li><li><code>string</code>：<strong>表示字符串，由字符序列组成</strong>。</li><li><code>table</code>：<strong>表示表，一种关联数组，用于存储和组织数据</strong>。</li><li><code>function</code>：<strong>表示函数，用于封装可执行的代码块</strong>。</li><li><code>userdata</code>：表示用户自定义数据类型，通常与 C 语言库交互使用。</li><li><code>thread</code>：表示协程，用于实现多线程编程。</li><li><code>metatable</code>：表示元表，用于定义表的行为。</li></ol><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> --布尔值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> --就是null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> --整数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> --浮点型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;xmzs&#39; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--字符串</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h3><p>Lua 变量有三种类型：全局变量、局部变量、表中的域。</p><p>Lua 中的变量全是全局变量，哪怕是语句块或是函数里，除非用 local 显式声明为局部变量。</p><p>局部变量的作用域为从声明位置开始到所在语句块结束。</p><p>变量的默认值均为 nil。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 全局变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;小明&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 局部变量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 24</span></span></code></pre></div><h3 id="条件" tabindex="-1">条件 <a class="header-anchor" href="#条件" aria-label="Permalink to &quot;条件&quot;">​</a></h3><p>在 Lua 中，条件判断语句可以使用 <code>if</code>、<code>elseif</code> 和 <code>else</code> 关键字来实现</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 24</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;老人&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">elseif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;年轻人&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;中年人&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><h3 id="循环" tabindex="-1">循环 <a class="header-anchor" href="#循环" aria-label="Permalink to &quot;循环&quot;">​</a></h3><p>Lua 语言提供了以下几种循环处理方式：</p><table tabindex="0"><thead><tr><th>循环类型</th><th>描述</th></tr></thead><tbody><tr><td>while 循环</td><td>在条件为 true 时，让程序重复地执行某些语句。执行语句前会先检查条件是否为 true。</td></tr><tr><td>for 循环</td><td>重复执行指定语句，重复次数可在 for 语句中控制。</td></tr><tr><td>repeat ... util</td><td>重复执行循环，直到 指定的条件为真时为止</td></tr><tr><td>嵌套循环</td><td>可以在循环内嵌套一个或多个循环语句（while do ... end;for ... do ... end;repeat ... until;）</td></tr></tbody></table><p>==while 循环==</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(condition)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   statements</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>==for 循环==<br> for 语句有两大类：</p><ul><li>数值 for 循环</li><li>泛型 for 循环</li></ul><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 数值 for 循环</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- var 从 exp1 变化到 exp2，每次变化以 exp3 为步长递增 var，并执行一次 **&quot;执行体&quot;**。exp3 是可选的，如果不指定，默认为1。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">exp1,exp2,exp3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">执行体</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 泛型 for 循环</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;one&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;two&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;three&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i, v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ipairs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i, v)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>==repeat...until 循环==</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">repeat</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   statements</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">until</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( condition )</span></span></code></pre></div><p>==break 语句==<br><code>break</code><br> 退出当前循环或语句，并开始脚本执行紧接着的语句。</p><p>==goto 语句==<br><code>goto Label</code><br> Label 的格式为：<code>:: Label ::</code><br> 将程序的控制点转移到一个标签处。</p><h3 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h3><p>在 Lua 中，函数是一种可重复使用的代码块，用于执行特定的任务或操作。</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">optional_function_scope </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( argument1, argument2, argument3..., </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">argumentn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    function_body</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result_params_comma_separated</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>解析：</p><ul><li><strong>optional_function_scope:</strong> 该参数是可选的指定函数是全局函数还是局部函数，未设置该参数默认为全局函数，如果你需要设置函数为局部函数需要使用关键字 <strong>local</strong>。</li><li><strong>function_name:</strong> 指定函数名称。</li><li><strong>argument1, argument2, argument3..., argumentn:</strong> 函数参数，多个参数以逗号隔开，函数也可以不带参数。</li><li><strong>function_body:</strong> 函数体，函数中需要执行的代码语句块。</li><li><strong>result_params_comma_separated:</strong> 函数返回值，Lua 语言函数可以返回多个值，每个值以逗号隔开。</li></ul><h3 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h3><table tabindex="0"><thead><tr><th>操作符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td>A + B 输出结果 30</td></tr><tr><td>-</td><td>减法</td><td>A - B 输出结果 -10</td></tr><tr><td>*</td><td>乘法</td><td>A * B 输出结果 200</td></tr><tr><td>/</td><td>除法</td><td>B / A 输出结果 2</td></tr><tr><td>%</td><td>取余</td><td>B % A 输出结果 0</td></tr><tr><td>^</td><td>乘幂</td><td>A^2 输出结果 100</td></tr><tr><td>-</td><td>负号</td><td>-A 输出结果 -10</td></tr><tr><td>//</td><td>整除运算符 (&gt;=lua5.3)</td><td>5//2 输出结果 2</td></tr></tbody></table><table tabindex="0"><thead><tr><th>操作符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>==</td><td>等于，检测两个值是否相等，相等返回 true，否则返回 false</td><td>(A == B) 为 false。</td></tr><tr><td>~=</td><td>不等于，检测两个值是否相等，不相等返回 true，否则返回 false</td><td>(A ~= B) 为 true。</td></tr><tr><td>&gt;</td><td>大于，如果左边的值大于右边的值，返回 true，否则返回 false</td><td>(A &gt; B) 为 false。</td></tr><tr><td>&lt;</td><td>小于，如果左边的值大于右边的值，返回 false，否则返回 true</td><td>(A &lt; B) 为 true。</td></tr><tr><td>&gt;=</td><td>大于等于，如果左边的值大于等于右边的值，返回 true，否则返回 false</td><td>(A &gt;= B) 返回 false。</td></tr><tr><td>&lt;=</td><td>小于等于， 如果左边的值小于等于右边的值，返回 true，否则返回 false</td><td>(A &lt;= B) 返回 true。</td></tr></tbody></table><table tabindex="0"><thead><tr><th>操作符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>and</td><td>逻辑与操作符。 若 A 为 false，则返回 A，否则返回 B。</td><td>(A and B) 为 false。</td></tr><tr><td>or</td><td>逻辑或操作符。 若 A 为 true，则返回 A，否则返回 B。</td><td>(A or B) 为 true。</td></tr><tr><td>not</td><td>逻辑非操作符。与逻辑运算结果相反，如果条件为 true，逻辑非为 false。</td><td>not(A and B) 为 true。</td></tr></tbody></table><table tabindex="0"><thead><tr><th>操作符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>..</td><td>连接两个字符串</td><td>a..b ，其中 a 为 &quot;Hello &quot; ， b 为 &quot;World&quot;, 输出结果为 &quot;Hello World&quot;。</td></tr><tr><td>#</td><td>一元运算符，返回字符串或表的长度。</td><td>#&quot;Hello&quot; 返回 5</td></tr></tbody></table><h3 id="模块化" tabindex="-1">模块化 <a class="header-anchor" href="#模块化" aria-label="Permalink to &quot;模块化&quot;">​</a></h3><p>导出</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> M </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> M</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> M</span></span></code></pre></div><p>导入</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> math </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> math.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r)</span></span></code></pre></div>`,55)]))}const u=i(l,[["render",e]]);export{g as __pageData,u as default};
