import i from"./前端技术_02 CSS_image_grid布局对齐属性一图.excalidraw.md.CM1-D22z.js";import{_ as a,c as e,o as t,ae as l}from"./chunks/framework.CIivgcbp.js";const n="/obsidian-vitepress-docs/assets/image_OuY8x6axmP.C8DT5O0L.png",o="/obsidian-vitepress-docs/assets/1_bg2019032503_zJSf7lNi6d.BBogFwNq.png",p="/obsidian-vitepress-docs/assets/image_LURXg_rUNB.B-TNibzv.png",d="/obsidian-vitepress-docs/assets/image_X4xvy5QmhJ.BqBxq5xn.png",r="/obsidian-vitepress-docs/assets/image_FlfQuEMgWw.2so4rsYT.png",c="/obsidian-vitepress-docs/assets/image_p6_uMBX6y_.Bk4CSTV5.png",h="/obsidian-vitepress-docs/assets/image_jFID2JCCrX.CrC2WdAc.png",g="/obsidian-vitepress-docs/assets/image_fgwOsiX5ut.CdXOTbXr.png",k="/obsidian-vitepress-docs/assets/image_KSJ6a8moYW.DgB8ettr.png",u="/obsidian-vitepress-docs/assets/bg2019032516_QEPkifpzPF.XiYCtcFK.png",E="/obsidian-vitepress-docs/assets/17389592fa541366~tplv-t2oaga2asx-jj-mark_3024_0_0_.CVG12oIw.webp",C=JSON.parse('{"title":"Grid布局","description":"","frontmatter":{},"headers":[],"relativePath":"前端技术/02 CSS/02 CSS进阶/核心布局/Grid布局.md","filePath":"前端技术/02 CSS/02 CSS进阶/核心布局/Grid布局.md"}'),m={name:"前端技术/02 CSS/02 CSS进阶/核心布局/Grid布局.md"};function y(b,s,f,v,q,w){return t(),e("div",null,s[0]||(s[0]=[l('<h1 id="grid布局" tabindex="-1">Grid布局 <a class="header-anchor" href="#grid布局" aria-label="Permalink to &quot;Grid布局&quot;">​</a></h1><p><a href="https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noreferrer">https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html</a></p><h2 id="一、概述" tabindex="-1">一、概述 <a class="header-anchor" href="#一、概述" aria-label="Permalink to &quot;一、概述&quot;">​</a></h2><p>网格布局（Grid）是最强大的 CSS 布局方案。</p><p>它将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。以前，只能通过复杂的 CSS 框架达到的效果，现在浏览器内置了Grid。</p><p><img src="'+n+'" alt=""></p><p>Grid 布局与 Flex 布局有一定的相似性，都可以指定容器内部多个项目的位置。但是，它们也存在重大区别。</p><p>Flex 布局是轴线布局，只能指定&quot;项目&quot;针对轴线的位置，可以看作是<strong>一维布局</strong>。Grid 布局则是将容器划分成&quot;行&quot;和&quot;列&quot;，产生单元格，然后指定&quot;项目所在&quot;的单元格，可以看作是<strong>二维布局</strong>。Grid 布局远比 Flex 布局强大。</p><h2 id="二、基本概念" tabindex="-1">二、基本概念 <a class="header-anchor" href="#二、基本概念" aria-label="Permalink to &quot;二、基本概念&quot;">​</a></h2><ol><li><p><strong>容器和项目</strong><br> 采用网格布局的区域，称为&quot;容器&quot;（container）。容器内部采用网格定位的子元素，称为&quot;项目&quot;（item）。</p></li><li><p><strong>行和列</strong><br> 容器里面的水平区域称为&quot;行&quot;（row），垂直区域称为&quot;列&quot;（column）。</p></li><li><p><strong>单元格</strong><br> 行和列的交叉区域，称为&quot;单元格&quot;（cell）。<br> 正常情况下，<code>n</code>行和<code>m</code>列会产生<code>n x m</code>个单元格。比如，3行3列会产生9个单元格。</p></li><li><p><strong>网格线</strong><br><img src="'+o+`" alt=""></p><p>划分网格的线，称为&quot;网格线&quot;（grid line）。水平网格线划分出行，垂直网格线划分出列。<br> 正常情况下，<code>n</code>行有<code>n + 1</code>根水平网格线，<code>m</code>列有<code>m + 1</code>根垂直网格线，比如三行就有四根水平网格线。</p></li></ol><h2 id="三、容器属性" tabindex="-1">三、容器属性 <a class="header-anchor" href="#三、容器属性" aria-label="Permalink to &quot;三、容器属性&quot;">​</a></h2><p>Grid 布局的属性分成两类。一类定义在容器上面，称为容器属性；另一类定义在项目上面，称为项目属性。这部分先介绍容器属性。</p><h3 id="display-属性" tabindex="-1">display 属性 <a class="header-anchor" href="#display-属性" aria-label="Permalink to &quot;display 属性&quot;">​</a></h3><p><code>display: grid</code>，指定一个容器采用网格布局。</p><p>默认情况下，容器元素都是块级元素，但也可以设成行内元素。<code>display: inline-grid</code></p><h3 id="grid-template-columns-属性-grid-template-rows-属性" tabindex="-1">grid-template-columns 属性 grid-template-rows 属性 <a class="header-anchor" href="#grid-template-columns-属性-grid-template-rows-属性" aria-label="Permalink to &quot;grid-template-columns 属性 grid-template-rows 属性&quot;">​</a></h3><p>容器指定了网格布局以后，接着就要划分行和列。<code>grid-template-columns</code>属性定义每一列的列宽，<code>grid-template-rows</code>属性定义每一行的行高。有以下几种方式：</p><ol><li><p><strong>使用绝对单位</strong></p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 200px 200px 200px;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  grid-template-rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 100px 100px 100px;</span></span></code></pre></div></li><li><p><strong>使用百分比</strong></p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:  33.3% 33.3% 33.3%;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  grid-template-rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 33.3% 33.3% 33.3%;</span></span></code></pre></div></li><li><p><strong>使用fr关键字</strong></p><p>为了方便表示比例关系，网格布局提供了<code>fr</code>关键字（fraction 的缩写，意为&quot;片段&quot;）。如果两列的宽度分别为<code>1fr</code>和<code>2fr</code>，就表示后者是前者的两倍。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:  1fr 2fr 1fr;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  grid-template-rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 1fr 2fr;</span></span></code></pre></div><p><img src="`+p+`" alt=""><br><code>fr</code>可以与绝对长度的单位结合使用，这时会非常方便。</p></li><li><p><strong>使用repeat()</strong><br> 有时候，重复写同样的值非常麻烦，尤其网格很多时。这时，可以使用<code>repeat()</code>函数，简化重复的值。<br><code>repeat()</code>接受两个参数，第一个参数是重复的次数，第二个参数是所要重复的值。<br><code>repeat()</code>重复某种模式也是可以的。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:  repeat(3,1fr);</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  grid-template-rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: repeat(2,1fr);</span></span></code></pre></div><p><img src="`+d+'" alt=""></p></li><li><p><strong>配合auto-fill/auto-fit****关键字</strong></p><p>有时，单元格的大小是固定的，但是容器的大小不确定。如果希望每一行（或每一列）容纳尽可能多的单元格，这时可以使用<code>auto-fill</code>关键字表示自动填充。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:  repeat(</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">auto-fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, 200px);</span></span></code></pre></div><p><img src="'+r+'" alt=""></p><p>除了<code>auto-fill</code>，还有一个关键字<code>auto-fit</code>，两者的行为基本是相同的。只有当容器足够宽，可以在一行容纳所有单元格，并且单元格宽度不固定的时候，才会有行为差异：<code>auto-fill</code>会用空格子填满剩余宽度，<code>auto-fit</code>则会尽量扩大单元格的宽度。</p></li><li><p><strong>配合****minmax()</strong><br><code>minmax()</code>函数产生一个长度范围，表示长度就在这个范围之中。它接受两个参数，分别为最小值和最大值。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 1fr 1fr minmax(100px, 2fr);</span></span></code></pre></div><p>上面代码中，<code>minmax(100px, 2fr)</code>表示列宽不小于<code>100px</code>，不大于<code>2fr</code></p></li><li><p><strong>配合auto关键字</strong><br><code>auto</code>关键字表示由浏览器自己决定长度。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 100px auto 100px;</span></span></code></pre></div><p><img src="'+c+`" alt=""></p></li><li><p><strong>使用网格线名称</strong></p><p><code>grid-template-columns</code>属性和<code>grid-template-rows</code>属性里面，还可以使用方括号，指定每一根网格线的名字，方便以后的引用。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] 100px [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] 100px [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] auto [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  grid-template-rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">r1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] 100px [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">r2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] 100px [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">r3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] auto [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">r4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre></div><p>上面代码指定网格布局为3行 x 3列，因此有4根垂直网格线和4根水平网格线。方括号里面依次是这八根线的名字。</p><p>网格布局允许同一根线有多个名字，比如<code>[fifth-line row-5]</code></p></li></ol><h3 id="gap-属性row-gap-属性column-gap-属性" tabindex="-1">gap 属性row-gap 属性column-gap 属性 <a class="header-anchor" href="#gap-属性row-gap-属性column-gap-属性" aria-label="Permalink to &quot;gap 属性row-gap 属性column-gap 属性&quot;">​</a></h3><p><code>row-gap</code>属性设置行与行的间隔（行间距），<code>column-gap</code>属性设置列与列的间隔（列间距）。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  grid-gap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 20px 10px;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 等效 */</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  grid-row-gap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 20px;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  grid-column-gap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 10px;</span></span></code></pre></div><p><code>grid-gap</code>属性是<code>grid-row-gap</code>和<code>grid-column-gap</code>的合并简写形式，当取一个值时，两者均生效。</p><p><code>grid-gap: &lt;grid-row-gap&gt; &lt;grid-column-gap&gt;;</code></p><p><img src="`+h+`" alt=""></p><h3 id="grid-template-areas-属性" tabindex="-1">grid-template-areas 属性 <a class="header-anchor" href="#grid-template-areas-属性" aria-label="Permalink to &quot;grid-template-areas 属性&quot;">​</a></h3><p>网格布局允许指定&quot;区域&quot;（area），一个区域由单个或多个单元格组成。<code>grid-template-areas</code>属性用于定义区域。</p><p>需要搭配项目属性<code>grid-areas</code>使用，<code>grid-areas</code>用于指定项目的名称。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 已定义各个项目grid-areas*/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  grid-template-areas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &quot;one one one&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &quot;two three four&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &quot;five . six&quot;;</span></span></code></pre></div><p><img src="`+g+'" alt=""></p><p>如果某些区域不需要利用，则使用&quot;点&quot;（<code>.</code>）表示。</p><blockquote><p>📌注意，区域的命名会影响到网格线。每个区域的起始网格线，会自动命名为<code>区域名-start</code>，终止网格线自动命名为<code>区域名-end</code>。</p><p>比如，区域名为<code>header</code>，则起始位置的水平网格线和垂直网格线叫做<code>header-start</code>，终止位置的水平网格线和垂直网格线叫做<code>header-end</code>。</p></blockquote><h3 id="grid-auto-flow-属性" tabindex="-1">grid-auto-flow 属性 <a class="header-anchor" href="#grid-auto-flow-属性" aria-label="Permalink to &quot;grid-auto-flow 属性&quot;">​</a></h3><p>划分网格以后，容器的子元素会按照顺序，自动放置在每一个网格。默认的放置顺序是&quot;先行后列&quot;，即先填满第一行，再开始放入第二行，即下图数字的顺序。</p><p>这个顺序由<code>grid-auto-flow</code>属性决定，默认值是<code>row</code>，即&quot;先行后列&quot;。也可以将它设成<code>column</code>，变成&quot;先列后行&quot;。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  grid-auto-flow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: column;</span></span></code></pre></div><p><img src="'+k+`" alt=""></p><p><code>grid-auto-flow</code>属性除了设置成<code>row</code>和<code>column</code>，还可以设成<code>row dense</code>和<code>column dense</code>。这两个值主要用于，某些项目指定位置以后，剩下的项目怎么自动放置。</p><h3 id="justify-items-属性align-items-属性place-items-属性" tabindex="-1">justify-items 属性align-items 属性place-items 属性 <a class="header-anchor" href="#justify-items-属性align-items-属性place-items-属性" aria-label="Permalink to &quot;justify-items 属性align-items 属性place-items 属性&quot;">​</a></h3><p><code>justify-items</code>属性设置单元格内容的水平位置（左中右），<code>align-items</code>属性设置单元格内容的垂直位置（上中下）。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  justify-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: start | end | </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | stretch;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  align-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: start | end | </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | stretch;</span></span></code></pre></div><p>这两个属性的写法完全相同，都可以取下面这些值。</p><ul><li>start：对齐单元格的起始边缘。</li><li>end：对齐单元格的结束边缘。</li><li>center：单元格内部居中。</li><li>stretch：拉伸，占满单元格的整个宽度**（默认值）**。</li></ul><p><img src="`+u+'" alt=""></p><p>上图为<code>justify-items: start</code></p><p><code>place-items</code>属性是<code>align-items</code>属性和<code>justify-items</code>属性的合并简写形式。</p><p><code>place-items: &lt;align-items&gt; &lt;justify-items&gt;;</code></p><p><img src="'+i+`" alt="1200"></p><h3 id="justify-content-属性align-content-属性place-content-属性" tabindex="-1">justify-content 属性align-content 属性place-content 属性 <a class="header-anchor" href="#justify-content-属性align-content-属性place-content-属性" aria-label="Permalink to &quot;justify-content 属性align-content 属性place-content 属性&quot;">​</a></h3><p><code>justify-content</code>属性是整个内容区域在容器里面的水平位置（左中右），<code>align-content</code>属性是整个内容区域的垂直位置（上中下）。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: start | end | </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | stretch | </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">space-around</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">space-between</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">space-evenly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">align-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: start | end | </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | stretch | </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">space-around</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">space-between</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">space-evenly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>这两个属性的写法完全相同，都可以取下面这些值。</p><ul><li>start - 对齐容器的起始边框。</li><li>end - 对齐容器的结束边框。</li><li>center - 容器内部居中。</li><li>stretch - 项目大小没有指定时，拉伸占据整个网格容器。</li><li>space-around - 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍。</li><li>space-between - 项目与项目的间隔相等，项目与容器边框之间没有间隔。</li><li>space-evenly - 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔。</li></ul><p><code>place-content</code>属性是<code>align-content</code>属性和<code>justify-content</code>属性的合并简写形式。</p><p><code>place-content: &lt;align-content&gt; &lt;justify-content&gt;</code></p><h3 id="grid-auto-columns-属性grid-auto-rows-属性" tabindex="-1">grid-auto-columns 属性grid-auto-rows 属性 <a class="header-anchor" href="#grid-auto-columns-属性grid-auto-rows-属性" aria-label="Permalink to &quot;grid-auto-columns 属性grid-auto-rows 属性&quot;">​</a></h3><p>有时候，一些项目的指定位置，在现有网格的外部。比如网格只有3列，但是某一个项目指定在第5行。这时，浏览器会自动生成多余的网格，以便放置项目。</p><p><code>grid-auto-columns</code>属性和<code>grid-auto-rows</code>属性用来设置，浏览器自动创建的多余网格的列宽和行高。它们的写法与<code>grid-template-columns</code>和<code>grid-template-rows</code>完全相同。如果不指定这两个属性，浏览器完全根据单元格内容的大小，决定新增网格的列宽和行高。</p><h3 id="grid-template-属性grid-属性" tabindex="-1">grid-template 属性grid 属性 <a class="header-anchor" href="#grid-template-属性grid-属性" aria-label="Permalink to &quot;grid-template 属性grid 属性&quot;">​</a></h3><p><code>grid-template</code>属性是<code>grid-template-columns</code>、<code>grid-template-rows</code>和<code>grid-template-areas</code>这三个属性的合并简写形式。</p><p><code>grid</code>属性是<code>grid-template-rows</code>、<code>grid-template-columns</code>、<code>grid-template-areas</code>、 <code>grid-auto-rows</code>、<code>grid-auto-columns</code>、<code>grid-auto-flow</code>这六个属性的合并简写形式。</p><p>从易读易写的角度考虑，还是建议不要合并属性，所以这里就不详细介绍这两个属性了。</p><h2 id="四、项目属性" tabindex="-1">四、项目属性 <a class="header-anchor" href="#四、项目属性" aria-label="Permalink to &quot;四、项目属性&quot;">​</a></h2><h3 id="grid-column-start-属性grid-column-end-属性grid-row-start-属性grid-row-end-属性" tabindex="-1">grid-column-start 属性grid-column-end 属性grid-row-start 属性grid-row-end 属性 <a class="header-anchor" href="#grid-column-start-属性grid-column-end-属性grid-row-start-属性grid-row-end-属性" aria-label="Permalink to &quot;grid-column-start 属性grid-column-end 属性grid-row-start 属性grid-row-end 属性&quot;">​</a></h3><p>项目的位置是可以指定的，具体方法就是指定项目的四个边框，分别定位在哪根网格线。</p><ul><li><code>grid-column-start</code>属性：左边框所在的垂直网格线</li><li><code>grid-column-end</code>属性：右边框所在的垂直网格线</li><li><code>grid-row-start</code>属性：上边框所在的水平网格线</li><li><code>grid-row-end</code>属性：下边框所在的水平网格线</li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  grid-column-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 1;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  grid-column-end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 2; </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  grid-row-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:1;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  grid-row-end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:2;</span></span></code></pre></div><p>这四个属性的值，除了指定为第几个网格线，还可以指定为网格线的名字，需要配合自动定义网格的相关属性如<code>grid-area</code>、<code>grid-template-column</code>(使用网格分割)。</p><p>使用这四个属性，如果产生了项目的重叠，则使用<code>z-index</code>属性指定项目的重叠顺序。</p><h3 id="grid-column-属性-grid-row-属性" tabindex="-1">grid-column 属性， grid-row 属性 <a class="header-anchor" href="#grid-column-属性-grid-row-属性" aria-label="Permalink to &quot;grid-column 属性，  grid-row 属性&quot;">​</a></h3><p><code>grid-column</code>属性是<code>grid-column-start</code>和<code>grid-column-end</code>的合并简写形式，<code>grid-row</code>属性是<code>grid-row-start</code>属性和<code>grid-row-end</code>的合并简写形式。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  grid-column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 1 / 2;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  grid-row</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 1 / 2;</span></span></code></pre></div><h3 id="grid-area-属性" tabindex="-1">grid-area 属性 <a class="header-anchor" href="#grid-area-属性" aria-label="Permalink to &quot;grid-area 属性&quot;">​</a></h3><p><code>grid-area</code>属性指定项目放在哪一个区域。</p><p><code>grid-area</code>属性还可用作<code>grid-row-start</code>、<code>grid-column-start</code>、<code>grid-row-end</code>、<code>grid-column-end</code>的合并简写形式，直接指定项目的位置。</p><h3 id="justify-self-属性align-self-属性place-self-属性" tabindex="-1">justify-self 属性align-self 属性place-self 属性 <a class="header-anchor" href="#justify-self-属性align-self-属性place-self-属性" aria-label="Permalink to &quot;justify-self 属性align-self 属性place-self 属性&quot;">​</a></h3><p><code>justify-self</code>属性设置单元格内容的水平位置（左中右），跟<code>justify-items</code>属性的用法完全一致，但只作用于单个项目。</p><p><code>align-self</code>属性设置单元格内容的垂直位置（上中下），跟<code>align-items</code>属性的用法完全一致，也是只作用于单个项目。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">justify-self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: start | end | </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | stretch;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">align-self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: start | end | </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | stretch;</span></span></code></pre></div><ul><li>start：对齐单元格的起始边缘。</li><li>end：对齐单元格的结束边缘。</li><li>center：单元格内部居中。</li><li>stretch：拉伸，占满单元格的整个宽度（默认值）。</li></ul><p><code>place-self</code>属性是<code>align-self</code>属性和<code>justify-self</code>属性的合并简写形式。</p><p><code>place-self: &lt;align-self&gt; &lt;justify-self&gt;;</code></p><h2 id="五、兼容性" tabindex="-1">五、兼容性 <a class="header-anchor" href="#五、兼容性" aria-label="Permalink to &quot;五、兼容性&quot;">​</a></h2><p>在 caniuse 中，我们可以看到的结果如下，总体兼容性还不错，但在 IE 10 以下不支持。个人建议在公司的内部系统运用起来是没有问题的，但 TOC 的话，可能目前还是不太合适。</p><p><img src="`+E+'" alt=""></p>',84)]))}const D=a(m,[["render",y]]);export{C as __pageData,D as default};
