import{_ as i,c as a,o as n,ae as l}from"./chunks/framework.CIivgcbp.js";const h="/obsidian-vitepress-docs/assets/06%20%E7%AC%AC%E4%B8%80%E4%B8%AAwebgl%E7%A8%8B%E5%BA%8F-1.WhPe_Nwb.png",o=JSON.parse('{"title":"07 第一个 webgl 程序","description":"","frontmatter":{},"headers":[],"relativePath":"前端技术/03 JavaScript/07浏览器交互/WebGL入门/07 第一个webgl程序.md","filePath":"前端技术/03 JavaScript/07浏览器交互/WebGL入门/07 第一个webgl程序.md"}'),t={name:"前端技术/03 JavaScript/07浏览器交互/WebGL入门/07 第一个webgl程序.md"};function e(p,s,k,r,d,E){return n(),a("div",null,s[0]||(s[0]=[l('<h1 id="_07-第一个-webgl-程序" tabindex="-1">07 第一个 webgl 程序 <a class="header-anchor" href="#_07-第一个-webgl-程序" aria-label="Permalink to &quot;07 第一个 webgl 程序&quot;">​</a></h1><p>通过一个简单 WebGL 程序在 web 页面上绘图，开始学习 webGL 的相关 API 方法。​</p><p>在页面上用 webgl 绘制一个三角形，如下​<br><img src="'+h+`" alt=""></p><h2 id="第一步获取画布-创建三维上下文对象" tabindex="-1">第一步获取画布，创建三维上下文对象 <a class="header-anchor" href="#第一步获取画布-创建三维上下文对象" aria-label="Permalink to &quot;第一步获取画布，创建三维上下文对象&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> canvas</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.glcanvas&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> gl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> canvas.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;webgl&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>​</p><h2 id="第二步创建顶点并且将顶点数据存储到当前绑定的-webgl-缓冲区" tabindex="-1">第二步创建顶点并且将顶点数据存储到当前绑定的 WebGL 缓冲区 <a class="header-anchor" href="#第二步创建顶点并且将顶点数据存储到当前绑定的-webgl-缓冲区" aria-label="Permalink to &quot;第二步创建顶点并且将顶点数据存储到当前绑定的 WebGL 缓冲区&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vertices</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Float32Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([​</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,​</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建顶点缓冲区，可用于存储顶点数据或着色数据​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> buffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 把buffer绑定到WebGL的\`ARRAY_BUFFER\`目标上，接下来的操作将会作用在这个缓冲区上​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bindBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ARRAY_BUFFER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, buffer);​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 WebGL 的 bufferData() 方法将顶点数据 vertices 存储到当前绑定的缓冲区中。​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bufferData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ARRAY_BUFFER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, vertices, gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">STATIC_DRAW</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="第三步定义顶点着色器和片元着色器" tabindex="-1">第三步定义顶点着色器和片元着色器 <a class="header-anchor" href="#第三步定义顶点着色器和片元着色器" aria-label="Permalink to &quot;第三步定义顶点着色器和片元着色器&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义顶点着色器​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vertexShaderSource</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`​</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	attribute vec2 position;​</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	void main() {​</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	gl_Position = vec4(position, 0.0, 1.0);​</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	}​</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义片元着色器​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fragmentShaderSource</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`​</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	void main() {​</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);​</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	}	</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">​\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li><p><code>attribute vec2 position;</code>：声明了一个名为 position 的顶点属性，它是一个二维向量。​</p></li><li><p><code>void main() { ... }</code>：顶点着色器的主函数，计算每个顶点的最终位置。​</p></li><li><p><code>gl_Position = vec4(position, 0.0, 1.0);</code>：将顶点属性 position 赋值给 gl_Position，这是一个四维向量，表示顶点的最终位置。vec4(position, 0.0, 1.0) 表示在二维空间中，顶点的 z 值为 0.0，w 值为 1.0。​</p></li><li><p><code>gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);</code>：将片元的颜色设置为红色，使用 vec4 表示颜色，RGBA 分别为 (1.0, 0.0, 0.0, 1.0)。</p></li></ul><h2 id="第四步创建和编译顶点着色器" tabindex="-1">第四步创建和编译顶点着色器 <a class="header-anchor" href="#第四步创建和编译顶点着色器" aria-label="Permalink to &quot;第四步创建和编译顶点着色器&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建一个WebGLShader着色器对象，顶点着色器​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vertexShader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createShader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VERTEX_SHADER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shaderSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vertexShader, vertexShaderSource);​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compileShader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vertexShader);</span></span></code></pre></div><h2 id="第五步创建和编译片元着色器" tabindex="-1">第五步创建和编译片元着色器 <a class="header-anchor" href="#第五步创建和编译片元着色器" aria-label="Permalink to &quot;第五步创建和编译片元着色器&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建一个WebGLShader着色器对象，片元着色器​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fragmentShader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createShader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FRAGMENT_SHADER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shaderSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fragmentShader, fragmentShaderSource);​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compileShader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fragmentShader);</span></span></code></pre></div><ul><li><p><code>gl.createShader(gl.FRAGMENT_SHADER);</code>：创建一个片元着色器对象。​</p></li><li><p><code>gl.shaderSource(fragmentShader, fragmentShaderSource);</code>：将片元着色器源码绑定到片元着色器对象。​</p></li><li><p><code>gl.compileShader(fragmentShader);</code>：编译片元着色器。</p></li></ul><h2 id="第六步创建着色器程序对象" tabindex="-1">第六步创建着色器程序对象 <a class="header-anchor" href="#第六步创建着色器程序对象" aria-label="Permalink to &quot;第六步创建着色器程序对象&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> program</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createProgram</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attachShader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(program, vertexShader);​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attachShader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(program, fragmentShader);​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">linkProgram</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(program);​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useProgram</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(program);</span></span></code></pre></div><ul><li><p><code>gl.createProgram();</code>：创建一个着色器程序对象。​</p></li><li><p><code>gl.attachShader(program, vertexShader);</code>：将顶点着色器附加到着色器程序对象。​</p></li><li><p><code>gl.attachShader(program, fragmentShader);</code>：将片元着色器附加到着色器程序对象。​</p></li><li><p><code>gl.linkProgram(program);</code>：链接着色器程序对象，将顶点着色器和片元着色器链接成一个完整的可执行程序。​</p></li><li><p><code>gl.useProgram(program);</code>：告诉 WebGL 使用这个着色器程序对象作为当前的渲染程序。</p></li></ul><h2 id="第七步设置顶点属性" tabindex="-1">第七步设置顶点属性 <a class="header-anchor" href="#第七步设置顶点属性" aria-label="Permalink to &quot;第七步设置顶点属性&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> positionLocation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAttribLocation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(program, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;position&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">enableVertexAttribArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(positionLocation);​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vertexAttribPointer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(positionLocation, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FLOAT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ul><li><p><code>gl.getAttribLocation(program, &#39;position&#39;);</code>：获取顶点属性 position 在着色器程序中的位置。​</p></li><li><p><code>gl.enableVertexAttribArray(positionLocation);</code>：启用顶点属性数组。​</p></li><li><p><code>gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);</code>：指定如何解析顶点数据数组。​</p><ul><li><code>positionLocation</code>：顶点属性 position 的位置。​</li><li><code>2</code>：每个顶点属性的元素数量（这里是二维向量，即两个元素）。​</li><li><code>gl.FLOAT</code>：数据类型为浮点型。​</li><li><code>false</code>：是否数据应该被标准化（不标准化）。​</li><li><code>0, 0</code>：跨度和偏移量，指定在缓冲区中获取数据的方式。</li></ul></li></ul><h2 id="第八步清空画布和绘制" tabindex="-1">第八步清空画布和绘制 <a class="header-anchor" href="#第八步清空画布和绘制" aria-label="Permalink to &quot;第八步清空画布和绘制&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clearColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">COLOR_BUFFER_BIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);​</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">drawArrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TRIANGLES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ul><li><p><code>gl.clearColor(0.0, 0.0, 0.0, 1.0);</code>：设置清空颜色为黑色。​</p></li><li><p><code>gl.clear(gl.COLOR_BUFFER_BIT);</code>：清空颜色缓冲区，使用上一步设置的清空颜色。​</p></li><li><p><code>gl.drawArrays(gl.TRIANGLES, 0, 3);</code>：使用顶点数组绘制三角形。​</p><ul><li><code>gl.TRIANGLES</code>：指定绘制图元的类型为三角形。​</li><li><code>0</code>：从顶点数组的第一个顶点开始绘制。​</li><li><code>3</code>：绘制三个顶点，组成一个三角形。</li></ul></li></ul>`,25)]))}const c=i(t,[["render",e]]);export{o as __pageData,c as default};
