import{_ as i,c as a,o as t,ae as l}from"./chunks/framework.CIivgcbp.js";const c=JSON.parse('{"title":"Tailwind CSS","description":"","frontmatter":{},"headers":[],"relativePath":"前端技术/07 Vue/Vue3/33 Tailwind CSS.md","filePath":"前端技术/07 Vue/Vue3/33 Tailwind CSS.md"}'),n={name:"前端技术/07 Vue/Vue3/33 Tailwind CSS.md"};function e(p,s,h,r,d,k){return t(),a("div",null,s[0]||(s[0]=[l(`<h1 id="tailwind-css" tabindex="-1">Tailwind CSS <a class="header-anchor" href="#tailwind-css" aria-label="Permalink to &quot;Tailwind CSS&quot;">​</a></h1><h2 id="postcss" tabindex="-1">PostCSS <a class="header-anchor" href="#postcss" aria-label="Permalink to &quot;PostCSS&quot;">​</a></h2><blockquote><p><strong>PostCSS</strong><br> PostCSS 是一款强大的 CSS 处理器，它允许开发者使用现代 CSS 语法、自定义插件以及预处理器的功能，同时保持输出 CSS 向后兼容。</p></blockquote><ul><li><p>PostCSS 功能介绍：</p><ol><li>增强代码的可读性 （利用从 Can I Use 网站获取的数据为 CSS 规则添加特定厂商的前缀。 Autoprefixer 自动获取浏览器的流行度和能够支持的属性，并根据这些数据帮你自动为 CSS 规则添加前缀。）</li><li>将未来的 CSS 特性带到今天！（PostCSS Preset Env 帮你将最新的 CSS 语法转换成大多数浏览器都能理解的语法，并根据你的目标浏览器或运行时环境来确定你需要的 polyfills，此功能基于 cssdb 实现。）</li><li>终结全局 CSS（CSS 模块 能让你你永远不用担心命名太大众化而造成冲突，只要用最有意义的名字就行了。）</li><li>避免 CSS 代码中的错误（通过使用 stylelint 强化一致性约束并避免样式表中的错误。stylelint 是一个现代化 CSS 代码检查工具。它支持最新的 CSS 语法，也包括类似 CSS 的语法，例如 SCSS 。）</li></ol></li><li><p>PostCSS 处理 TailWind CSS 的大致流程：</p><ol><li>将 CSS 解析成抽象语法树 (AST 树)</li><li>读取插件配置，根据配置文件，生成新的抽象语法树</li><li>将 AST 树”传递”给一系列数据转换操作处理（变量数据循环生成，切套类名循环等）</li><li>清除一系列操作留下的数据痕迹</li><li>将处理完毕的 AST 树重新转换成字符串</li></ol></li></ul><h2 id="tailwind-css-1" tabindex="-1">Tailwind CSS <a class="header-anchor" href="#tailwind-css-1" aria-label="Permalink to &quot;Tailwind CSS&quot;">​</a></h2><blockquote><p><strong>Tailwind CSS</strong><br> 是一个由 js 编写的 CSS 框架 他是基于 postCSS 去解析的。<br> 官网：<a href="https://www.tailwindcss.cn/" target="_blank" rel="noreferrer">tailwindcss</a><br> Tailwind 不提供预定义的组件，而是专注于提供一组小而灵活的<strong>原子类</strong>。开发者可以根据需要组合这些原子类，构建出符合设计规范的界面。</p></blockquote><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p>对于 PostCSS 的插件使用，我们再使用的过程中一般都需要如下步骤：</p><ul><li>PostCSS 配置文件 <code>postcss.config.js</code>，新增 tailwindcss 插件。</li><li>TaiWindCSS 插件需要一份配置文件，<code>tailwind.config.js</code></li></ul><ol><li><p>初始化项目<br><code>npm init vue@latest</code></p></li><li><p>安装 Tailwind 以及其它依赖项<br><code>npm install -D tailwindcss@latest postcss@latest autoprefixer@latest</code></p></li><li><p>生成配置文件<br><code>npx tailwindcss init -p</code></p></li><li><p>修改配置文件 <code>tailwind.config.js</code></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Version2.6</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  purge: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./index.html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./src/**/*.{vue,js,ts,jsx,tsx}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  theme: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    extend: {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Version3.0</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  content: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./index.html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./src/**/*.{vue,js,ts,jsx,tsx}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  theme: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    extend: {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>创建一个 index.css</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@tailwind base;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@tailwind components;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@tailwind utilities;</span></span></code></pre></div></li><li><p>在 main.ts 中引入<br><code>import &#39;./index.css&#39;</code></p></li></ol><h2 id="使用示例" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例" aria-label="Permalink to &quot;使用示例&quot;">​</a></h2><ul><li>基础属性<br> 以 Text Colorw 为例:</li></ul><table tabindex="0"><thead><tr><th>Class</th><th>Properties</th></tr></thead><tbody><tr><td>text-inherit</td><td>color: inherit;</td></tr><tr><td>text-current</td><td>color: currentColor;</td></tr><tr><td>text-transparent</td><td>color: transparent;</td></tr><tr><td>text-black</td><td>color: rgb(0 0 0);</td></tr><tr><td>text-white</td><td>color: rgb(255 255 255);</td></tr></tbody></table><p>text-black 的类名就代表了文本黑颜色</p><ul><li>伪类伪元素选择器<br> 直接使用 <code>hover:属性</code></li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bg-sky-500 hover:bg-sky-700 ...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; Save changes &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li>其他使用见官网 <a href="https://www.tailwindcss.cn/" target="_blank" rel="noreferrer">tailwindcss</a></li></ul>`,17)]))}const E=i(n,[["render",e]]);export{c as __pageData,E as default};
