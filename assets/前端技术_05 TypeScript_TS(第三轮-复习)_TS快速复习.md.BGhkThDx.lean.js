import{_ as p,C as h,c as e,o as r,ag as k,j as i,a,G as l,w as t}from"./chunks/framework.-ewJmwvT.js";const c=JSON.parse('{"title":"TS 快速复习","description":"","frontmatter":{},"headers":[],"relativePath":"前端技术/05 TypeScript/TS(第三轮-复习)/TS快速复习.md","filePath":"前端技术/05 TypeScript/TS(第三轮-复习)/TS快速复习.md"}'),d={name:"前端技术/05 TypeScript/TS(第三轮-复习)/TS快速复习.md"},E={tabindex:"0"};function g(y,s,o,F,u,C){const n=h("font");return r(),e("div",null,[s[65]||(s[65]=k("",18)),i("p",null,[s[1]||(s[1]=i("code",null,"any",-1)),s[2]||(s[2]=a(" 的含义是任意类型，一旦将类型定义为 any，TS 对此的类型检查将")),l(n,{color:"#ff0000"},{default:t(()=>s[0]||(s[0]=[a("完全失效")])),_:1,__:[0]}),s[3]||(s[3]=a("。"))]),s[66]||(s[66]=k("",3)),i("p",null,[s[6]||(s[6]=i("code",null,"unknown",-1)),s[7]||(s[7]=a(" 的含义是未知类型，可以理解成一个类型安全的 any，适用于数据不确定的变量。")),s[8]||(s[8]=i("br",null,null,-1)),s[9]||(s[9]=a(" unknown 会强制开发者在使用前进行类型检查，从而提供更强的类型安全性。因此当它进行")),l(n,{color:"#ff0000"},{default:t(()=>s[4]||(s[4]=[a("类型传递")])),_:1,__:[4]}),s[10]||(s[10]=a("和")),l(n,{color:"#ff0000"},{default:t(()=>s[5]||(s[5]=[a("数据读取")])),_:1,__:[5]}),s[11]||(s[11]=a("时，通常需要使用两种方法进行验证。一是类型判断，二是类型断言。"))]),s[67]||(s[67]=k("",14)),i("p",null,[s[13]||(s[13]=a("无论大小写，")),l(n,{color:"#ff0000"},{default:t(()=>s[12]||(s[12]=[a("开发中都很少使用")])),_:1,__:[12]}),s[14]||(s[14]=a("，通常进一步指定具体的对象，例如 Array、Symbol 或者自定义声明对象类型。"))]),s[68]||(s[68]=k("",8)),i("ul",null,[i("li",null,[s[17]||(s[17]=a("数字枚举")),s[18]||(s[18]=i("br",null,null,-1)),s[19]||(s[19]=a(" 数字枚举是一种最常见得枚举类型，其成员得值会")),l(n,{color:"#ff0000"},{default:t(()=>s[15]||(s[15]=[a("自动递增")])),_:1,__:[15]}),s[20]||(s[20]=a("，且数字枚举还具备")),l(n,{color:"#ff0000"},{default:t(()=>s[16]||(s[16]=[a("反向映射")])),_:1,__:[16]}),s[21]||(s[21]=a("的特点。"))]),s[22]||(s[22]=i("li",null,[a("字符串枚举"),i("br"),a(" 枚举成员的值都是字符串，但会失去了反向映射的特性。")],-1))]),s[69]||(s[69]=k("",10)),i("table",E,[s[39]||(s[39]=i("thead",null,[i("tr",null,[i("th",null,"修饰符"),i("th",null,"含义"),i("th",null,"具体规则")])],-1)),i("tbody",null,[i("tr",null,[s[26]||(s[26]=i("td",null,"public",-1)),s[27]||(s[27]=i("td",null,"公开的",-1)),i("td",null,[s[24]||(s[24]=a("可以被：")),l(n,{color:"#ff0000"},{default:t(()=>s[23]||(s[23]=[a("类内部、子类、类外部")])),_:1,__:[23]}),s[25]||(s[25]=a("访问"))])]),i("tr",null,[s[31]||(s[31]=i("td",null,"protected",-1)),s[32]||(s[32]=i("td",null,"受保护的",-1)),i("td",null,[s[29]||(s[29]=a("可以被：")),l(n,{color:"#ff0000"},{default:t(()=>s[28]||(s[28]=[a("类内部、子类")])),_:1,__:[28]}),s[30]||(s[30]=a("访问"))])]),i("tr",null,[s[36]||(s[36]=i("td",null,"private",-1)),s[37]||(s[37]=i("td",null,"私有的",-1)),i("td",null,[s[34]||(s[34]=a("可以被：")),l(n,{color:"#ff0000"},{default:t(()=>s[33]||(s[33]=[a("类内部")])),_:1,__:[33]}),s[35]||(s[35]=a("访问"))])]),s[38]||(s[38]=i("tr",null,[i("td",null,"readonly"),i("td",null,"只读属性"),i("td",null,"属性无法修改")],-1))])]),s[70]||(s[70]=k("",2)),i("ul",null,[i("li",null,[s[44]||(s[44]=a("抽象类")),s[45]||(s[45]=i("br",null,null,-1)),s[46]||(s[46]=a(" ==抽象类是一种无法被实例化的类==，专门用来定义类的")),l(n,{color:"#ff0000"},{default:t(()=>s[40]||(s[40]=[a("结构和行为")])),_:1,__:[40]}),s[47]||(s[47]=a("，类中可以写")),l(n,{color:"#ff0000"},{default:t(()=>s[41]||(s[41]=[a("抽象方法")])),_:1,__:[41]}),s[48]||(s[48]=a("，也可以写")),l(n,{color:"#ff0000"},{default:t(()=>s[42]||(s[42]=[a("具体实现")])),_:1,__:[42]}),s[49]||(s[49]=a("。抽象类主要用来为其派生类提供一个")),l(n,{color:"#ff0000"},{default:t(()=>s[43]||(s[43]=[a("基础结构")])),_:1,__:[43]}),s[50]||(s[50]=a("，要求其派生类必须实现其中的抽象方法。")),s[51]||(s[51]=i("br",null,null,-1)),s[52]||(s[52]=a(" 简记：抽象类不能实例化，其意义是可以被继承，抽象类里可以有普通方法、也可以有抽象方法。")),s[53]||(s[53]=i("br",null,null,-1)),s[54]||(s[54]=a(" 使用 ")),s[55]||(s[55]=i("code",null,"abstract",-1)),s[56]||(s[56]=a(" 关键字声明"))])]),s[71]||(s[71]=k("",1)),i("p",null,[s[59]||(s[59]=a("抽象类可以包含")),l(n,{color:"#ff0000"},{default:t(()=>s[57]||(s[57]=[a("抽象方法")])),_:1,__:[57]}),s[60]||(s[60]=a("和")),l(n,{color:"#ff0000"},{default:t(()=>s[58]||(s[58]=[a("具体方法")])),_:1,__:[58]})]),s[72]||(s[72]=i("ul",null,[i("li",null,[a("==何时使用抽象类？== "),i("ol",null,[i("li",null,"定义通用接口：为一组相关的类定义通用的行为（方法或属性）时。"),i("li",null,"提供基础实现：在抽象类中提供某些方法或为其提供基础实现，这样派生类就可以继承这些实现。"),i("li",null,"确保关键实现：强制派生类实现一些关键行为。"),i("li",null,"共享代码和逻辑：当多个类需要共享部分代码时，抽象类可以避免代码重复。")])])],-1)),s[73]||(s[73]=i("h3",{id:"_10-interface-接口",tabindex:"-1"},[a("10.interface(接口) "),i("a",{class:"header-anchor",href:"#_10-interface-接口","aria-label":'Permalink to "10.interface(接口)"'},"​")],-1)),i("p",null,[s[62]||(s[62]=i("code",null,"interface",-1)),s[63]||(s[63]=a(" 是一种定义结构的方式，主要作用是为：类、对象、函数等规定一种契约，这样可以确保代码的一致性和类型安全，但要注意 ")),s[64]||(s[64]=i("code",null,"interface",-1)),l(n,{color:"#ff0000"},{default:t(()=>s[61]||(s[61]=[a("只能定义格式，不能包含任何实现！")])),_:1,__:[61]})]),s[74]||(s[74]=k("",11))])}const b=p(d,[["render",g]]);export{c as __pageData,b as default};
