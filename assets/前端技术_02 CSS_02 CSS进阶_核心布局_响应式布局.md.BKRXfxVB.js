import{_ as i,c as a,o as t,ae as n}from"./chunks/framework.CIivgcbp.js";const l="/obsidian-vitepress-docs/assets/15fec33003371f62~tplv-t2oaga2asx-jj-mark_3024_0_0_0_q75.CkbErY-5.webp",h="/obsidian-vitepress-docs/assets/169fa8fc4e71232e~tplv-t2oaga2asx-jj-mark_3024_0_0_0_q75.DPI9JctJ.webp",c=JSON.parse('{"title":"响应式布局","description":"","frontmatter":{},"headers":[],"relativePath":"前端技术/02 CSS/02 CSS进阶/核心布局/响应式布局.md","filePath":"前端技术/02 CSS/02 CSS进阶/核心布局/响应式布局.md"}'),p={name:"前端技术/02 CSS/02 CSS进阶/核心布局/响应式布局.md"};function e(k,s,r,d,o,E){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="响应式布局" tabindex="-1">响应式布局 <a class="header-anchor" href="#响应式布局" aria-label="Permalink to &quot;响应式布局&quot;">​</a></h1><h2 id="一、引言" tabindex="-1">一、引言 <a class="header-anchor" href="#一、引言" aria-label="Permalink to &quot;一、引言&quot;">​</a></h2><p>响应式布局指的是同一页面在不同屏幕尺寸下有不同的布局。传统的开发方式是 PC 端开发一套，手机端再开发一套，而使用响应式布局只要开发一套就够，缺点就是 CSS 比较重。</p><blockquote><p><strong>响应式设计与自适应设计的区别：</strong><br> 响应式开发一套界面，通过检测视口分辨率，针对不同客户端在客户端做代码处理，来展现不同的布局和内容；<br> 自适应需要开发多套界面，通过检测视口分辨率，来判断当前访问的设备是 pc 端、平板、手机，从而请求服务层，返回不同的页面。</p></blockquote><h2 id="二、媒体查询" tabindex="-1">二、媒体查询 <a class="header-anchor" href="#二、媒体查询" aria-label="Permalink to &quot;二、媒体查询&quot;">​</a></h2><p>媒体查询可以让我们针对不同的媒体类型定义不同的样式，当重置浏览器窗口大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面。</p><h3 id="media-规则" tabindex="-1">@media 规则 <a class="header-anchor" href="#media-规则" aria-label="Permalink to &quot;@media 规则&quot;">​</a></h3><p>@media 规则在媒体查询中用于为不同的媒体类型/设备应用不同的样式。</p><p>媒体查询可用于检查许多事情，诸如：</p><ul><li>视口的宽度和高度</li><li>设备的宽度和高度</li><li>方向（手机或平板电脑处于横屏还是竖屏模式？）</li><li>分辨率</li></ul><p>语法：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@media</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> not|only mediatype </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (mediafeature and|or|not mediafeature) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  CSS-Code;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>语法解析</p><ol><li>==not、only 和 and 关键字的含义：== <ul><li>not：not 关键字反正整个媒体查询的含义。</li><li>only：only 关键字可防止旧版浏览器应用指定的样式，这些浏览器不支持带媒体特性的媒体查询。它对现代浏览器没有影响。</li><li>and：and 关键字将媒体特性与媒体类型或其他媒体特性组合在一起。<br> 它们都是可选的。但是，如果使用 not 或 only，则还必须指定媒体类型。</li></ul></li><li>==mediatype 媒体类型：== <ul><li>all：默认。用于所有媒体类型设备。</li><li>print：用于打印机。</li><li>screen：用于计算机屏幕、平板电脑、智能手机等。</li><li>speech：用于朗读页面的屏幕阅读器。</li></ul></li><li>==mediafeature 媒体特性 (常用)：==</li></ol><table tabindex="0"><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>width</td><td>定义输出设备中的页面可见区域宽度。</td></tr><tr><td>height</td><td>定义输出设备中的页面可见区域高度。</td></tr><tr><td>min-width</td><td>定义输出设备中的页面最小可见区域宽度。</td></tr><tr><td>max-width</td><td>定义输出设备中的页面最大可见区域宽度。</td></tr><tr><td>min-height</td><td>定义输出设备中的页面最小可见区域高度。</td></tr><tr><td>max-height</td><td>定义输出设备中的页面最大可见区域高度。</td></tr><tr><td>aspect-ratio</td><td>定义输出设备中的页面可见区域宽度与高度的比率</td></tr><tr><td>resolution</td><td>定义设备的分辨率。如：96dpi, 300dpi, 118dpcm</td></tr><tr><td>orientation</td><td>定义输出设备中的页面可见区域高度是否大于或等于宽度。</td></tr></tbody></table><p>示例：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*在媒体为最大宽度为500px的屏幕时生效*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@media</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> only</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> screen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">max-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	CSS-Code;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="响应式设计思路" tabindex="-1">响应式设计思路 <a class="header-anchor" href="#响应式设计思路" aria-label="Permalink to &quot;响应式设计思路&quot;">​</a></h3><blockquote><p>移动优先还是 PC 优先？</p><p>不管是移动优先还是 PC 优先，都是依据当随着屏幕宽度增大或减小的时候，后面的样式会覆盖前面的样式。<br> 因此，移动端优先首先使用的是 <code>min-width</code>，PC 端优先使用的 <code>max-width</code>。</p></blockquote><p>==断点设计==<br> 根据应用场景划分出四个点，分别是 480px, 800px, 1400px, 1400px</p><p><img src="`+l+`" alt="15fec33003371f62tplv-t2oaga2asx-jj-mark3024000q75.webp"></p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*小屏幕*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@media</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> screen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">max-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">480</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	CSS-Code;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*中屏幕*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@media</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> screen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">max-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">800</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">min-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">481</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	CSS-Code;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*大屏幕*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@media</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> screen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">max-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1400</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">min-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">801</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	CSS-Code;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*巨屏幕*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@media</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> screen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">min-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1400</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	CSS-Code;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Bootstrap 的方案</p><p><img src="`+h+`" alt="169fa8fc4e71232etplv-t2oaga2asx-jj-mark3024000q75.webp"></p><h2 id="三、响应式单位布局" tabindex="-1">三、响应式单位布局 <a class="header-anchor" href="#三、响应式单位布局" aria-label="Permalink to &quot;三、响应式单位布局&quot;">​</a></h2><h3 id="百分比" tabindex="-1">百分比 <a class="header-anchor" href="#百分比" aria-label="Permalink to &quot;百分比&quot;">​</a></h3><p>通过百分比单位，可以使得浏览器中组件的宽和高随着浏览器的高度的变化而变化，从而实现响应式的效果。<br> Bootstrap 里面的栅格系统就是利用百分比来定义元素的宽高，CSS3 支持最大最小高，可以将百分比和 max(min) 一起结合使用来定义元素在不同设备下的宽高。</p><p>示例：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	hight:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>百分比布局的缺点:</strong></p><ol><li>计算困难。如果我们要定义一个元素的宽度和高度，按照设计稿，必须换算成百分比单位。</li><li>相对元素容易混乱。width 和 height 相对于父元素的 width 和 height，而 margin、padding 不管垂直还是水平方向都相对比父元素的宽度、border-radius 则是相对于元素自身等等，造成我们使用百分比单位容易使布局问题变得复杂。</li></ol><h3 id="rem" tabindex="-1">rem <a class="header-anchor" href="#rem" aria-label="Permalink to &quot;rem&quot;">​</a></h3><p>rem 是 CSS3 新增的单位，并且移动端的支持度很高，Android2.x+,ios5+ 都支持。<br> rem 单位都是相对于根元素 html 的 font-size 来决定大小的，根元素的 font-size 相当于提供了一个基准，当页面的 size 发生变化时，只需要改变 font-size 的值，那么以 rem 为固定单位的元素的大小也会发生响应的变化。<br> 因此，如果通过 rem 来实现响应式的布局，只需要根据视图容器的大小，动态的改变 font-size 即可。</p><blockquote><p>em 是相对于父元素字体大小。</p></blockquote><p><strong>rem 响应式的布局思想：</strong></p><ul><li>一般不要给元素设置具体的宽度，但是对于一些小图标可以设定具体宽度值。</li><li>高度值可以设置固定值，设计稿有多大，我们就严格有多大。</li><li>所有设置的固定值都用 rem 做单位（首先在 HTML 总设置一个基准值：px 和 rem 的对应比例，然后在效果图上获取 px 值，布局的时候转化为 rem 值)。</li><li>js 获取真实屏幕的宽度，让其除以设计稿的宽度，算出比例，把之前的基准值按照比例进行重新的设定，这样项目就可以在移动端自适应了。</li></ul><p><strong>rem 布局的缺点：</strong><br> 在响应式布局中，必须通过 js 来动态控制根元素 font-size 的大小，也就是说 css 样式和 js 代码有一定的耦合性，且必须将改变 font-size 的代码放在 css 样式之前。</p><p><strong>rem 单位的换算：</strong><br> 假设 font-size 大小为 apx，那么 1rem = a px，如果设计稿某个元素的高度为 b px，换算成 rem 即为 b/a rem</p><h3 id="视口单位" tabindex="-1">视口单位 <a class="header-anchor" href="#视口单位" aria-label="Permalink to &quot;视口单位&quot;">​</a></h3><p>css3 中引入了一个新的单位 vw/vh，与视图窗口有关，vw 表示相对于视图窗口的宽度，vh 表示相对于视图窗口高度，除了 vw 和 vh 外，还有 vmin 和 vmax 两个相关的单位。各个单位具体的含义如下：</p><table tabindex="0"><thead><tr><th>单位</th><th>含义</th></tr></thead><tbody><tr><td>vw</td><td>相对于视窗的宽度，1vw 等于视口宽度的 1%，即视窗宽度是 100vw</td></tr><tr><td>vh</td><td>相对于视窗的高度，1vh 等于视口高度的 1%，即视窗高度是 100vh</td></tr><tr><td>vmin</td><td>vw 和 vh 中的较小值</td></tr><tr><td>vmax</td><td>vw 和 vh 中的较大值</td></tr></tbody></table><p>视口单位与百分比类似，但其对比的始终是视口。<br> 使用视口单位来实现响应式有两种做法：</p><ol><li>仅使用 vw 或 vh 作为 CSS 单位</li><li>搭配 vw 和 rem<br> 虽然采用 vw 适配后的页面效果很好，但是它是利用视口单位实现的布局，依赖视口大小而自动缩放，无论视口过大还是过小，它也随着时候过大或者过小，失去了最大最小宽度的限制，此时我们可以结合 rem 来实现布局。</li></ol><h2 id="四、图片的响应式" tabindex="-1">四、图片的响应式 <a class="header-anchor" href="#四、图片的响应式" aria-label="Permalink to &quot;四、图片的响应式&quot;">​</a></h2><ol><li><strong>使用 max-width 属性</strong><br> 如果将 max-width 属性设置为 100％，则图像将按需缩小，但绝不会放大到大于其原始大小。</li><li><strong>设置成背景图像</strong><br> 通过设置 background-size 属性也可以实现响应式。<br> &quot;contain&quot;，则背景图像将缩放，并尝试匹配内容区域。不过图像将保持其长宽比。<br>  &quot;100% 100%&quot;，则背景图像将拉伸以覆盖整个内容区域。<br>  &quot;cover&quot;，则背景图像将缩放以覆盖整个内容区域</li><li>H5&lt;picture&gt;元素<br><code>&lt;picture&gt;</code> 元素的作用类似于 <code>&lt;video&gt;</code> 和 <code>&lt;audio&gt;</code> 元素。我们设置了不同的来源，而匹配优先权的第一个来源是正在使用的来源。</li></ol><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">picture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">source</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> srcset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;img_smallflower.jpg&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> media</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(max-width: 400px)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">source</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> srcset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;img_flowers.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;img_flowers.jpg&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Flowers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">picture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="五、bootstrap" tabindex="-1">五、Bootstrap <a class="header-anchor" href="#五、bootstrap" aria-label="Permalink to &quot;五、Bootstrap&quot;">​</a></h2><div class="note custom-block github-alert"><p class="custom-block-title">Title</p><p><a href="https://v3.bootcss.com/" target="_blank" rel="noreferrer">Bootstrap v3 中文文档 · Bootstrap 是最受欢迎的 HTML、CSS 和 JavaScript 框架，用于开发响应式布局、移动设备优先的 WEB 项目。 | Bootstrap 中文网</a></p></div><p>Bootstrap 是最受欢迎的 HTML、CSS 和 JS 框架，用于开发响应式布局、移动设备优先的 WEB 项目。</p>`,49)]))}const y=i(p,[["render",e]]);export{c as __pageData,y as default};
